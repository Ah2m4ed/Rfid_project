
reci.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  000004e4  00000578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  008000ae  008000ae  000005c6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3b  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ef  00000000  00000000  00001b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000752  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000224  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061b  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae ea       	ldi	r26, 0xAE	; 174
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3c       	cpi	r26, 0xCB	; 203
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  8a:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_send_command>:
#include "macros.h"
#include <avr/delay.h>
#include <util/delay.h>
	
void lcd_send_command(uint8_t cmd ){
	PORT_data =cmd;
  92:	85 bb       	out	0x15, r24	; 21
	
	// disabled RW
	CLR_BIT(PORT_CONT,RW);
  94:	91 98       	cbi	0x12, 1	; 18
	// enabel rs
	CLR_BIT(PORT_CONT,RS);
  96:	94 98       	cbi	0x12, 4	; 18
	
	//adjust enable 
	CLR_BIT(PORT_CONT,en);
  98:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_send_command+0xa>
  a0:	00 00       	nop
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
  a2:	93 9a       	sbi	0x12, 3	; 18
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	9a 95       	dec	r25
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_send_command+0x14>
  aa:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	87 ea       	ldi	r24, 0xA7	; 167
  ae:	91 e6       	ldi	r25, 0x61	; 97
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_send_command+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_send_command+0x24>
  b6:	00 00       	nop
	_delay_us(1);
	
	//let lcd execute command
	_delay_ms(10);
	
}
  b8:	08 95       	ret

000000ba <lcd_init>:
void lcd_init(){
	// data on portb are output
	DDRC=0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
  be:	15 ba       	out	0x15, r1	; 21
	//control pins are output 
	SET_BIT(DDRD,en);
  c0:	8b 9a       	sbi	0x11, 3	; 17
	SET_BIT(DDRD,RW);
  c2:	89 9a       	sbi	0x11, 1	; 17
	SET_BIT(DDRD,RS);
  c4:	8c 9a       	sbi	0x11, 4	; 17
	// active enable 
	SET_BIT(PORT_CONT,en);
  c6:	93 9a       	sbi	0x12, 3	; 18
	
	//lcd_init 8bit mode
	lcd_send_command(0x38);
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
	//lcd on cursor off
	lcd_send_command(0x0c);
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
}
  d4:	08 95       	ret

000000d6 <LCD_SendData>:

void LCD_SendData(unsigned char data)
{
	// Put Data on Port
	PORTC = data;
  d6:	85 bb       	out	0x15, r24	; 21
	// Set R/W to W
	CLR_BIT(PORT_CONT,RW);
  d8:	91 98       	cbi	0x12, 1	; 18
	// Set RS to Data
	SET_BIT(PORT_CONT,RS);
  da:	94 9a       	sbi	0x12, 4	; 18

//adjust enable
	CLR_BIT(PORT_CONT,en);
  dc:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_SendData+0xa>
  e4:	00 00       	nop
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
  e6:	93 9a       	sbi	0x12, 3	; 18
  e8:	93 e0       	ldi	r25, 0x03	; 3
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_SendData+0x14>
  ee:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	87 ea       	ldi	r24, 0xA7	; 167
  f2:	91 e6       	ldi	r25, 0x61	; 97
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_SendData+0x1e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_SendData+0x24>
  fa:	00 00       	nop
	_delay_us(1);
	
	// Delay to let LCD Display Data
	_delay_ms(10);
}
  fc:	08 95       	ret

000000fe <LCD_SET_CURSOR>:

void LCD_SET_CURSOR (unsigned char x, unsigned char y)
{
	if(y == 0)
  fe:	66 23       	and	r22, r22
 100:	21 f4       	brne	.+8      	; 0x10a <LCD_SET_CURSOR+0xc>
	{
		lcd_send_command(0x80 + x);
 102:	80 58       	subi	r24, 0x80	; 128
 104:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 108:	08 95       	ret
	}
	else
	{
		lcd_send_command(0xC0+ x);
 10a:	80 54       	subi	r24, 0x40	; 64
 10c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 110:	08 95       	ret

00000112 <LCD_SendString>:
	}
}

void LCD_SendString(char *str)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	while(*str != '\0')
 118:	88 81       	ld	r24, Y
 11a:	88 23       	and	r24, r24
 11c:	31 f0       	breq	.+12     	; 0x12a <LCD_SendString+0x18>
	{
		lcd_send_command(0xC0+ x);
	}
}

void LCD_SendString(char *str)
 11e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		LCD_SendData(*str);
 120:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_SendData>
	}
}

void LCD_SendString(char *str)
{
	while(*str != '\0')
 124:	89 91       	ld	r24, Y+
 126:	88 23       	and	r24, r24
 128:	d9 f7       	brne	.-10     	; 0x120 <LCD_SendString+0xe>
	{
		LCD_SendData(*str);
		str++;
	}
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <LCD_Clear>:
void LCD_Clear(void)
{
	// Send Clr command to LCD
lcd_send_command(0x01);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
}
 136:	08 95       	ret

00000138 <lcd_out>:

void lcd_out( unsigned char x, unsigned char y,char *str)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ea 01       	movw	r28, r20
	LCD_SET_CURSOR(x, y);
 13e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_SET_CURSOR>
	LCD_SendString(str);
 142:	ce 01       	movw	r24, r28
 144:	0e 94 89 00 	call	0x112	; 0x112 <LCD_SendString>
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <convertData>:
char* convertData(unsigned int var)
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
 14e:	10 92 be 00 	sts	0x00BE, r1
if(var==0) return "zero";
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	71 f0       	breq	.+28     	; 0x172 <convertData+0x24>
 156:	ee eb       	ldi	r30, 0xBE	; 190
 158:	f0 e0       	ldi	r31, 0x00	; 0
else 

	while(var != 0)
	{
		arr--;
		*arr = (var%10) + '0';
 15a:	2a e0       	ldi	r18, 0x0A	; 10
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__udivmodhi4>
 164:	80 5d       	subi	r24, 0xD0	; 208
 166:	82 93       	st	-Z, r24
		var = var / 10;
 168:	86 2f       	mov	r24, r22
 16a:	97 2f       	mov	r25, r23

	*arr = '\0';
if(var==0) return "zero";
else 

	while(var != 0)
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	b9 f7       	brne	.-18     	; 0x15e <convertData+0x10>
 170:	02 c0       	rjmp	.+4      	; 0x176 <convertData+0x28>
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
if(var==0) return "zero";
 172:	e0 e6       	ldi	r30, 0x60	; 96
 174:	f0 e0       	ldi	r31, 0x00	; 0
		arr--;
		*arr = (var%10) + '0';
		var = var / 10;
	}
	return arr;
}
 176:	8e 2f       	mov	r24, r30
 178:	9f 2f       	mov	r25, r31
 17a:	08 95       	ret

0000017c <lcd_delete>:

void lcd_delete(){
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
	lcd_out(0,0,"                  ");
 180:	c5 e6       	ldi	r28, 0x65	; 101
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	ae 01       	movw	r20, r28
 18a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	lcd_out(0,1,"                  ");
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	ae 01       	movw	r20, r28
 194:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	
	
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <main>:
#include <avr/interrupt.h>
int cnt,cnt2,cnt3;
char*cnt_lcd,*cnt2_lcd,*cnt3_lcd;
int main(void)
{
UART_INIT();
 19e:	0e 94 34 02 	call	0x468	; 0x468 <UART_INIT>
lcd_init();	
 1a2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_init>
		switch (recv)
		
		{
			case 'a':lcd_delete();_delay_ms(1);lcd_out(0,0,"yes"); _delay_ms(1); cnt++;if(cnt==2){cnt=1;}break;
				case 'b':lcd_delete();_delay_ms(1);lcd_out(0,0,"no");_delay_ms(1);cnt2++; if(cnt2==2){cnt2=1;} break;
					case 'c':lcd_delete();_delay_ms(1);lcd_out(0,0,"null");_delay_ms(1);cnt3++; if(cnt3==2){cnt3=1;} break;
 1a6:	0f 2e       	mov	r0, r31
 1a8:	ff e7       	ldi	r31, 0x7F	; 127
 1aa:	cf 2e       	mov	r12, r31
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	df 2e       	mov	r13, r31
 1b0:	f0 2d       	mov	r31, r0
 1b2:	66 24       	eor	r6, r6
 1b4:	77 24       	eor	r7, r7
 1b6:	63 94       	inc	r6
						case 'd':lcd_delete();_delay_ms(1);lcd_out(0,0,"yes");_delay_ms(1);cnt++; if(cnt==3){cnt=2;} break;
							case 'e':lcd_delete();_delay_ms(1);lcd_out(0,0,"no");_delay_ms(1);cnt2++; if(cnt2==3){cnt2=2;} break;
 1b8:	0f 2e       	mov	r0, r31
 1ba:	fc e7       	ldi	r31, 0x7C	; 124
 1bc:	af 2e       	mov	r10, r31
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	bf 2e       	mov	r11, r31
 1c2:	f0 2d       	mov	r31, r0
 1c4:	44 24       	eor	r4, r4
 1c6:	55 24       	eor	r5, r5
 1c8:	68 94       	set
 1ca:	41 f8       	bld	r4, 1
		
		{
			case 'a':lcd_delete();_delay_ms(1);lcd_out(0,0,"yes"); _delay_ms(1); cnt++;if(cnt==2){cnt=1;}break;
				case 'b':lcd_delete();_delay_ms(1);lcd_out(0,0,"no");_delay_ms(1);cnt2++; if(cnt2==2){cnt2=1;} break;
					case 'c':lcd_delete();_delay_ms(1);lcd_out(0,0,"null");_delay_ms(1);cnt3++; if(cnt3==2){cnt3=1;} break;
						case 'd':lcd_delete();_delay_ms(1);lcd_out(0,0,"yes");_delay_ms(1);cnt++; if(cnt==3){cnt=2;} break;
 1cc:	0f 2e       	mov	r0, r31
 1ce:	f8 e7       	ldi	r31, 0x78	; 120
 1d0:	8f 2e       	mov	r8, r31
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	9f 2e       	mov	r9, r31
 1d6:	f0 2d       	mov	r31, r0
		
		cnt_lcd=convertData(cnt);
		cnt2_lcd=convertData(cnt2);	
		cnt3_lcd=convertData(cnt3);
		lcd_delete();
		lcd_out(0,0,"number of yes");
 1d8:	c4 e8       	ldi	r28, 0x84	; 132
 1da:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_out(1,1,cnt_lcd);
		lcd_delete();
		lcd_out(0,0,"number of no");
 1dc:	02 e9       	ldi	r16, 0x92	; 146
 1de:	10 e0       	ldi	r17, 0x00	; 0
		lcd_out(1,1,cnt2_lcd);
		lcd_delete();
		lcd_out(0,0,"number of null");
 1e0:	0f 2e       	mov	r0, r31
 1e2:	ff e9       	ldi	r31, 0x9F	; 159
 1e4:	ef 2e       	mov	r14, r31
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	ff 2e       	mov	r15, r31
 1ea:	f0 2d       	mov	r31, r0
int main(void)
{
UART_INIT();
lcd_init();	
    while(1)
    { char recv=UART_Read();
 1ec:	0e 94 42 02 	call	0x484	; 0x484 <UART_Read>
		switch (recv)
 1f0:	83 36       	cpi	r24, 0x63	; 99
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <main+0x58>
 1f4:	5c c0       	rjmp	.+184    	; 0x2ae <main+0x110>
 1f6:	84 36       	cpi	r24, 0x64	; 100
 1f8:	30 f4       	brcc	.+12     	; 0x206 <main+0x68>
 1fa:	81 36       	cpi	r24, 0x61	; 97
 1fc:	71 f0       	breq	.+28     	; 0x21a <main+0x7c>
 1fe:	82 36       	cpi	r24, 0x62	; 98
 200:	09 f0       	breq	.+2      	; 0x204 <main+0x66>
 202:	e6 c0       	rjmp	.+460    	; 0x3d0 <main+0x232>
 204:	2f c0       	rjmp	.+94     	; 0x264 <main+0xc6>
 206:	85 36       	cpi	r24, 0x65	; 101
 208:	09 f4       	brne	.+2      	; 0x20c <main+0x6e>
 20a:	9b c0       	rjmp	.+310    	; 0x342 <main+0x1a4>
 20c:	85 36       	cpi	r24, 0x65	; 101
 20e:	08 f4       	brcc	.+2      	; 0x212 <main+0x74>
 210:	73 c0       	rjmp	.+230    	; 0x2f8 <main+0x15a>
 212:	86 36       	cpi	r24, 0x66	; 102
 214:	09 f0       	breq	.+2      	; 0x218 <main+0x7a>
 216:	dc c0       	rjmp	.+440    	; 0x3d0 <main+0x232>
 218:	b8 c0       	rjmp	.+368    	; 0x38a <main+0x1ec>
		
		{
			case 'a':lcd_delete();_delay_ms(1);lcd_out(0,0,"yes"); _delay_ms(1); cnt++;if(cnt==2){cnt=1;}break;
 21a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 21e:	8f ec       	ldi	r24, 0xCF	; 207
 220:	97 e0       	ldi	r25, 0x07	; 7
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0x84>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x8a>
 228:	00 00       	nop
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	a4 01       	movw	r20, r8
 230:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 234:	8f ec       	ldi	r24, 0xCF	; 207
 236:	97 e0       	ldi	r25, 0x07	; 7
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x9a>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0xa0>
 23e:	00 00       	nop
 240:	80 91 c3 00 	lds	r24, 0x00C3
 244:	90 91 c4 00 	lds	r25, 0x00C4
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	90 93 c4 00 	sts	0x00C4, r25
 24e:	80 93 c3 00 	sts	0x00C3, r24
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	91 05       	cpc	r25, r1
 256:	09 f0       	breq	.+2      	; 0x25a <main+0xbc>
 258:	bb c0       	rjmp	.+374    	; 0x3d0 <main+0x232>
 25a:	70 92 c4 00 	sts	0x00C4, r7
 25e:	60 92 c3 00 	sts	0x00C3, r6
 262:	b6 c0       	rjmp	.+364    	; 0x3d0 <main+0x232>
				case 'b':lcd_delete();_delay_ms(1);lcd_out(0,0,"no");_delay_ms(1);cnt2++; if(cnt2==2){cnt2=1;} break;
 264:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 268:	8f ec       	ldi	r24, 0xCF	; 207
 26a:	97 e0       	ldi	r25, 0x07	; 7
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0xce>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0xd4>
 272:	00 00       	nop
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	a5 01       	movw	r20, r10
 27a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 27e:	8f ec       	ldi	r24, 0xCF	; 207
 280:	97 e0       	ldi	r25, 0x07	; 7
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <main+0xe4>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0xea>
 288:	00 00       	nop
 28a:	80 91 c1 00 	lds	r24, 0x00C1
 28e:	90 91 c2 00 	lds	r25, 0x00C2
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	90 93 c2 00 	sts	0x00C2, r25
 298:	80 93 c1 00 	sts	0x00C1, r24
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	91 05       	cpc	r25, r1
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <main+0x106>
 2a2:	96 c0       	rjmp	.+300    	; 0x3d0 <main+0x232>
 2a4:	70 92 c2 00 	sts	0x00C2, r7
 2a8:	60 92 c1 00 	sts	0x00C1, r6
 2ac:	91 c0       	rjmp	.+290    	; 0x3d0 <main+0x232>
					case 'c':lcd_delete();_delay_ms(1);lcd_out(0,0,"null");_delay_ms(1);cnt3++; if(cnt3==2){cnt3=1;} break;
 2ae:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 2b2:	8f ec       	ldi	r24, 0xCF	; 207
 2b4:	97 e0       	ldi	r25, 0x07	; 7
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x118>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x11e>
 2bc:	00 00       	nop
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	a6 01       	movw	r20, r12
 2c4:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 2c8:	8f ec       	ldi	r24, 0xCF	; 207
 2ca:	97 e0       	ldi	r25, 0x07	; 7
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0x12e>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x134>
 2d2:	00 00       	nop
 2d4:	80 91 c7 00 	lds	r24, 0x00C7
 2d8:	90 91 c8 00 	lds	r25, 0x00C8
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	90 93 c8 00 	sts	0x00C8, r25
 2e2:	80 93 c7 00 	sts	0x00C7, r24
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	91 05       	cpc	r25, r1
 2ea:	09 f0       	breq	.+2      	; 0x2ee <main+0x150>
 2ec:	71 c0       	rjmp	.+226    	; 0x3d0 <main+0x232>
 2ee:	70 92 c8 00 	sts	0x00C8, r7
 2f2:	60 92 c7 00 	sts	0x00C7, r6
 2f6:	6c c0       	rjmp	.+216    	; 0x3d0 <main+0x232>
						case 'd':lcd_delete();_delay_ms(1);lcd_out(0,0,"yes");_delay_ms(1);cnt++; if(cnt==3){cnt=2;} break;
 2f8:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 2fc:	8f ec       	ldi	r24, 0xCF	; 207
 2fe:	97 e0       	ldi	r25, 0x07	; 7
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <main+0x162>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x168>
 306:	00 00       	nop
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	a4 01       	movw	r20, r8
 30e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 312:	8f ec       	ldi	r24, 0xCF	; 207
 314:	97 e0       	ldi	r25, 0x07	; 7
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <main+0x178>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x17e>
 31c:	00 00       	nop
 31e:	80 91 c3 00 	lds	r24, 0x00C3
 322:	90 91 c4 00 	lds	r25, 0x00C4
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	90 93 c4 00 	sts	0x00C4, r25
 32c:	80 93 c3 00 	sts	0x00C3, r24
 330:	83 30       	cpi	r24, 0x03	; 3
 332:	91 05       	cpc	r25, r1
 334:	09 f0       	breq	.+2      	; 0x338 <main+0x19a>
 336:	4c c0       	rjmp	.+152    	; 0x3d0 <main+0x232>
 338:	50 92 c4 00 	sts	0x00C4, r5
 33c:	40 92 c3 00 	sts	0x00C3, r4
 340:	47 c0       	rjmp	.+142    	; 0x3d0 <main+0x232>
							case 'e':lcd_delete();_delay_ms(1);lcd_out(0,0,"no");_delay_ms(1);cnt2++; if(cnt2==3){cnt2=2;} break;
 342:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 346:	8f ec       	ldi	r24, 0xCF	; 207
 348:	97 e0       	ldi	r25, 0x07	; 7
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x1ac>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x1b2>
 350:	00 00       	nop
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	a5 01       	movw	r20, r10
 358:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 35c:	8f ec       	ldi	r24, 0xCF	; 207
 35e:	97 e0       	ldi	r25, 0x07	; 7
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <main+0x1c2>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x1c8>
 366:	00 00       	nop
 368:	80 91 c1 00 	lds	r24, 0x00C1
 36c:	90 91 c2 00 	lds	r25, 0x00C2
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	90 93 c2 00 	sts	0x00C2, r25
 376:	80 93 c1 00 	sts	0x00C1, r24
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	91 05       	cpc	r25, r1
 37e:	41 f5       	brne	.+80     	; 0x3d0 <main+0x232>
 380:	50 92 c2 00 	sts	0x00C2, r5
 384:	40 92 c1 00 	sts	0x00C1, r4
 388:	23 c0       	rjmp	.+70     	; 0x3d0 <main+0x232>
								case 'f':lcd_delete();_delay_ms(1);lcd_out(0,0,"null");_delay_ms(1);cnt3++; if(cnt3==3){cnt3=2;} break;
 38a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 38e:	8f ec       	ldi	r24, 0xCF	; 207
 390:	97 e0       	ldi	r25, 0x07	; 7
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <main+0x1f4>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0x1fa>
 398:	00 00       	nop
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	a6 01       	movw	r20, r12
 3a0:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 3a4:	8f ec       	ldi	r24, 0xCF	; 207
 3a6:	97 e0       	ldi	r25, 0x07	; 7
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0x20a>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0x210>
 3ae:	00 00       	nop
 3b0:	80 91 c7 00 	lds	r24, 0x00C7
 3b4:	90 91 c8 00 	lds	r25, 0x00C8
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	90 93 c8 00 	sts	0x00C8, r25
 3be:	80 93 c7 00 	sts	0x00C7, r24
 3c2:	83 30       	cpi	r24, 0x03	; 3
 3c4:	91 05       	cpc	r25, r1
 3c6:	21 f4       	brne	.+8      	; 0x3d0 <main+0x232>
 3c8:	50 92 c8 00 	sts	0x00C8, r5
 3cc:	40 92 c7 00 	sts	0x00C7, r4
		}
		
		cnt_lcd=convertData(cnt);
 3d0:	80 91 c3 00 	lds	r24, 0x00C3
 3d4:	90 91 c4 00 	lds	r25, 0x00C4
 3d8:	0e 94 a7 00 	call	0x14e	; 0x14e <convertData>
 3dc:	90 93 c0 00 	sts	0x00C0, r25
 3e0:	80 93 bf 00 	sts	0x00BF, r24
		cnt2_lcd=convertData(cnt2);	
 3e4:	80 91 c1 00 	lds	r24, 0x00C1
 3e8:	90 91 c2 00 	lds	r25, 0x00C2
 3ec:	0e 94 a7 00 	call	0x14e	; 0x14e <convertData>
 3f0:	90 93 c6 00 	sts	0x00C6, r25
 3f4:	80 93 c5 00 	sts	0x00C5, r24
		cnt3_lcd=convertData(cnt3);
 3f8:	80 91 c7 00 	lds	r24, 0x00C7
 3fc:	90 91 c8 00 	lds	r25, 0x00C8
 400:	0e 94 a7 00 	call	0x14e	; 0x14e <convertData>
 404:	90 93 ca 00 	sts	0x00CA, r25
 408:	80 93 c9 00 	sts	0x00C9, r24
		lcd_delete();
 40c:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		lcd_out(0,0,"number of yes");
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	ae 01       	movw	r20, r28
 416:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
		lcd_out(1,1,cnt_lcd);
 41a:	40 91 bf 00 	lds	r20, 0x00BF
 41e:	50 91 c0 00 	lds	r21, 0x00C0
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
		lcd_delete();
 42a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		lcd_out(0,0,"number of no");
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	a8 01       	movw	r20, r16
 434:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
		lcd_out(1,1,cnt2_lcd);
 438:	40 91 c5 00 	lds	r20, 0x00C5
 43c:	50 91 c6 00 	lds	r21, 0x00C6
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
		lcd_delete();
 448:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		lcd_out(0,0,"number of null");
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	a7 01       	movw	r20, r14
 452:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
		lcd_out(1,1,cnt3_lcd);				
 456:	40 91 c9 00 	lds	r20, 0x00C9
 45a:	50 91 ca 00 	lds	r21, 0x00CA
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
		}
 466:	c2 ce       	rjmp	.-636    	; 0x1ec <main+0x4e>

00000468 <UART_INIT>:
 */ 
#include "AVR_UART.h"

void UART_INIT()
{
UBRRL = (uint8_t)(MYUBRR) ;    //send the low  8 bits of the UBRR
 468:	83 e3       	ldi	r24, 0x33	; 51
 46a:	89 b9       	out	0x09, r24	; 9
UBRRH = (uint8_t)(MYUBRR>>8);//send the high 4 bits of the UBRR
 46c:	10 bc       	out	0x20, r1	; 32
UCSRB |=((1<<4)|(1<<3));     //Enable transmit and enable RXENn TXENn
 46e:	8a b1       	in	r24, 0x0a	; 10
 470:	88 61       	ori	r24, 0x18	; 24
 472:	8a b9       	out	0x0a, r24	; 10
UCSRC |=((1<<2)|(1<<1));     //Frame with 8 bit data , 1 stop bit, no parity UCSZn1 UCSZn0 , Asynchornous mode 
 474:	80 b5       	in	r24, 0x20	; 32
 476:	86 60       	ori	r24, 0x06	; 6
 478:	80 bd       	out	0x20, r24	; 32
}
 47a:	08 95       	ret

0000047c <UART_Transmit>:


void UART_Transmit(uint8_t data)
{  while( !(UCSRA & (1<<5)) ) ;// wait until the buffer is empty UDREn
 47c:	5d 9b       	sbis	0x0b, 5	; 11
 47e:	fe cf       	rjmp	.-4      	; 0x47c <UART_Transmit>
	UDR=data;
 480:	8c b9       	out	0x0c, r24	; 12
}
 482:	08 95       	ret

00000484 <UART_Read>:

uint8_t UART_Read()
{ while( !(UCSRA & (1<<7)) ) ;//wait until the receiving complete RXCn
 484:	5f 9b       	sbis	0x0b, 7	; 11
 486:	fe cf       	rjmp	.-4      	; 0x484 <UART_Read>
	return UDR;
 488:	8c b1       	in	r24, 0x0c	; 12
}
 48a:	08 95       	ret

0000048c <UART_Transmit_string>:

void UART_Transmit_string (char * str)
{
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	8c 01       	movw	r16, r24
	unsigned char i =0 ;
	 while(str[i]!=0)
 494:	fc 01       	movw	r30, r24
 496:	80 81       	ld	r24, Z
 498:	88 23       	and	r24, r24
 49a:	51 f0       	breq	.+20     	; 0x4b0 <UART_Transmit_string+0x24>
	return UDR;
}

void UART_Transmit_string (char * str)
{
	unsigned char i =0 ;
 49c:	c0 e0       	ldi	r28, 0x00	; 0
	 while(str[i]!=0)
	    {UART_Transmit(str[i]) ; i++;}
 49e:	0e 94 3e 02 	call	0x47c	; 0x47c <UART_Transmit>
 4a2:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_Transmit_string (char * str)
{
	unsigned char i =0 ;
	 while(str[i]!=0)
 4a4:	f8 01       	movw	r30, r16
 4a6:	ec 0f       	add	r30, r28
 4a8:	f1 1d       	adc	r31, r1
 4aa:	80 81       	ld	r24, Z
 4ac:	88 23       	and	r24, r24
 4ae:	b9 f7       	brne	.-18     	; 0x49e <UART_Transmit_string+0x12>
	    {UART_Transmit(str[i]) ; i++;}
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	08 95       	ret

000004b8 <__udivmodhi4>:
 4b8:	aa 1b       	sub	r26, r26
 4ba:	bb 1b       	sub	r27, r27
 4bc:	51 e1       	ldi	r21, 0x11	; 17
 4be:	07 c0       	rjmp	.+14     	; 0x4ce <__udivmodhi4_ep>

000004c0 <__udivmodhi4_loop>:
 4c0:	aa 1f       	adc	r26, r26
 4c2:	bb 1f       	adc	r27, r27
 4c4:	a6 17       	cp	r26, r22
 4c6:	b7 07       	cpc	r27, r23
 4c8:	10 f0       	brcs	.+4      	; 0x4ce <__udivmodhi4_ep>
 4ca:	a6 1b       	sub	r26, r22
 4cc:	b7 0b       	sbc	r27, r23

000004ce <__udivmodhi4_ep>:
 4ce:	88 1f       	adc	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	5a 95       	dec	r21
 4d4:	a9 f7       	brne	.-22     	; 0x4c0 <__udivmodhi4_loop>
 4d6:	80 95       	com	r24
 4d8:	90 95       	com	r25
 4da:	bc 01       	movw	r22, r24
 4dc:	cd 01       	movw	r24, r26
 4de:	08 95       	ret

000004e0 <_exit>:
 4e0:	f8 94       	cli

000004e2 <__stop_program>:
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <__stop_program>
