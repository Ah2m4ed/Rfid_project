
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000440  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080007e  0080007e  000004f2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000017b  00000000  00000000  00000cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000bc8  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000514  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a7e  00000000  00000000  00001f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000029ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b0  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000027e  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000b9  00000000  00000000  0000305a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00003113  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 1e 02 	jmp	0x43c	; 0x43c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "USART_RS232_H_file.h"	
#include "LCD16x2_4bit.h"		
#include <util/delay.h>

int main()
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	2f 97       	sbiw	r28, 0x0f	; 15
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
	char RFID[15];
	USART_Init(9600);			
  b2:	60 e8       	ldi	r22, 0x80	; 128
  b4:	75 e2       	ldi	r23, 0x25	; 37
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 a6 01 	call	0x34c	; 0x34c <USART_Init>
	lcd_init();					
  be:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_init>
	lcd_clear();			
  c2:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_clear>
	lcd_out(0,0,"RFID:");
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	40 e6       	ldi	r20, 0x60	; 96
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_out>
	while(1)
	{	
		for (int i=0;i<12;i++)
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	10 e0       	ldi	r17, 0x00	; 0
		{
			RFID[i]=USART_RxChar();
  d6:	7e 01       	movw	r14, r28
  d8:	08 94       	sec
  da:	e1 1c       	adc	r14, r1
  dc:	f1 1c       	adc	r15, r1
	lcd_init();					
	lcd_clear();			
	lcd_out(0,0,"RFID:");
	while(1)
	{	
		for (int i=0;i<12;i++)
  de:	cc 24       	eor	r12, r12
  e0:	dd 24       	eor	r13, r13
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <main+0x62>
		{
			RFID[i]=USART_RxChar();
  e4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <USART_RxChar>
  e8:	f7 01       	movw	r30, r14
  ea:	e0 0f       	add	r30, r16
  ec:	f1 1f       	adc	r31, r17
  ee:	80 83       	st	Z, r24
	lcd_init();					
	lcd_clear();			
	lcd_out(0,0,"RFID:");
	while(1)
	{	
		for (int i=0;i<12;i++)
  f0:	0f 5f       	subi	r16, 0xFF	; 255
  f2:	1f 4f       	sbci	r17, 0xFF	; 255
  f4:	0c 30       	cpi	r16, 0x0C	; 12
  f6:	11 05       	cpc	r17, r1
  f8:	ac f3       	brlt	.-22     	; 0xe4 <main+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8a e1       	ldi	r24, 0x1A	; 26
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x6a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x70>
		{
			RFID[i]=USART_RxChar();
		}
		_delay_us(10);
		lcd_out(0,1,RFID);		/* print 12 digit tag number on LCD */
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	a7 01       	movw	r20, r14
 108:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_out>
	lcd_init();					
	lcd_clear();			
	lcd_out(0,0,"RFID:");
	while(1)
	{	
		for (int i=0;i<12;i++)
 10c:	86 01       	movw	r16, r12
 10e:	f2 cf       	rjmp	.-28     	; 0xf4 <main+0x62>

00000110 <lcd_send_command>:
#include "macros.h"
#include <avr/delay.h>
#include <util/delay.h>
	
void lcd_send_command(uint8_t cmd ){
	PORT_data =cmd;
 110:	88 bb       	out	0x18, r24	; 24
	
	// disabled RW
	CLR_BIT(PORT_CONT,RW);
 112:	d9 98       	cbi	0x1b, 1	; 27
	// enabel rs
	CLR_BIT(PORT_CONT,RS);
 114:	d8 98       	cbi	0x1b, 0	; 27
	
	//adjust enable 
	CLR_BIT(PORT_CONT,en);
 116:	d9 98       	cbi	0x1b, 1	; 27
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_send_command+0xa>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_send_command+0x10>
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
 120:	d9 9a       	sbi	0x1b, 1	; 27
 122:	92 e0       	ldi	r25, 0x02	; 2
 124:	9a 95       	dec	r25
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_send_command+0x14>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_send_command+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e1       	ldi	r24, 0x1F	; 31
 12c:	9e e4       	ldi	r25, 0x4E	; 78
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_send_command+0x1e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_send_command+0x24>
 134:	00 00       	nop
	_delay_us(1);
	
	//let lcd execute command
	_delay_ms(10);
	
}
 136:	08 95       	ret

00000138 <lcd_init>:
void lcd_init(){
	// data on portb are output
	DDRB=0xff;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	87 bb       	out	0x17, r24	; 23
	PORTB=0;
 13c:	18 ba       	out	0x18, r1	; 24
	//control pins are output 
	SET_BIT(DDRA,en);
 13e:	d1 9a       	sbi	0x1a, 1	; 26
	SET_BIT(DDRA,RW);
 140:	d1 9a       	sbi	0x1a, 1	; 26
	SET_BIT(DDRA,RS);
 142:	d0 9a       	sbi	0x1a, 0	; 26
	// active enable 
	SET_BIT(PORT_CONT,en);
 144:	d9 9a       	sbi	0x1b, 1	; 27
	
	//lcd_init 8bit mode
	lcd_send_command(0x38);
 146:	88 e3       	ldi	r24, 0x38	; 56
 148:	0e 94 88 00 	call	0x110	; 0x110 <lcd_send_command>
	//lcd on cursor off
	lcd_send_command(0x0c);
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_send_command>
}
 152:	08 95       	ret

00000154 <LCD_SendData>:

void LCD_SendData(unsigned char data)
{
	// Put Data on Port
	PORTB = data;
 154:	88 bb       	out	0x18, r24	; 24
	// Set R/W to W
	CLR_BIT(PORT_CONT,RW);
 156:	d9 98       	cbi	0x1b, 1	; 27
	// Set RS to Data
	SET_BIT(PORT_CONT,RS);
 158:	d8 9a       	sbi	0x1b, 0	; 27

//adjust enable
	CLR_BIT(PORT_CONT,en);
 15a:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_SendData+0xa>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_SendData+0x10>
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
 164:	d9 9a       	sbi	0x1b, 1	; 27
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	9a 95       	dec	r25
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_SendData+0x14>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_SendData+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8f e1       	ldi	r24, 0x1F	; 31
 170:	9e e4       	ldi	r25, 0x4E	; 78
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_SendData+0x1e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_SendData+0x24>
 178:	00 00       	nop
	_delay_us(1);
	
	// Delay to let LCD Display Data
	_delay_ms(10);
}
 17a:	08 95       	ret

0000017c <LCD_SET_CURSOR>:

void LCD_SET_CURSOR (unsigned char x, unsigned char y)
{
	if(y == 0)
 17c:	66 23       	and	r22, r22
 17e:	21 f4       	brne	.+8      	; 0x188 <LCD_SET_CURSOR+0xc>
	{
		lcd_send_command(0x80 + x);
 180:	80 58       	subi	r24, 0x80	; 128
 182:	0e 94 88 00 	call	0x110	; 0x110 <lcd_send_command>
 186:	08 95       	ret
	}
	else
	{
		lcd_send_command(0xC0+ x);
 188:	80 54       	subi	r24, 0x40	; 64
 18a:	0e 94 88 00 	call	0x110	; 0x110 <lcd_send_command>
 18e:	08 95       	ret

00000190 <LCD_SendString>:
	}
}

void LCD_SendString(char *str)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ec 01       	movw	r28, r24
	while(*str != '\0')
 196:	88 81       	ld	r24, Y
 198:	88 23       	and	r24, r24
 19a:	31 f0       	breq	.+12     	; 0x1a8 <LCD_SendString+0x18>
	{
		lcd_send_command(0xC0+ x);
	}
}

void LCD_SendString(char *str)
 19c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		LCD_SendData(*str);
 19e:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_SendData>
	}
}

void LCD_SendString(char *str)
{
	while(*str != '\0')
 1a2:	89 91       	ld	r24, Y+
 1a4:	88 23       	and	r24, r24
 1a6:	d9 f7       	brne	.-10     	; 0x19e <LCD_SendString+0xe>
	{
		LCD_SendData(*str);
		str++;
	}
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <LCD_Clear>:
void LCD_Clear(void)
{
	// Send Clr command to LCD
lcd_send_command(0x01);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 88 00 	call	0x110	; 0x110 <lcd_send_command>
}
 1b4:	08 95       	ret

000001b6 <lcd_out>:

void lcd_out( unsigned char x, unsigned char y,char *str)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ea 01       	movw	r28, r20
	LCD_SET_CURSOR(x, y);
 1bc:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_SET_CURSOR>
	LCD_SendString(str);
 1c0:	ce 01       	movw	r24, r28
 1c2:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_SendString>
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <convertData>:
char* convertData(unsigned int var)
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
 1cc:	10 92 8e 00 	sts	0x008E, r1
if(var==0) return "zero";
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	71 f0       	breq	.+28     	; 0x1f0 <convertData+0x24>
 1d4:	ee e8       	ldi	r30, 0x8E	; 142
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
else 

	while(var != 0)
	{
		arr--;
		*arr = (var%10) + '0';
 1d8:	2a e0       	ldi	r18, 0x0A	; 10
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__udivmodhi4>
 1e2:	80 5d       	subi	r24, 0xD0	; 208
 1e4:	82 93       	st	-Z, r24
		var = var / 10;
 1e6:	86 2f       	mov	r24, r22
 1e8:	97 2f       	mov	r25, r23

	*arr = '\0';
if(var==0) return "zero";
else 

	while(var != 0)
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	b9 f7       	brne	.-18     	; 0x1dc <convertData+0x10>
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <convertData+0x28>
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
if(var==0) return "zero";
 1f0:	e6 e6       	ldi	r30, 0x66	; 102
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
		arr--;
		*arr = (var%10) + '0';
		var = var / 10;
	}
	return arr;
}
 1f4:	8e 2f       	mov	r24, r30
 1f6:	9f 2f       	mov	r25, r31
 1f8:	08 95       	ret

000001fa <lcd_delete>:

void lcd_delete(){
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
	lcd_out(0,0,"                  ");
 1fe:	cb e6       	ldi	r28, 0x6B	; 107
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	ae 01       	movw	r20, r28
 208:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_out>
	lcd_out(0,1,"                  ");
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	ae 01       	movw	r20, r28
 212:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_out>
	
	
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <lcdcommand>:
 */ 

#include "LCD16x2_4bit.h"
void lcdcommand(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
 21c:	9b b3       	in	r25, 0x1b	; 27
 21e:	28 2f       	mov	r18, r24
 220:	20 7f       	andi	r18, 0xF0	; 240
 222:	9f 70       	andi	r25, 0x0F	; 15
 224:	92 2b       	or	r25, r18
 226:	9b bb       	out	0x1b, r25	; 27
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
 228:	dc 98       	cbi	0x1b, 4	; 27
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
 22a:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	9a 95       	dec	r25
 230:	f1 f7       	brne	.-4      	; 0x22e <lcdcommand+0x12>
 232:	00 c0       	rjmp	.+0      	; 0x234 <lcdcommand+0x18>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 234:	db 98       	cbi	0x1b, 3	; 27
 236:	e7 ec       	ldi	r30, 0xC7	; 199
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcdcommand+0x1e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcdcommand+0x24>
 240:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
 242:	9b b3       	in	r25, 0x1b	; 27
 244:	82 95       	swap	r24
 246:	80 7f       	andi	r24, 0xF0	; 240
 248:	9f 70       	andi	r25, 0x0F	; 15
 24a:	89 2b       	or	r24, r25
 24c:	8b bb       	out	0x1b, r24	; 27
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
 24e:	db 9a       	sbi	0x1b, 3	; 27
 250:	f2 e0       	ldi	r31, 0x02	; 2
 252:	fa 95       	dec	r31
 254:	f1 f7       	brne	.-4      	; 0x252 <lcdcommand+0x36>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcdcommand+0x3c>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 258:	db 98       	cbi	0x1b, 3	; 27
 25a:	8f e9       	ldi	r24, 0x9F	; 159
 25c:	9f e0       	ldi	r25, 0x0F	; 15
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <lcdcommand+0x42>
 262:	00 c0       	rjmp	.+0      	; 0x264 <lcdcommand+0x48>
 264:	00 00       	nop
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE */
}
 266:	08 95       	ret

00000268 <lcddata>:

void lcddata(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
 268:	9b b3       	in	r25, 0x1b	; 27
 26a:	28 2f       	mov	r18, r24
 26c:	20 7f       	andi	r18, 0xF0	; 240
 26e:	9f 70       	andi	r25, 0x0F	; 15
 270:	92 2b       	or	r25, r18
 272:	9b bb       	out	0x1b, r25	; 27
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
 274:	dc 9a       	sbi	0x1b, 4	; 27
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
 276:	db 9a       	sbi	0x1b, 3	; 27
 278:	92 e0       	ldi	r25, 0x02	; 2
 27a:	9a 95       	dec	r25
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcddata+0x12>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcddata+0x18>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 280:	db 98       	cbi	0x1b, 3	; 27
 282:	e7 ec       	ldi	r30, 0xC7	; 199
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <lcddata+0x1e>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <lcddata+0x24>
 28c:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
 28e:	9b b3       	in	r25, 0x1b	; 27
 290:	82 95       	swap	r24
 292:	80 7f       	andi	r24, 0xF0	; 240
 294:	9f 70       	andi	r25, 0x0F	; 15
 296:	89 2b       	or	r24, r25
 298:	8b bb       	out	0x1b, r24	; 27
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
 29a:	db 9a       	sbi	0x1b, 3	; 27
 29c:	f2 e0       	ldi	r31, 0x02	; 2
 29e:	fa 95       	dec	r31
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcddata+0x36>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcddata+0x3c>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
 2a4:	db 98       	cbi	0x1b, 3	; 27
 2a6:	8f e9       	ldi	r24, 0x9F	; 159
 2a8:	9f e0       	ldi	r25, 0x0F	; 15
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcddata+0x42>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcddata+0x48>
 2b0:	00 00       	nop
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE*/
}
 2b2:	08 95       	ret

000002b4 <lcdinit>:

void lcdinit()
{
	LCD_DDDR = 0xFF;
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	91 ee       	ldi	r25, 0xE1	; 225
 2bc:	a4 e0       	ldi	r26, 0x04	; 4
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	a0 40       	sbci	r26, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <lcdinit+0xa>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <lcdinit+0x14>
 2c8:	00 00       	nop
	_delay_ms(200);									/* WAIT FOR SOME TIME */
	lcdcommand(0x33);
 2ca:	83 e3       	ldi	r24, 0x33	; 51
 2cc:	0e 94 0e 01 	call	0x21c	; 0x21c <lcdcommand>
	lcdcommand(0x32);								/* SEND $32 FOR INIT OT 0X02 */
 2d0:	82 e3       	ldi	r24, 0x32	; 50
 2d2:	0e 94 0e 01 	call	0x21c	; 0x21c <lcdcommand>
	lcdcommand(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
 2d6:	88 e2       	ldi	r24, 0x28	; 40
 2d8:	0e 94 0e 01 	call	0x21c	; 0x21c <lcdcommand>
	lcdcommand(0x0C);								/* DISPLAY ON CURSOR ON */
 2dc:	8c e0       	ldi	r24, 0x0C	; 12
 2de:	0e 94 0e 01 	call	0x21c	; 0x21c <lcdcommand>
	lcdcommand(0x01);								/* LCD CLEAR */
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 0e 01 	call	0x21c	; 0x21c <lcdcommand>
	lcdcommand(0x82);								/* SHIFT CURSOR TO WRITE */
 2e8:	82 e8       	ldi	r24, 0x82	; 130
 2ea:	0e 94 0e 01 	call	0x21c	; 0x21c <lcdcommand>
}
 2ee:	08 95       	ret

000002f0 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x, unsigned char y)
{
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <lcd_gotoxy+0x6>
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharadd[]={0x80, 0xC0};
 2fa:	90 e8       	ldi	r25, 0x80	; 128
 2fc:	99 83       	std	Y+1, r25	; 0x01
 2fe:	90 ec       	ldi	r25, 0xC0	; 192
 300:	9a 83       	std	Y+2, r25	; 0x02
	lcdcommand(firstcharadd[y] + x);
 302:	fe 01       	movw	r30, r28
 304:	e6 0f       	add	r30, r22
 306:	f1 1d       	adc	r31, r1
 308:	91 81       	ldd	r25, Z+1	; 0x01
 30a:	89 0f       	add	r24, r25
 30c:	0e 94 0e 01 	call	0x21c	; 0x21c <lcdcommand>
}
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	cf 91       	pop	r28
 316:	df 91       	pop	r29
 318:	08 95       	ret

0000031a <lcd_print>:

void lcd_print(char *str)
{
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while (str[i] != 0)
 322:	88 81       	ld	r24, Y
 324:	88 23       	and	r24, r24
 326:	51 f0       	breq	.+20     	; 0x33c <lcd_print+0x22>
	lcdcommand(firstcharadd[y] + x);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 328:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i] != 0)
	{
		lcddata(str[i]);
 32a:	0e 94 34 01 	call	0x268	; 0x268 <lcddata>
		i++;
 32e:	1f 5f       	subi	r17, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] != 0)
 330:	fe 01       	movw	r30, r28
 332:	e1 0f       	add	r30, r17
 334:	f1 1d       	adc	r31, r1
 336:	80 81       	ld	r24, Z
 338:	88 23       	and	r24, r24
 33a:	b9 f7       	brne	.-18     	; 0x32a <lcd_print+0x10>
	{
		lcddata(str[i]);
		i++;
	}
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	08 95       	ret

00000344 <lcd_clear>:

void lcd_clear()
{
	lcdcommand(0x01);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 0e 01 	call	0x21c	; 0x21c <lcdcommand>
 34a:	08 95       	ret

0000034c <USART_Init>:

#include "USART_RS232_H_file.h"						/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{ 
	UCSRB |= (1 << RXEN) | (1 << TXEN);				/* Enable USART transmitter and receiver */
 34c:	2a b1       	in	r18, 0x0a	; 10
 34e:	28 61       	ori	r18, 0x18	; 24
 350:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */ 
 352:	20 b5       	in	r18, 0x20	; 32
 354:	26 68       	ori	r18, 0x86	; 134
 356:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
 358:	9b 01       	movw	r18, r22
 35a:	ac 01       	movw	r20, r24
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	44 1f       	adc	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	44 1f       	adc	r20, r20
 36a:	55 1f       	adc	r21, r21
 36c:	22 0f       	add	r18, r18
 36e:	33 1f       	adc	r19, r19
 370:	44 1f       	adc	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	44 1f       	adc	r20, r20
 37a:	55 1f       	adc	r21, r21
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	72 e1       	ldi	r23, 0x12	; 18
 380:	8a e7       	ldi	r24, 0x7A	; 122
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__udivmodsi4>
 388:	82 2f       	mov	r24, r18
 38a:	81 50       	subi	r24, 0x01	; 1
 38c:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	30 40       	sbci	r19, 0x00	; 0
 392:	40 40       	sbci	r20, 0x00	; 0
 394:	50 40       	sbci	r21, 0x00	; 0
 396:	23 2f       	mov	r18, r19
 398:	34 2f       	mov	r19, r20
 39a:	45 2f       	mov	r20, r21
 39c:	55 27       	eor	r21, r21
 39e:	20 bd       	out	0x20, r18	; 32
}
 3a0:	08 95       	ret

000003a2 <USART_RxChar>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
 3a2:	5f 9b       	sbis	0x0b, 7	; 11
 3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <USART_RxChar>
	return(UDR);									/* Get and return received data */ 
 3a6:	8c b1       	in	r24, 0x0c	; 12
}
 3a8:	08 95       	ret

000003aa <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
 3aa:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
 3ac:	5d 9b       	sbis	0x0b, 5	; 11
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <USART_TxChar+0x2>
}
 3b0:	08 95       	ret

000003b2 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
 3b8:	88 81       	ld	r24, Y
 3ba:	88 23       	and	r24, r24
 3bc:	31 f0       	breq	.+12     	; 0x3ca <USART_SendString+0x18>
{
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
 3be:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;																	
	while (str[i]!=0)
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
 3c0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
 3c4:	89 91       	ld	r24, Y+
 3c6:	88 23       	and	r24, r24
 3c8:	d9 f7       	brne	.-10     	; 0x3c0 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <__udivmodhi4>:
 3d0:	aa 1b       	sub	r26, r26
 3d2:	bb 1b       	sub	r27, r27
 3d4:	51 e1       	ldi	r21, 0x11	; 17
 3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <__udivmodhi4_ep>

000003d8 <__udivmodhi4_loop>:
 3d8:	aa 1f       	adc	r26, r26
 3da:	bb 1f       	adc	r27, r27
 3dc:	a6 17       	cp	r26, r22
 3de:	b7 07       	cpc	r27, r23
 3e0:	10 f0       	brcs	.+4      	; 0x3e6 <__udivmodhi4_ep>
 3e2:	a6 1b       	sub	r26, r22
 3e4:	b7 0b       	sbc	r27, r23

000003e6 <__udivmodhi4_ep>:
 3e6:	88 1f       	adc	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	5a 95       	dec	r21
 3ec:	a9 f7       	brne	.-22     	; 0x3d8 <__udivmodhi4_loop>
 3ee:	80 95       	com	r24
 3f0:	90 95       	com	r25
 3f2:	bc 01       	movw	r22, r24
 3f4:	cd 01       	movw	r24, r26
 3f6:	08 95       	ret

000003f8 <__udivmodsi4>:
 3f8:	a1 e2       	ldi	r26, 0x21	; 33
 3fa:	1a 2e       	mov	r1, r26
 3fc:	aa 1b       	sub	r26, r26
 3fe:	bb 1b       	sub	r27, r27
 400:	fd 01       	movw	r30, r26
 402:	0d c0       	rjmp	.+26     	; 0x41e <__udivmodsi4_ep>

00000404 <__udivmodsi4_loop>:
 404:	aa 1f       	adc	r26, r26
 406:	bb 1f       	adc	r27, r27
 408:	ee 1f       	adc	r30, r30
 40a:	ff 1f       	adc	r31, r31
 40c:	a2 17       	cp	r26, r18
 40e:	b3 07       	cpc	r27, r19
 410:	e4 07       	cpc	r30, r20
 412:	f5 07       	cpc	r31, r21
 414:	20 f0       	brcs	.+8      	; 0x41e <__udivmodsi4_ep>
 416:	a2 1b       	sub	r26, r18
 418:	b3 0b       	sbc	r27, r19
 41a:	e4 0b       	sbc	r30, r20
 41c:	f5 0b       	sbc	r31, r21

0000041e <__udivmodsi4_ep>:
 41e:	66 1f       	adc	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	88 1f       	adc	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	1a 94       	dec	r1
 428:	69 f7       	brne	.-38     	; 0x404 <__udivmodsi4_loop>
 42a:	60 95       	com	r22
 42c:	70 95       	com	r23
 42e:	80 95       	com	r24
 430:	90 95       	com	r25
 432:	9b 01       	movw	r18, r22
 434:	ac 01       	movw	r20, r24
 436:	bd 01       	movw	r22, r26
 438:	cf 01       	movw	r24, r30
 43a:	08 95       	ret

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
