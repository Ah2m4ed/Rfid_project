
RFID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000206  00800060  00000d96  00000e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cd  00800266  00800266  00001030  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00001788  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c1  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c5  00000000  00000000  00003069  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b02  00000000  00000000  0000362e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00004130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c8  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe0  00000000  00000000  000046f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	13 e0       	ldi	r17, 0x03	; 3
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 33       	cpi	r26, 0x33	; 51
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5f 04 	call	0x8be	; 0x8be <main>
  8a:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_send_command>:
#include "macros.h"
#include <avr/delay.h>
#include <util/delay.h>

void lcd_send_command(uint8_t cmd ){
	PORT_data =cmd;
  92:	85 bb       	out	0x15, r24	; 21
	
	// disabled RW
	CLR_BIT(PORT_CONT,RW);
  94:	91 98       	cbi	0x12, 1	; 18
	// enabel rs
	CLR_BIT(PORT_CONT,RS);
  96:	94 98       	cbi	0x12, 4	; 18
	
	//adjust enable
	CLR_BIT(PORT_CONT,en);
  98:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_send_command+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_send_command+0x10>
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
  a2:	93 9a       	sbi	0x12, 3	; 18
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	9a 95       	dec	r25
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_send_command+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcd_send_command+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	8f e1       	ldi	r24, 0x1F	; 31
  ae:	9e e4       	ldi	r25, 0x4E	; 78
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_send_command+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_send_command+0x24>
  b6:	00 00       	nop
	_delay_us(1);
	
	//let lcd execute command
	_delay_ms(10);
	
}
  b8:	08 95       	ret

000000ba <lcd_init>:
void lcd_init(){
	// data on portb are output
	DDRC=0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
  be:	15 ba       	out	0x15, r1	; 21
	//control pins are output
	SET_BIT(DDRD,en);
  c0:	8b 9a       	sbi	0x11, 3	; 17
	SET_BIT(DDRD,RW);
  c2:	89 9a       	sbi	0x11, 1	; 17
	SET_BIT(DDRD,RS);
  c4:	8c 9a       	sbi	0x11, 4	; 17
	// active enable
	SET_BIT(PORT_CONT,en);
  c6:	93 9a       	sbi	0x12, 3	; 18
	
	//lcd_init 8bit mode
	lcd_send_command(0x38);
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
	//lcd on cursor off
	lcd_send_command(0x0c);
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
}
  d4:	08 95       	ret

000000d6 <LCD_SendData>:

void LCD_SendData(unsigned char data)
{
	// Put Data on Port
	PORTC = data;
  d6:	85 bb       	out	0x15, r24	; 21
	// Set R/W to W
	CLR_BIT(PORT_CONT,RW);
  d8:	91 98       	cbi	0x12, 1	; 18
	// Set RS to Data
	SET_BIT(PORT_CONT,RS);
  da:	94 9a       	sbi	0x12, 4	; 18

	//adjust enable
	CLR_BIT(PORT_CONT,en);
  dc:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_SendData+0xa>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_SendData+0x10>
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
  e6:	93 9a       	sbi	0x12, 3	; 18
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_SendData+0x14>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_SendData+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f e1       	ldi	r24, 0x1F	; 31
  f2:	9e e4       	ldi	r25, 0x4E	; 78
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_SendData+0x1e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_SendData+0x24>
  fa:	00 00       	nop
	_delay_us(1);
	
	// Delay to let LCD Display Data
	_delay_ms(10);
}
  fc:	08 95       	ret

000000fe <LCD_SET_CURSOR>:

void LCD_SET_CURSOR (unsigned char x, unsigned char y)
{
	if(y == 0)
  fe:	66 23       	and	r22, r22
 100:	21 f4       	brne	.+8      	; 0x10a <LCD_SET_CURSOR+0xc>
	{
		lcd_send_command(0x80 + x);
 102:	80 58       	subi	r24, 0x80	; 128
 104:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 108:	08 95       	ret
	}
	else
	{
		lcd_send_command(0xC0+ x);
 10a:	80 54       	subi	r24, 0x40	; 64
 10c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 110:	08 95       	ret

00000112 <LCD_SendString>:
	}
}

void LCD_SendString(char *str)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	while(*str != '\0')
 118:	88 81       	ld	r24, Y
 11a:	88 23       	and	r24, r24
 11c:	31 f0       	breq	.+12     	; 0x12a <LCD_SendString+0x18>
	{
		lcd_send_command(0xC0+ x);
	}
}

void LCD_SendString(char *str)
 11e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		LCD_SendData(*str);
 120:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_SendData>
	}
}

void LCD_SendString(char *str)
{
	while(*str != '\0')
 124:	89 91       	ld	r24, Y+
 126:	88 23       	and	r24, r24
 128:	d9 f7       	brne	.-10     	; 0x120 <LCD_SendString+0xe>
	{
		LCD_SendData(*str);
		str++;
	}
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <LCD_Clear>:
void LCD_Clear(void)
{
	// Send Clr command to LCD
	lcd_send_command(0x01);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
}
 136:	08 95       	ret

00000138 <lcd_out>:

void lcd_out( unsigned char x, unsigned char y,char *str)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ea 01       	movw	r28, r20
	LCD_SET_CURSOR(x, y);
 13e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_SET_CURSOR>
	LCD_SendString(str);
 142:	ce 01       	movw	r24, r28
 144:	0e 94 89 00 	call	0x112	; 0x112 <LCD_SendString>
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <convertData>:
char* convertData(unsigned int var)
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
 14e:	10 92 76 02 	sts	0x0276, r1
	if(var==0) return "zero";
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	71 f0       	breq	.+28     	; 0x172 <convertData+0x24>
 156:	e6 e7       	ldi	r30, 0x76	; 118
 158:	f2 e0       	ldi	r31, 0x02	; 2
	else

	while(var != 0)
	{
		arr--;
		*arr = (var%10) + '0';
 15a:	2a e0       	ldi	r18, 0x0A	; 10
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	0e 94 93 06 	call	0xd26	; 0xd26 <__udivmodhi4>
 164:	80 5d       	subi	r24, 0xD0	; 208
 166:	82 93       	st	-Z, r24
		var = var / 10;
 168:	86 2f       	mov	r24, r22
 16a:	97 2f       	mov	r25, r23

	*arr = '\0';
	if(var==0) return "zero";
	else

	while(var != 0)
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	b9 f7       	brne	.-18     	; 0x15e <convertData+0x10>
 170:	02 c0       	rjmp	.+4      	; 0x176 <convertData+0x28>
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
	if(var==0) return "zero";
 172:	e0 e6       	ldi	r30, 0x60	; 96
 174:	f0 e0       	ldi	r31, 0x00	; 0
		arr--;
		*arr = (var%10) + '0';
		var = var / 10;
	}
	return arr;
}
 176:	8e 2f       	mov	r24, r30
 178:	9f 2f       	mov	r25, r31
 17a:	08 95       	ret

0000017c <lcd_delete>:

void lcd_delete(){
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
	lcd_out(0,0,"                  ");
 180:	c5 e6       	ldi	r28, 0x65	; 101
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	ae 01       	movw	r20, r28
 18a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	lcd_out(0,1,"                  ");
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	ae 01       	movw	r20, r28
 194:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	
	
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <Read>:
		  // }	
		   }   
	   }    
	}	
}
char* Read(){
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
   while(USART_RxChar()!='2'){
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <Read+0xe>
	   if (GET_BIT(PINA,7)==0)
 1a8:	cf 9b       	sbis	0x19, 7	; 25
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <Read+0x16>
		   }   
	   }    
	}	
}
char* Read(){
   while(USART_RxChar()!='2'){
 1ac:	0e 94 77 06 	call	0xcee	; 0xcee <USART_RxChar>
 1b0:	82 33       	cpi	r24, 0x32	; 50
 1b2:	d1 f7       	brne	.-12     	; 0x1a8 <Read+0xa>
		   break;
	   }
       }
	
		//for (i=0;i<13;i++)
		if (GET_BIT(PINA,7)==1){
 1b4:	cf 9b       	sbis	0x19, 7	; 25
 1b6:	45 c0       	rjmp	.+138    	; 0x242 <Read+0xa4>
		for (i=0;i<12;i++)
 1b8:	10 92 04 03 	sts	0x0304, r1
 1bc:	10 92 03 03 	sts	0x0303, r1
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
	{ 
		code_recv[i]=USART_RxChar();
 1c4:	09 e0       	ldi	r16, 0x09	; 9
 1c6:	13 e0       	ldi	r17, 0x03	; 3
 1c8:	0e 94 77 06 	call	0xcee	; 0xcee <USART_RxChar>
 1cc:	c0 0f       	add	r28, r16
 1ce:	d1 1f       	adc	r29, r17
 1d0:	88 83       	st	Y, r24
	   }
       }
	
		//for (i=0;i<13;i++)
		if (GET_BIT(PINA,7)==1){
		for (i=0;i<12;i++)
 1d2:	c0 91 03 03 	lds	r28, 0x0303
 1d6:	d0 91 04 03 	lds	r29, 0x0304
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	d0 93 04 03 	sts	0x0304, r29
 1e0:	c0 93 03 03 	sts	0x0303, r28
 1e4:	cc 30       	cpi	r28, 0x0C	; 12
 1e6:	d1 05       	cpc	r29, r1
 1e8:	7c f3       	brlt	.-34     	; 0x1c8 <Read+0x2a>
 1ea:	8f ec       	ldi	r24, 0xCF	; 207
 1ec:	97 e0       	ldi	r25, 0x07	; 7
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <Read+0x50>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <Read+0x56>
 1f4:	00 00       	nop
	{ 
		code_recv[i]=USART_RxChar();
		
	}_delay_ms(1);
	lcd_delete();
 1f6:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	lcd_out(0,0,"CODE is:");
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	48 e7       	ldi	r20, 0x78	; 120
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	94 e3       	ldi	r25, 0x34	; 52
 20a:	ac e0       	ldi	r26, 0x0C	; 12
 20c:	81 50       	subi	r24, 0x01	; 1
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	a0 40       	sbci	r26, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <Read+0x6e>
 214:	00 c0       	rjmp	.+0      	; 0x216 <Read+0x78>
 216:	00 00       	nop
	_delay_ms(500);
    lcd_delete();
 218:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	lcd_out(0,0,code_recv);
 21c:	c9 e0       	ldi	r28, 0x09	; 9
 21e:	d3 e0       	ldi	r29, 0x03	; 3
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	ae 01       	movw	r20, r28
 226:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	94 e3       	ldi	r25, 0x34	; 52
 22e:	ac e0       	ldi	r26, 0x0C	; 12
 230:	81 50       	subi	r24, 0x01	; 1
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	a0 40       	sbci	r26, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <Read+0x92>
 238:	00 c0       	rjmp	.+0      	; 0x23a <Read+0x9c>
 23a:	00 00       	nop
	_delay_ms(500);

	return code_recv;}
 23c:	8c 2f       	mov	r24, r28
 23e:	9d 2f       	mov	r25, r29
 240:	00 c0       	rjmp	.+0      	; 0x242 <Read+0xa4>
	   


}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	08 95       	ret

0000024c <compare>:

int compare(char*read_val){
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	bc 01       	movw	r22, r24
	flag=0;
 252:	10 92 fc 02 	sts	0x02FC, r1
 256:	10 92 fb 02 	sts	0x02FB, r1
	for(j=0;j<5;j++)
 25a:	10 92 7e 02 	sts	0x027E, r1
 25e:	10 92 7d 02 	sts	0x027D, r1
	{
		// for(i=0;i<13;i++)
		for(i=0;i<12;i++)
	          {
				  if(read_val[i]==id_code[j][i] )
 262:	c7 e5       	ldi	r28, 0x57	; 87
 264:	d1 e0       	ldi	r29, 0x01	; 1
int compare(char*read_val){
	flag=0;
	for(j=0;j<5;j++)
	{
		// for(i=0;i<13;i++)
		for(i=0;i<12;i++)
 266:	10 92 04 03 	sts	0x0304, r1
 26a:	10 92 03 03 	sts	0x0303, r1
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	50 e0       	ldi	r21, 0x00	; 0
	          {
				  if(read_val[i]==id_code[j][i] )
 272:	fb 01       	movw	r30, r22
 274:	e4 0f       	add	r30, r20
 276:	f5 1f       	adc	r31, r21
 278:	80 91 7d 02 	lds	r24, 0x027D
 27c:	90 91 7e 02 	lds	r25, 0x027E
 280:	9c 01       	movw	r18, r24
 282:	22 0f       	add	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	82 0f       	add	r24, r18
 288:	93 1f       	adc	r25, r19
 28a:	9c 01       	movw	r18, r24
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	82 0f       	add	r24, r18
 296:	93 1f       	adc	r25, r19
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	84 0f       	add	r24, r20
 29e:	95 1f       	adc	r25, r21
 2a0:	de 01       	movw	r26, r28
 2a2:	a8 0f       	add	r26, r24
 2a4:	b9 1f       	adc	r27, r25
 2a6:	90 81       	ld	r25, Z
 2a8:	8c 91       	ld	r24, X
 2aa:	98 17       	cp	r25, r24
 2ac:	79 f4       	brne	.+30     	; 0x2cc <compare+0x80>
 2ae:	8f ec       	ldi	r24, 0xCF	; 207
 2b0:	97 e0       	ldi	r25, 0x07	; 7
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <compare+0x66>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <compare+0x6c>
 2b8:	00 00       	nop
	                {_delay_ms(1);
		              flag++;
 2ba:	80 91 fb 02 	lds	r24, 0x02FB
 2be:	90 91 fc 02 	lds	r25, 0x02FC
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	90 93 fc 02 	sts	0x02FC, r25
 2c8:	80 93 fb 02 	sts	0x02FB, r24
int compare(char*read_val){
	flag=0;
	for(j=0;j<5;j++)
	{
		// for(i=0;i<13;i++)
		for(i=0;i<12;i++)
 2cc:	40 91 03 03 	lds	r20, 0x0303
 2d0:	50 91 04 03 	lds	r21, 0x0304
 2d4:	4f 5f       	subi	r20, 0xFF	; 255
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	50 93 04 03 	sts	0x0304, r21
 2dc:	40 93 03 03 	sts	0x0303, r20
 2e0:	4c 30       	cpi	r20, 0x0C	; 12
 2e2:	51 05       	cpc	r21, r1
 2e4:	34 f2       	brlt	.-116    	; 0x272 <compare+0x26>
		              flag++;
	                }

			   }

	if(flag==12) return j ;
 2e6:	80 91 fb 02 	lds	r24, 0x02FB
 2ea:	90 91 fc 02 	lds	r25, 0x02FC
 2ee:	8c 30       	cpi	r24, 0x0C	; 12
 2f0:	91 05       	cpc	r25, r1
 2f2:	29 f4       	brne	.+10     	; 0x2fe <compare+0xb2>
 2f4:	80 91 7d 02 	lds	r24, 0x027D
 2f8:	90 91 7e 02 	lds	r25, 0x027E
 2fc:	11 c0       	rjmp	.+34     	; 0x320 <compare+0xd4>
	 flag=0;
 2fe:	10 92 fc 02 	sts	0x02FC, r1
 302:	10 92 fb 02 	sts	0x02FB, r1

}

int compare(char*read_val){
	flag=0;
	for(j=0;j<5;j++)
 306:	80 91 7d 02 	lds	r24, 0x027D
 30a:	90 91 7e 02 	lds	r25, 0x027E
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 7e 02 	sts	0x027E, r25
 314:	80 93 7d 02 	sts	0x027D, r24
 318:	85 30       	cpi	r24, 0x05	; 5
 31a:	91 05       	cpc	r25, r1
 31c:	0c f4       	brge	.+2      	; 0x320 <compare+0xd4>
 31e:	a3 cf       	rjmp	.-186    	; 0x266 <compare+0x1a>
	if(flag==12) return j ;
	 flag=0;

	}

}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <display_list>:
void display_list(){
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
	if(k){
 32a:	80 91 fd 02 	lds	r24, 0x02FD
 32e:	90 91 fe 02 	lds	r25, 0x02FE
 332:	00 97       	sbiw	r24, 0x00	; 0
 334:	09 f4       	brne	.+2      	; 0x338 <display_list+0x12>
 336:	f4 c0       	rjmp	.+488    	; 0x520 <display_list+0x1fa>
	if (cnt||cnt2||cnt3||cnt4||cnt5)
 338:	80 91 f9 02 	lds	r24, 0x02F9
 33c:	90 91 fa 02 	lds	r25, 0x02FA
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	c9 f4       	brne	.+50     	; 0x376 <display_list+0x50>
 344:	80 91 f7 02 	lds	r24, 0x02F7
 348:	90 91 f8 02 	lds	r25, 0x02F8
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	99 f4       	brne	.+38     	; 0x376 <display_list+0x50>
 350:	80 91 29 03 	lds	r24, 0x0329
 354:	90 91 2a 03 	lds	r25, 0x032A
 358:	00 97       	sbiw	r24, 0x00	; 0
 35a:	69 f4       	brne	.+26     	; 0x376 <display_list+0x50>
 35c:	80 91 2f 03 	lds	r24, 0x032F
 360:	90 91 30 03 	lds	r25, 0x0330
 364:	00 97       	sbiw	r24, 0x00	; 0
 366:	39 f4       	brne	.+14     	; 0x376 <display_list+0x50>
 368:	80 91 05 03 	lds	r24, 0x0305
 36c:	90 91 06 03 	lds	r25, 0x0306
 370:	00 97       	sbiw	r24, 0x00	; 0
 372:	09 f4       	brne	.+2      	; 0x376 <display_list+0x50>
 374:	c2 c0       	rjmp	.+388    	; 0x4fa <display_list+0x1d4>
	{
	static int con=0;
	if (con==0)
 376:	80 91 77 02 	lds	r24, 0x0277
 37a:	90 91 78 02 	lds	r25, 0x0278
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	09 f0       	breq	.+2      	; 0x384 <display_list+0x5e>
 382:	b1 c0       	rjmp	.+354    	; 0x4e6 <display_list+0x1c0>
	{
	lcd_delete();
 384:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	lcd_out(0,0,"first one");
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	41 e8       	ldi	r20, 0x81	; 129
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	94 e3       	ldi	r25, 0x34	; 52
 398:	ac e0       	ldi	r26, 0x0C	; 12
 39a:	81 50       	subi	r24, 0x01	; 1
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	a0 40       	sbci	r26, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <display_list+0x74>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <display_list+0x7e>
 3a4:	00 00       	nop
	_delay_ms(500);
	lcd_delete();
 3a6:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	lcd_out(0,0,list[0]);
 3aa:	cf e7       	ldi	r28, 0x7F	; 127
 3ac:	d2 e0       	ldi	r29, 0x02	; 2
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	ae 01       	movw	r20, r28
 3b4:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	94 e3       	ldi	r25, 0x34	; 52
 3bc:	ac e0       	ldi	r26, 0x0C	; 12
 3be:	81 50       	subi	r24, 0x01	; 1
 3c0:	90 40       	sbci	r25, 0x00	; 0
 3c2:	a0 40       	sbci	r26, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <display_list+0x98>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <display_list+0xa2>
 3c8:	00 00       	nop
	_delay_ms(500);
	LCD_Clear();
 3ca:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Clear>
	lcd_out(0,0,"second one");
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	4b e8       	ldi	r20, 0x8B	; 139
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	94 e3       	ldi	r25, 0x34	; 52
 3de:	ac e0       	ldi	r26, 0x0C	; 12
 3e0:	81 50       	subi	r24, 0x01	; 1
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	a0 40       	sbci	r26, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <display_list+0xba>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <display_list+0xc4>
 3ea:	00 00       	nop
	_delay_ms(500);
	lcd_delete();
 3ec:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	lcd_out(0,0,list[1]);
 3f0:	ae 01       	movw	r20, r28
 3f2:	44 5f       	subi	r20, 0xF4	; 244
 3f4:	5f 4f       	sbci	r21, 0xFF	; 255
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	94 e3       	ldi	r25, 0x34	; 52
 402:	ac e0       	ldi	r26, 0x0C	; 12
 404:	81 50       	subi	r24, 0x01	; 1
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	a0 40       	sbci	r26, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <display_list+0xde>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <display_list+0xe8>
 40e:	00 00       	nop
	_delay_ms(500);
	LCD_Clear();
 410:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Clear>
	lcd_out(0,0,"third one");
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	46 e9       	ldi	r20, 0x96	; 150
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	94 e3       	ldi	r25, 0x34	; 52
 424:	ac e0       	ldi	r26, 0x0C	; 12
 426:	81 50       	subi	r24, 0x01	; 1
 428:	90 40       	sbci	r25, 0x00	; 0
 42a:	a0 40       	sbci	r26, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <display_list+0x100>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <display_list+0x10a>
 430:	00 00       	nop
	_delay_ms(500);
	lcd_delete();
 432:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	lcd_out(0,0,list[2]);
 436:	ae 01       	movw	r20, r28
 438:	48 5e       	subi	r20, 0xE8	; 232
 43a:	5f 4f       	sbci	r21, 0xFF	; 255
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	94 e3       	ldi	r25, 0x34	; 52
 448:	ac e0       	ldi	r26, 0x0C	; 12
 44a:	81 50       	subi	r24, 0x01	; 1
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	a0 40       	sbci	r26, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <display_list+0x124>
 452:	00 c0       	rjmp	.+0      	; 0x454 <display_list+0x12e>
 454:	00 00       	nop
	_delay_ms(500);
	LCD_Clear();
 456:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Clear>
	lcd_out(0,0,"fourth one");
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	40 ea       	ldi	r20, 0xA0	; 160
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	94 e3       	ldi	r25, 0x34	; 52
 46a:	ac e0       	ldi	r26, 0x0C	; 12
 46c:	81 50       	subi	r24, 0x01	; 1
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	a0 40       	sbci	r26, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <display_list+0x146>
 474:	00 c0       	rjmp	.+0      	; 0x476 <display_list+0x150>
 476:	00 00       	nop
	_delay_ms(500);
	lcd_delete();
 478:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	lcd_out(0,0,list[3]);
 47c:	ae 01       	movw	r20, r28
 47e:	4c 5d       	subi	r20, 0xDC	; 220
 480:	5f 4f       	sbci	r21, 0xFF	; 255
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	94 e3       	ldi	r25, 0x34	; 52
 48e:	ac e0       	ldi	r26, 0x0C	; 12
 490:	81 50       	subi	r24, 0x01	; 1
 492:	90 40       	sbci	r25, 0x00	; 0
 494:	a0 40       	sbci	r26, 0x00	; 0
 496:	e1 f7       	brne	.-8      	; 0x490 <display_list+0x16a>
 498:	00 c0       	rjmp	.+0      	; 0x49a <display_list+0x174>
 49a:	00 00       	nop
	_delay_ms(500);
	LCD_Clear();
 49c:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Clear>
	lcd_out(0,0,"fifth one");
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	4b ea       	ldi	r20, 0xAB	; 171
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	94 e3       	ldi	r25, 0x34	; 52
 4b0:	ac e0       	ldi	r26, 0x0C	; 12
 4b2:	81 50       	subi	r24, 0x01	; 1
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	a0 40       	sbci	r26, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <display_list+0x18c>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <display_list+0x196>
 4bc:	00 00       	nop
	_delay_ms(500);
	lcd_delete();
 4be:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	lcd_out(0,0,list[4]);
 4c2:	ae 01       	movw	r20, r28
 4c4:	40 5d       	subi	r20, 0xD0	; 208
 4c6:	5f 4f       	sbci	r21, 0xFF	; 255
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	94 e3       	ldi	r25, 0x34	; 52
 4d4:	ac e0       	ldi	r26, 0x0C	; 12
 4d6:	81 50       	subi	r24, 0x01	; 1
 4d8:	90 40       	sbci	r25, 0x00	; 0
 4da:	a0 40       	sbci	r26, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <display_list+0x1b0>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <display_list+0x1ba>
 4e0:	00 00       	nop
	_delay_ms(500);
	lcd_delete();
 4e2:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	}
	con++;
 4e6:	80 91 77 02 	lds	r24, 0x0277
 4ea:	90 91 78 02 	lds	r25, 0x0278
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	90 93 78 02 	sts	0x0278, r25
 4f4:	80 93 77 02 	sts	0x0277, r24

}
void display_list(){
	if(k){
	if (cnt||cnt2||cnt3||cnt4||cnt5)
	{
 4f8:	13 c0       	rjmp	.+38     	; 0x520 <display_list+0x1fa>
	lcd_delete();
	}
	con++;
	}	
	else{
		lcd_delete();
 4fa:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		lcd_out(0,0,"No Attendance");
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	45 eb       	ldi	r20, 0xB5	; 181
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	94 e3       	ldi	r25, 0x34	; 52
 50e:	ac e0       	ldi	r26, 0x0C	; 12
 510:	81 50       	subi	r24, 0x01	; 1
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	a0 40       	sbci	r26, 0x00	; 0
 516:	e1 f7       	brne	.-8      	; 0x510 <display_list+0x1ea>
 518:	00 c0       	rjmp	.+0      	; 0x51a <display_list+0x1f4>
 51a:	00 00       	nop
		_delay_ms(500);
		lcd_delete();
 51c:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	LCD_Clear();
	lcd_out(0,0,"seventh one");
	lcd_out(1,1,list[6]);
	_delay_ms(500);*/

}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <__vector_1>:

	num_attend();

}

ISR( ISR_INT0_PD2 ){
 526:	1f 92       	push	r1
 528:	0f 92       	push	r0
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	0f 92       	push	r0
 52e:	11 24       	eor	r1, r1
 530:	2f 93       	push	r18
 532:	3f 93       	push	r19
 534:	4f 93       	push	r20
 536:	5f 93       	push	r21
 538:	6f 93       	push	r22
 53a:	7f 93       	push	r23
 53c:	8f 93       	push	r24
 53e:	9f 93       	push	r25
 540:	af 93       	push	r26
 542:	bf 93       	push	r27
 544:	ef 93       	push	r30
 546:	ff 93       	push	r31

   display_list();
 548:	0e 94 93 01 	call	0x326	; 0x326 <display_list>

}
 54c:	ff 91       	pop	r31
 54e:	ef 91       	pop	r30
 550:	bf 91       	pop	r27
 552:	af 91       	pop	r26
 554:	9f 91       	pop	r25
 556:	8f 91       	pop	r24
 558:	7f 91       	pop	r23
 55a:	6f 91       	pop	r22
 55c:	5f 91       	pop	r21
 55e:	4f 91       	pop	r20
 560:	3f 91       	pop	r19
 562:	2f 91       	pop	r18
 564:	0f 90       	pop	r0
 566:	0f be       	out	0x3f, r0	; 63
 568:	0f 90       	pop	r0
 56a:	1f 90       	pop	r1
 56c:	18 95       	reti

0000056e <display_attendance>:
	_delay_ms(500);*/

}
void display_attendance(int var){

	switch (var)
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	91 05       	cpc	r25, r1
 572:	09 f4       	brne	.+2      	; 0x576 <display_attendance+0x8>
 574:	a5 c0       	rjmp	.+330    	; 0x6c0 <display_attendance+0x152>
 576:	83 30       	cpi	r24, 0x03	; 3
 578:	91 05       	cpc	r25, r1
 57a:	3c f4       	brge	.+14     	; 0x58a <display_attendance+0x1c>
 57c:	00 97       	sbiw	r24, 0x00	; 0
 57e:	71 f0       	breq	.+28     	; 0x59c <display_attendance+0x2e>
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	91 05       	cpc	r25, r1
 584:	09 f0       	breq	.+2      	; 0x588 <display_attendance+0x1a>
 586:	76 c1       	rjmp	.+748    	; 0x874 <__stack+0x15>
 588:	52 c0       	rjmp	.+164    	; 0x62e <display_attendance+0xc0>
 58a:	83 30       	cpi	r24, 0x03	; 3
 58c:	91 05       	cpc	r25, r1
 58e:	09 f4       	brne	.+2      	; 0x592 <display_attendance+0x24>
 590:	e0 c0       	rjmp	.+448    	; 0x752 <display_attendance+0x1e4>
 592:	84 30       	cpi	r24, 0x04	; 4
 594:	91 05       	cpc	r25, r1
 596:	09 f0       	breq	.+2      	; 0x59a <display_attendance+0x2c>
 598:	6d c1       	rjmp	.+730    	; 0x874 <__stack+0x15>
 59a:	24 c1       	rjmp	.+584    	; 0x7e4 <display_attendance+0x276>
	{
		case 0: lcd_delete(); SET_BIT(DDRA,0); SET_BIT(PORTA,0);lcd_out(0,0,"first student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[0]);_delay_ms(500); CLR_BIT(PORTA,0);lcd_delete();
 59c:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 5a0:	d0 9a       	sbi	0x1a, 0	; 26
 5a2:	d8 9a       	sbi	0x1b, 0	; 27
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	43 ec       	ldi	r20, 0xC3	; 195
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	94 e3       	ldi	r25, 0x34	; 52
 5b4:	ac e0       	ldi	r26, 0x0C	; 12
 5b6:	81 50       	subi	r24, 0x01	; 1
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	a0 40       	sbci	r26, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <display_attendance+0x48>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <display_attendance+0x52>
 5c0:	00 00       	nop
 5c2:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	4d ee       	ldi	r20, 0xED	; 237
 5cc:	51 e0       	ldi	r21, 0x01	; 1
 5ce:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	94 e3       	ldi	r25, 0x34	; 52
 5d6:	ac e0       	ldi	r26, 0x0C	; 12
 5d8:	81 50       	subi	r24, 0x01	; 1
 5da:	90 40       	sbci	r25, 0x00	; 0
 5dc:	a0 40       	sbci	r26, 0x00	; 0
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <display_attendance+0x6a>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <display_attendance+0x74>
 5e2:	00 00       	nop
 5e4:	d8 98       	cbi	0x1b, 0	; 27
 5e6:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		if(cnt!=1){cnt++;} if(cnt==1){
 5ea:	80 91 f9 02 	lds	r24, 0x02F9
 5ee:	90 91 fa 02 	lds	r25, 0x02FA
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	91 05       	cpc	r25, r1
 5f6:	49 f0       	breq	.+18     	; 0x60a <display_attendance+0x9c>
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	90 93 fa 02 	sts	0x02FA, r25
 5fe:	80 93 f9 02 	sts	0x02F9, r24
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	91 05       	cpc	r25, r1
 606:	09 f0       	breq	.+2      	; 0x60a <display_attendance+0x9c>
 608:	4b c1       	rjmp	.+662    	; 0x8a0 <__stack+0x41>
 60a:	ed ee       	ldi	r30, 0xED	; 237
 60c:	f1 e0       	ldi	r31, 0x01	; 1
 60e:	af e7       	ldi	r26, 0x7F	; 127
 610:	b2 e0       	ldi	r27, 0x02	; 2
	lcd_out(0,0,"seventh one");
	lcd_out(1,1,list[6]);
	_delay_ms(500);*/

}
void display_attendance(int var){
 612:	cf 01       	movw	r24, r30
 614:	0c 96       	adiw	r24, 0x0c	; 12
	switch (var)
	{
		case 0: lcd_delete(); SET_BIT(DDRA,0); SET_BIT(PORTA,0);lcd_out(0,0,"first student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[0]);_delay_ms(500); CLR_BIT(PORTA,0);lcd_delete();
		if(cnt!=1){cnt++;} if(cnt==1){
			for (i=0;i<sizeof(clinet_code[0]);i++){
                            list[0][i]=clinet_code[0][i];}}break;
 616:	21 91       	ld	r18, Z+
 618:	2d 93       	st	X+, r18

	switch (var)
	{
		case 0: lcd_delete(); SET_BIT(DDRA,0); SET_BIT(PORTA,0);lcd_out(0,0,"first student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[0]);_delay_ms(500); CLR_BIT(PORTA,0);lcd_delete();
		if(cnt!=1){cnt++;} if(cnt==1){
			for (i=0;i<sizeof(clinet_code[0]);i++){
 61a:	e8 17       	cp	r30, r24
 61c:	f9 07       	cpc	r31, r25
 61e:	d9 f7       	brne	.-10     	; 0x616 <display_attendance+0xa8>
 620:	8c e0       	ldi	r24, 0x0C	; 12
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	90 93 04 03 	sts	0x0304, r25
 628:	80 93 03 03 	sts	0x0303, r24
 62c:	08 95       	ret
                            list[0][i]=clinet_code[0][i];}}break;

		case 1: lcd_delete();SET_BIT(DDRA,0); SET_BIT(PORTA,0); lcd_out(0,0,"second student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[1]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt2!=1){++cnt2;} if(cnt2==1){
 62e:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 632:	d0 9a       	sbi	0x1a, 0	; 26
 634:	d8 9a       	sbi	0x1b, 0	; 27
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	41 ed       	ldi	r20, 0xD1	; 209
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	94 e3       	ldi	r25, 0x34	; 52
 646:	ac e0       	ldi	r26, 0x0C	; 12
 648:	81 50       	subi	r24, 0x01	; 1
 64a:	90 40       	sbci	r25, 0x00	; 0
 64c:	a0 40       	sbci	r26, 0x00	; 0
 64e:	e1 f7       	brne	.-8      	; 0x648 <display_attendance+0xda>
 650:	00 c0       	rjmp	.+0      	; 0x652 <display_attendance+0xe4>
 652:	00 00       	nop
 654:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	49 ef       	ldi	r20, 0xF9	; 249
 65e:	51 e0       	ldi	r21, 0x01	; 1
 660:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 664:	8f ef       	ldi	r24, 0xFF	; 255
 666:	94 e3       	ldi	r25, 0x34	; 52
 668:	ac e0       	ldi	r26, 0x0C	; 12
 66a:	81 50       	subi	r24, 0x01	; 1
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	a0 40       	sbci	r26, 0x00	; 0
 670:	e1 f7       	brne	.-8      	; 0x66a <display_attendance+0xfc>
 672:	00 c0       	rjmp	.+0      	; 0x674 <display_attendance+0x106>
 674:	00 00       	nop
 676:	d8 98       	cbi	0x1b, 0	; 27
 678:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 67c:	80 91 f7 02 	lds	r24, 0x02F7
 680:	90 91 f8 02 	lds	r25, 0x02F8
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	91 05       	cpc	r25, r1
 688:	49 f0       	breq	.+18     	; 0x69c <display_attendance+0x12e>
 68a:	01 96       	adiw	r24, 0x01	; 1
 68c:	90 93 f8 02 	sts	0x02F8, r25
 690:	80 93 f7 02 	sts	0x02F7, r24
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	91 05       	cpc	r25, r1
 698:	09 f0       	breq	.+2      	; 0x69c <display_attendance+0x12e>
 69a:	02 c1       	rjmp	.+516    	; 0x8a0 <__stack+0x41>
 69c:	e9 ef       	ldi	r30, 0xF9	; 249
 69e:	f1 e0       	ldi	r31, 0x01	; 1
 6a0:	ab e8       	ldi	r26, 0x8B	; 139
 6a2:	b2 e0       	ldi	r27, 0x02	; 2
	lcd_out(0,0,"seventh one");
	lcd_out(1,1,list[6]);
	_delay_ms(500);*/

}
void display_attendance(int var){
 6a4:	cf 01       	movw	r24, r30
 6a6:	0c 96       	adiw	r24, 0x0c	; 12
			for (i=0;i<sizeof(clinet_code[0]);i++){
                            list[0][i]=clinet_code[0][i];}}break;

		case 1: lcd_delete();SET_BIT(DDRA,0); SET_BIT(PORTA,0); lcd_out(0,0,"second student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[1]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt2!=1){++cnt2;} if(cnt2==1){
			for (i=0;i<sizeof(clinet_code[1]);i++){
		list[1][i]=clinet_code[1][i];}}
 6a8:	21 91       	ld	r18, Z+
 6aa:	2d 93       	st	X+, r18
		if(cnt!=1){cnt++;} if(cnt==1){
			for (i=0;i<sizeof(clinet_code[0]);i++){
                            list[0][i]=clinet_code[0][i];}}break;

		case 1: lcd_delete();SET_BIT(DDRA,0); SET_BIT(PORTA,0); lcd_out(0,0,"second student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[1]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt2!=1){++cnt2;} if(cnt2==1){
			for (i=0;i<sizeof(clinet_code[1]);i++){
 6ac:	e8 17       	cp	r30, r24
 6ae:	f9 07       	cpc	r31, r25
 6b0:	d9 f7       	brne	.-10     	; 0x6a8 <display_attendance+0x13a>
 6b2:	8c e0       	ldi	r24, 0x0C	; 12
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	90 93 04 03 	sts	0x0304, r25
 6ba:	80 93 03 03 	sts	0x0303, r24
 6be:	08 95       	ret
		list[1][i]=clinet_code[1][i];}}
		break;

		case 2: lcd_delete();SET_BIT(DDRA,0); SET_BIT(PORTA,0); lcd_out(0,0,"third student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[2]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt3!=1){++cnt3;}
 6c0:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 6c4:	d0 9a       	sbi	0x1a, 0	; 26
 6c6:	d8 9a       	sbi	0x1b, 0	; 27
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	40 ee       	ldi	r20, 0xE0	; 224
 6ce:	50 e0       	ldi	r21, 0x00	; 0
 6d0:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 6d4:	8f ef       	ldi	r24, 0xFF	; 255
 6d6:	94 e3       	ldi	r25, 0x34	; 52
 6d8:	ac e0       	ldi	r26, 0x0C	; 12
 6da:	81 50       	subi	r24, 0x01	; 1
 6dc:	90 40       	sbci	r25, 0x00	; 0
 6de:	a0 40       	sbci	r26, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <display_attendance+0x16c>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <display_attendance+0x176>
 6e4:	00 00       	nop
 6e6:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	45 e0       	ldi	r20, 0x05	; 5
 6f0:	52 e0       	ldi	r21, 0x02	; 2
 6f2:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 6f6:	8f ef       	ldi	r24, 0xFF	; 255
 6f8:	94 e3       	ldi	r25, 0x34	; 52
 6fa:	ac e0       	ldi	r26, 0x0C	; 12
 6fc:	81 50       	subi	r24, 0x01	; 1
 6fe:	90 40       	sbci	r25, 0x00	; 0
 700:	a0 40       	sbci	r26, 0x00	; 0
 702:	e1 f7       	brne	.-8      	; 0x6fc <display_attendance+0x18e>
 704:	00 c0       	rjmp	.+0      	; 0x706 <display_attendance+0x198>
 706:	00 00       	nop
 708:	d8 98       	cbi	0x1b, 0	; 27
 70a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 70e:	80 91 29 03 	lds	r24, 0x0329
 712:	90 91 2a 03 	lds	r25, 0x032A
 716:	81 30       	cpi	r24, 0x01	; 1
 718:	91 05       	cpc	r25, r1
 71a:	49 f0       	breq	.+18     	; 0x72e <display_attendance+0x1c0>
 71c:	01 96       	adiw	r24, 0x01	; 1
 71e:	90 93 2a 03 	sts	0x032A, r25
 722:	80 93 29 03 	sts	0x0329, r24
		if(cnt3==1){	for (i=0;i<sizeof(clinet_code[2]);i++){
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	91 05       	cpc	r25, r1
 72a:	09 f0       	breq	.+2      	; 0x72e <display_attendance+0x1c0>
 72c:	b9 c0       	rjmp	.+370    	; 0x8a0 <__stack+0x41>
 72e:	e5 e0       	ldi	r30, 0x05	; 5
 730:	f2 e0       	ldi	r31, 0x02	; 2
 732:	a7 e9       	ldi	r26, 0x97	; 151
 734:	b2 e0       	ldi	r27, 0x02	; 2
	lcd_out(0,0,"seventh one");
	lcd_out(1,1,list[6]);
	_delay_ms(500);*/

}
void display_attendance(int var){
 736:	cf 01       	movw	r24, r30
 738:	0c 96       	adiw	r24, 0x0c	; 12
		list[1][i]=clinet_code[1][i];}}
		break;

		case 2: lcd_delete();SET_BIT(DDRA,0); SET_BIT(PORTA,0); lcd_out(0,0,"third student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[2]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt3!=1){++cnt3;}
		if(cnt3==1){	for (i=0;i<sizeof(clinet_code[2]);i++){
		list[2][i]=clinet_code[2][i];}}
 73a:	21 91       	ld	r18, Z+
 73c:	2d 93       	st	X+, r18
			for (i=0;i<sizeof(clinet_code[1]);i++){
		list[1][i]=clinet_code[1][i];}}
		break;

		case 2: lcd_delete();SET_BIT(DDRA,0); SET_BIT(PORTA,0); lcd_out(0,0,"third student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[2]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt3!=1){++cnt3;}
		if(cnt3==1){	for (i=0;i<sizeof(clinet_code[2]);i++){
 73e:	e8 17       	cp	r30, r24
 740:	f9 07       	cpc	r31, r25
 742:	d9 f7       	brne	.-10     	; 0x73a <display_attendance+0x1cc>
 744:	8c e0       	ldi	r24, 0x0C	; 12
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	90 93 04 03 	sts	0x0304, r25
 74c:	80 93 03 03 	sts	0x0303, r24
 750:	08 95       	ret
		list[2][i]=clinet_code[2][i];}}
		break;

		case 3: lcd_delete(); SET_BIT(DDRA,0); SET_BIT(PORTA,0);lcd_out(0,0,"fourth student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[3]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt4!=1){cnt4++;}
 752:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 756:	d0 9a       	sbi	0x1a, 0	; 26
 758:	d8 9a       	sbi	0x1b, 0	; 27
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	4e ee       	ldi	r20, 0xEE	; 238
 760:	50 e0       	ldi	r21, 0x00	; 0
 762:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 766:	8f ef       	ldi	r24, 0xFF	; 255
 768:	94 e3       	ldi	r25, 0x34	; 52
 76a:	ac e0       	ldi	r26, 0x0C	; 12
 76c:	81 50       	subi	r24, 0x01	; 1
 76e:	90 40       	sbci	r25, 0x00	; 0
 770:	a0 40       	sbci	r26, 0x00	; 0
 772:	e1 f7       	brne	.-8      	; 0x76c <display_attendance+0x1fe>
 774:	00 c0       	rjmp	.+0      	; 0x776 <display_attendance+0x208>
 776:	00 00       	nop
 778:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	41 e1       	ldi	r20, 0x11	; 17
 782:	52 e0       	ldi	r21, 0x02	; 2
 784:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 788:	8f ef       	ldi	r24, 0xFF	; 255
 78a:	94 e3       	ldi	r25, 0x34	; 52
 78c:	ac e0       	ldi	r26, 0x0C	; 12
 78e:	81 50       	subi	r24, 0x01	; 1
 790:	90 40       	sbci	r25, 0x00	; 0
 792:	a0 40       	sbci	r26, 0x00	; 0
 794:	e1 f7       	brne	.-8      	; 0x78e <display_attendance+0x220>
 796:	00 c0       	rjmp	.+0      	; 0x798 <display_attendance+0x22a>
 798:	00 00       	nop
 79a:	d8 98       	cbi	0x1b, 0	; 27
 79c:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 7a0:	80 91 2f 03 	lds	r24, 0x032F
 7a4:	90 91 30 03 	lds	r25, 0x0330
 7a8:	81 30       	cpi	r24, 0x01	; 1
 7aa:	91 05       	cpc	r25, r1
 7ac:	49 f0       	breq	.+18     	; 0x7c0 <display_attendance+0x252>
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	90 93 30 03 	sts	0x0330, r25
 7b4:	80 93 2f 03 	sts	0x032F, r24
		if(cnt4==1){	for (i=0;i<sizeof(clinet_code[3]);i++){
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	91 05       	cpc	r25, r1
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <display_attendance+0x252>
 7be:	70 c0       	rjmp	.+224    	; 0x8a0 <__stack+0x41>
 7c0:	e1 e1       	ldi	r30, 0x11	; 17
 7c2:	f2 e0       	ldi	r31, 0x02	; 2
 7c4:	a3 ea       	ldi	r26, 0xA3	; 163
 7c6:	b2 e0       	ldi	r27, 0x02	; 2
	lcd_out(0,0,"seventh one");
	lcd_out(1,1,list[6]);
	_delay_ms(500);*/

}
void display_attendance(int var){
 7c8:	cf 01       	movw	r24, r30
 7ca:	0c 96       	adiw	r24, 0x0c	; 12
		list[2][i]=clinet_code[2][i];}}
		break;

		case 3: lcd_delete(); SET_BIT(DDRA,0); SET_BIT(PORTA,0);lcd_out(0,0,"fourth student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[3]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt4!=1){cnt4++;}
		if(cnt4==1){	for (i=0;i<sizeof(clinet_code[3]);i++){
		list[3][i]=clinet_code[3][i];}}
 7cc:	21 91       	ld	r18, Z+
 7ce:	2d 93       	st	X+, r18
		if(cnt3==1){	for (i=0;i<sizeof(clinet_code[2]);i++){
		list[2][i]=clinet_code[2][i];}}
		break;

		case 3: lcd_delete(); SET_BIT(DDRA,0); SET_BIT(PORTA,0);lcd_out(0,0,"fourth student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[3]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt4!=1){cnt4++;}
		if(cnt4==1){	for (i=0;i<sizeof(clinet_code[3]);i++){
 7d0:	e8 17       	cp	r30, r24
 7d2:	f9 07       	cpc	r31, r25
 7d4:	d9 f7       	brne	.-10     	; 0x7cc <display_attendance+0x25e>
 7d6:	8c e0       	ldi	r24, 0x0C	; 12
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	90 93 04 03 	sts	0x0304, r25
 7de:	80 93 03 03 	sts	0x0303, r24
 7e2:	08 95       	ret
		list[3][i]=clinet_code[3][i];}}
		break;
		
		case 4: lcd_delete(); SET_BIT(DDRA,0); SET_BIT(PORTA,0);lcd_out(0,0,"fifth student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[4]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt5!=1){cnt5++;}
 7e4:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 7e8:	d0 9a       	sbi	0x1a, 0	; 26
 7ea:	d8 9a       	sbi	0x1b, 0	; 27
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	4d ef       	ldi	r20, 0xFD	; 253
 7f2:	50 e0       	ldi	r21, 0x00	; 0
 7f4:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
 7fa:	94 e3       	ldi	r25, 0x34	; 52
 7fc:	ac e0       	ldi	r26, 0x0C	; 12
 7fe:	81 50       	subi	r24, 0x01	; 1
 800:	90 40       	sbci	r25, 0x00	; 0
 802:	a0 40       	sbci	r26, 0x00	; 0
 804:	e1 f7       	brne	.-8      	; 0x7fe <display_attendance+0x290>
 806:	00 c0       	rjmp	.+0      	; 0x808 <display_attendance+0x29a>
 808:	00 00       	nop
 80a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	4d e1       	ldi	r20, 0x1D	; 29
 814:	52 e0       	ldi	r21, 0x02	; 2
 816:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 81a:	8f ef       	ldi	r24, 0xFF	; 255
 81c:	94 e3       	ldi	r25, 0x34	; 52
 81e:	ac e0       	ldi	r26, 0x0C	; 12
 820:	81 50       	subi	r24, 0x01	; 1
 822:	90 40       	sbci	r25, 0x00	; 0
 824:	a0 40       	sbci	r26, 0x00	; 0
 826:	e1 f7       	brne	.-8      	; 0x820 <display_attendance+0x2b2>
 828:	00 c0       	rjmp	.+0      	; 0x82a <display_attendance+0x2bc>
 82a:	00 00       	nop
 82c:	d8 98       	cbi	0x1b, 0	; 27
 82e:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 832:	80 91 05 03 	lds	r24, 0x0305
 836:	90 91 06 03 	lds	r25, 0x0306
 83a:	81 30       	cpi	r24, 0x01	; 1
 83c:	91 05       	cpc	r25, r1
 83e:	41 f0       	breq	.+16     	; 0x850 <display_attendance+0x2e2>
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	90 93 06 03 	sts	0x0306, r25
 846:	80 93 05 03 	sts	0x0305, r24
		if(cnt5==1){	for (i=0;i<sizeof(clinet_code[4]);i++){
 84a:	81 30       	cpi	r24, 0x01	; 1
 84c:	91 05       	cpc	r25, r1
 84e:	41 f5       	brne	.+80     	; 0x8a0 <__stack+0x41>
 850:	ed e1       	ldi	r30, 0x1D	; 29
 852:	f2 e0       	ldi	r31, 0x02	; 2
 854:	af ea       	ldi	r26, 0xAF	; 175
 856:	b2 e0       	ldi	r27, 0x02	; 2
	lcd_out(0,0,"seventh one");
	lcd_out(1,1,list[6]);
	_delay_ms(500);*/

}
void display_attendance(int var){
 858:	cf 01       	movw	r24, r30
 85a:	0c 96       	adiw	r24, 0x0c	; 12
		list[3][i]=clinet_code[3][i];}}
		break;
		
		case 4: lcd_delete(); SET_BIT(DDRA,0); SET_BIT(PORTA,0);lcd_out(0,0,"fifth student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[4]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt5!=1){cnt5++;}
		if(cnt5==1){	for (i=0;i<sizeof(clinet_code[4]);i++){
		list[4][i]=clinet_code[4][i];}}
 85c:	21 91       	ld	r18, Z+
 85e:	2d 93       	st	X+, r18
		if(cnt4==1){	for (i=0;i<sizeof(clinet_code[3]);i++){
		list[3][i]=clinet_code[3][i];}}
		break;
		
		case 4: lcd_delete(); SET_BIT(DDRA,0); SET_BIT(PORTA,0);lcd_out(0,0,"fifth student");_delay_ms(500);lcd_delete();lcd_out(0,0,clinet_code[4]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt5!=1){cnt5++;}
		if(cnt5==1){	for (i=0;i<sizeof(clinet_code[4]);i++){
 860:	e8 17       	cp	r30, r24
 862:	f9 07       	cpc	r31, r25
 864:	d9 f7       	brne	.-10     	; 0x85c <display_attendance+0x2ee>
 866:	8c e0       	ldi	r24, 0x0C	; 12
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	90 93 04 03 	sts	0x0304, r25
 86e:	80 93 03 03 	sts	0x0303, r24
 872:	08 95       	ret
		case 6: lcd_delete(); SET_BIT(DDRA,0); SET_BIT(PORTA,0);lcd_out(0,0,"seventh student");lcd_out(1,1,clinet_code[6]);_delay_ms(500);CLR_BIT(PORTA,0);lcd_delete();if(cnt7!=1){cnt7++;}
		if(cnt7==1){	for (i=0;i<sizeof(clinet_code[6]);i++){
		list[6][i]=clinet_code[6][i];}}
		break;*/

		default:lcd_delete(); SET_BIT(DDRA,1); SET_BIT(PORTA,1);lcd_out(0,0,"wrong id");_delay_ms(500);CLR_BIT(PORTA,1);lcd_delete();break;
 874:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 878:	d1 9a       	sbi	0x1a, 1	; 26
 87a:	d9 9a       	sbi	0x1b, 1	; 27
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	4b e0       	ldi	r20, 0x0B	; 11
 882:	51 e0       	ldi	r21, 0x01	; 1
 884:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 888:	8f ef       	ldi	r24, 0xFF	; 255
 88a:	94 e3       	ldi	r25, 0x34	; 52
 88c:	ac e0       	ldi	r26, 0x0C	; 12
 88e:	81 50       	subi	r24, 0x01	; 1
 890:	90 40       	sbci	r25, 0x00	; 0
 892:	a0 40       	sbci	r26, 0x00	; 0
 894:	e1 f7       	brne	.-8      	; 0x88e <__stack+0x2f>
 896:	00 c0       	rjmp	.+0      	; 0x898 <__stack+0x39>
 898:	00 00       	nop
 89a:	d9 98       	cbi	0x1b, 1	; 27
 89c:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 8a0:	08 95       	ret

000008a2 <intr_init>:
	}
}
	void intr_init(){
			CLR_BIT(DDRD,7);
 8a2:	8f 98       	cbi	0x11, 7	; 17
			CLR_BIT(DDRD,2);
 8a4:	8a 98       	cbi	0x11, 2	; 17
			CLR_BIT(DDRB,2);
 8a6:	ba 98       	cbi	0x17, 2	; 23
			SET_BIT(PORTB,2);
 8a8:	c2 9a       	sbi	0x18, 2	; 24
		MCUCR |= (1<<1)|(1<<0); // falling edge
 8aa:	85 b7       	in	r24, 0x35	; 53
 8ac:	83 60       	ori	r24, 0x03	; 3
 8ae:	85 bf       	out	0x35, r24	; 53
		GICR |=(1<<6)|(1<<5); // enable INT0 set pin6
 8b0:	8b b7       	in	r24, 0x3b	; 59
 8b2:	80 66       	ori	r24, 0x60	; 96
 8b4:	8b bf       	out	0x3b, r24	; 59
		SREG |=(1<<7); // set GIE pin7
 8b6:	8f b7       	in	r24, 0x3f	; 63
 8b8:	80 68       	ori	r24, 0x80	; 128
 8ba:	8f bf       	out	0x3f, r24	; 63
	}
 8bc:	08 95       	ret

000008be <main>:

}

int main(void)
{
	CLR_BIT(DDRA,7);
 8be:	d7 98       	cbi	0x1a, 7	; 26
	lcd_init();
 8c0:	0e 94 5d 00 	call	0xba	; 0xba <lcd_init>
	//UART_INIT();
	USART_Init(9600);
 8c4:	60 e8       	ldi	r22, 0x80	; 128
 8c6:	75 e2       	ldi	r23, 0x25	; 37
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 44 06 	call	0xc88	; 0xc88 <USART_Init>
	intr_init();
 8d0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <intr_init>
	k=1;
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	90 93 fe 02 	sts	0x02FE, r25
 8dc:	80 93 fd 02 	sts	0x02FD, r24
    while(1)
    {
		
		if (GET_BIT(PINA,7)==1)
		{
			h=1;
 8e0:	01 e0       	ldi	r16, 0x01	; 1
 8e2:	10 e0       	ldi	r17, 0x00	; 0
			lcd_delete();
		lcd_out(0,0,"please enter ID");
 8e4:	0f 2e       	mov	r0, r31
 8e6:	f4 e1       	ldi	r31, 0x14	; 20
 8e8:	ef 2e       	mov	r14, r31
 8ea:	f1 e0       	ldi	r31, 0x01	; 1
 8ec:	ff 2e       	mov	r15, r31
 8ee:	f0 2d       	mov	r31, r0
		   }	
		   else{*/
			   lcd_delete();
			   while(GET_BIT(PINA,7)==0)
			   {
			   lcd_out(0,0,"EECE Attendance");
 8f0:	c4 e2       	ldi	r28, 0x24	; 36
 8f2:	d1 e0       	ldi	r29, 0x01	; 1
	intr_init();
	k=1;
    while(1)
    {
		
		if (GET_BIT(PINA,7)==1)
 8f4:	cf 9b       	sbis	0x19, 7	; 25
 8f6:	30 c0       	rjmp	.+96     	; 0x958 <main+0x9a>
		{
			h=1;
 8f8:	10 93 2c 03 	sts	0x032C, r17
 8fc:	00 93 2b 03 	sts	0x032B, r16
			lcd_delete();
 900:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		lcd_out(0,0,"please enter ID");
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	a7 01       	movw	r20, r14
 90a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
      do { Read_val=Read();
 90e:	0e 94 cf 00 	call	0x19e	; 0x19e <Read>
 912:	28 2f       	mov	r18, r24
 914:	80 93 2d 03 	sts	0x032D, r24
 918:	90 93 2e 03 	sts	0x032E, r25
 91c:	8f ec       	ldi	r24, 0xCF	; 207
 91e:	97 e0       	ldi	r25, 0x07	; 7
 920:	01 97       	sbiw	r24, 0x01	; 1
 922:	f1 f7       	brne	.-4      	; 0x920 <main+0x62>
 924:	00 c0       	rjmp	.+0      	; 0x926 <main+0x68>
 926:	00 00       	nop
	       _delay_ms(1);
       }while ((strlen(Read_val))!=12);
 928:	82 2f       	mov	r24, r18
 92a:	90 91 2e 03 	lds	r25, 0x032E
 92e:	e2 2f       	mov	r30, r18
 930:	f9 2f       	mov	r31, r25
 932:	df 01       	movw	r26, r30
 934:	0d 90       	ld	r0, X+
 936:	00 20       	and	r0, r0
 938:	e9 f7       	brne	.-6      	; 0x934 <main+0x76>
 93a:	9d 01       	movw	r18, r26
 93c:	2d 50       	subi	r18, 0x0D	; 13
 93e:	30 40       	sbci	r19, 0x00	; 0
 940:	2e 17       	cp	r18, r30
 942:	3f 07       	cpc	r19, r31
 944:	21 f7       	brne	.-56     	; 0x90e <main+0x50>
	  // while ((strlen(Read_val))!=13);

	    attendance=compare(Read_val);
 946:	0e 94 26 01 	call	0x24c	; 0x24c <compare>
 94a:	90 93 56 01 	sts	0x0156, r25
 94e:	80 93 55 01 	sts	0x0155, r24

		display_attendance(attendance);
 952:	0e 94 b7 02 	call	0x56e	; 0x56e <display_attendance>
 956:	ce cf       	rjmp	.-100    	; 0x8f4 <main+0x36>
		   lcd_out(0,0,"Times up");
		   }		   
		  _delay_ms(500);
		   }	
		   else{*/
			   lcd_delete();
 958:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
			   while(GET_BIT(PINA,7)==0)
 95c:	cf 99       	sbic	0x19, 7	; 25
 95e:	ca cf       	rjmp	.-108    	; 0x8f4 <main+0x36>
			   {
			   lcd_out(0,0,"EECE Attendance");
 960:	80 e0       	ldi	r24, 0x00	; 0
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	ae 01       	movw	r20, r28
 966:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
		   }		   
		  _delay_ms(500);
		   }	
		   else{*/
			   lcd_delete();
			   while(GET_BIT(PINA,7)==0)
 96a:	cf 9b       	sbis	0x19, 7	; 25
 96c:	f9 cf       	rjmp	.-14     	; 0x960 <main+0xa2>
 96e:	c2 cf       	rjmp	.-124    	; 0x8f4 <main+0x36>

00000970 <num_attend>:
		MCUCR |= (1<<1)|(1<<0); // falling edge
		GICR |=(1<<6)|(1<<5); // enable INT0 set pin6
		SREG |=(1<<7); // set GIE pin7
	}
	void num_attend(){
		if (k)
 970:	80 91 fd 02 	lds	r24, 0x02FD
 974:	90 91 fe 02 	lds	r25, 0x02FE
 978:	00 97       	sbiw	r24, 0x00	; 0
 97a:	09 f4       	brne	.+2      	; 0x97e <num_attend+0xe>
 97c:	35 c1       	rjmp	.+618    	; 0xbe8 <num_attend+0x278>
		{
		if (cnt||cnt2||cnt3||cnt4||cnt5)
 97e:	80 91 f9 02 	lds	r24, 0x02F9
 982:	90 91 fa 02 	lds	r25, 0x02FA
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	e9 f4       	brne	.+58     	; 0x9c4 <num_attend+0x54>
 98a:	20 91 f7 02 	lds	r18, 0x02F7
 98e:	30 91 f8 02 	lds	r19, 0x02F8
 992:	21 15       	cp	r18, r1
 994:	31 05       	cpc	r19, r1
 996:	b1 f4       	brne	.+44     	; 0x9c4 <num_attend+0x54>
 998:	20 91 29 03 	lds	r18, 0x0329
 99c:	30 91 2a 03 	lds	r19, 0x032A
 9a0:	21 15       	cp	r18, r1
 9a2:	31 05       	cpc	r19, r1
 9a4:	79 f4       	brne	.+30     	; 0x9c4 <num_attend+0x54>
 9a6:	20 91 2f 03 	lds	r18, 0x032F
 9aa:	30 91 30 03 	lds	r19, 0x0330
 9ae:	21 15       	cp	r18, r1
 9b0:	31 05       	cpc	r19, r1
 9b2:	41 f4       	brne	.+16     	; 0x9c4 <num_attend+0x54>
 9b4:	20 91 05 03 	lds	r18, 0x0305
 9b8:	30 91 06 03 	lds	r19, 0x0306
 9bc:	21 15       	cp	r18, r1
 9be:	31 05       	cpc	r19, r1
 9c0:	09 f4       	brne	.+2      	; 0x9c4 <num_attend+0x54>
 9c2:	cc c0       	rjmp	.+408    	; 0xb5c <num_attend+0x1ec>
		{
		static int cntt=0;
		if(cntt==0){
 9c4:	20 91 79 02 	lds	r18, 0x0279
 9c8:	30 91 7a 02 	lds	r19, 0x027A
 9cc:	21 15       	cp	r18, r1
 9ce:	31 05       	cpc	r19, r1
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <num_attend+0x64>
 9d2:	0a c1       	rjmp	.+532    	; 0xbe8 <num_attend+0x278>
		if(cnt==1){find++;}
 9d4:	81 30       	cpi	r24, 0x01	; 1
 9d6:	91 05       	cpc	r25, r1
 9d8:	49 f4       	brne	.+18     	; 0x9ec <num_attend+0x7c>
 9da:	80 91 07 03 	lds	r24, 0x0307
 9de:	90 91 08 03 	lds	r25, 0x0308
 9e2:	01 96       	adiw	r24, 0x01	; 1
 9e4:	90 93 08 03 	sts	0x0308, r25
 9e8:	80 93 07 03 	sts	0x0307, r24
		if(cnt2==1){find++;}
 9ec:	80 91 f7 02 	lds	r24, 0x02F7
 9f0:	90 91 f8 02 	lds	r25, 0x02F8
 9f4:	81 30       	cpi	r24, 0x01	; 1
 9f6:	91 05       	cpc	r25, r1
 9f8:	49 f4       	brne	.+18     	; 0xa0c <num_attend+0x9c>
 9fa:	80 91 07 03 	lds	r24, 0x0307
 9fe:	90 91 08 03 	lds	r25, 0x0308
 a02:	01 96       	adiw	r24, 0x01	; 1
 a04:	90 93 08 03 	sts	0x0308, r25
 a08:	80 93 07 03 	sts	0x0307, r24
		if(cnt3==1){find++;}
 a0c:	80 91 29 03 	lds	r24, 0x0329
 a10:	90 91 2a 03 	lds	r25, 0x032A
 a14:	81 30       	cpi	r24, 0x01	; 1
 a16:	91 05       	cpc	r25, r1
 a18:	49 f4       	brne	.+18     	; 0xa2c <num_attend+0xbc>
 a1a:	80 91 07 03 	lds	r24, 0x0307
 a1e:	90 91 08 03 	lds	r25, 0x0308
 a22:	01 96       	adiw	r24, 0x01	; 1
 a24:	90 93 08 03 	sts	0x0308, r25
 a28:	80 93 07 03 	sts	0x0307, r24
		if(cnt4==1){find++;}
 a2c:	80 91 2f 03 	lds	r24, 0x032F
 a30:	90 91 30 03 	lds	r25, 0x0330
 a34:	81 30       	cpi	r24, 0x01	; 1
 a36:	91 05       	cpc	r25, r1
 a38:	49 f4       	brne	.+18     	; 0xa4c <num_attend+0xdc>
 a3a:	80 91 07 03 	lds	r24, 0x0307
 a3e:	90 91 08 03 	lds	r25, 0x0308
 a42:	01 96       	adiw	r24, 0x01	; 1
 a44:	90 93 08 03 	sts	0x0308, r25
 a48:	80 93 07 03 	sts	0x0307, r24
		if(cnt5==1){find++;}
 a4c:	80 91 05 03 	lds	r24, 0x0305
 a50:	90 91 06 03 	lds	r25, 0x0306
 a54:	81 30       	cpi	r24, 0x01	; 1
 a56:	91 05       	cpc	r25, r1
 a58:	49 f4       	brne	.+18     	; 0xa6c <num_attend+0xfc>
 a5a:	80 91 07 03 	lds	r24, 0x0307
 a5e:	90 91 08 03 	lds	r25, 0x0308
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	90 93 08 03 	sts	0x0308, r25
 a68:	80 93 07 03 	sts	0x0307, r24
		/*if(cnt6==1){find++;}
		if(cnt7==1){find++;}*/

			lcd_delete();
 a6c:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
			lcd_out(0,0,"attendance num");
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	60 e0       	ldi	r22, 0x00	; 0
 a74:	44 e3       	ldi	r20, 0x34	; 52
 a76:	51 e0       	ldi	r21, 0x01	; 1
 a78:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>

			find_lcd=convertData(find);
 a7c:	80 91 07 03 	lds	r24, 0x0307
 a80:	90 91 08 03 	lds	r25, 0x0308
 a84:	0e 94 a7 00 	call	0x14e	; 0x14e <convertData>
 a88:	90 93 02 03 	sts	0x0302, r25
 a8c:	80 93 01 03 	sts	0x0301, r24
 a90:	8f ef       	ldi	r24, 0xFF	; 255
 a92:	94 e3       	ldi	r25, 0x34	; 52
 a94:	ac e0       	ldi	r26, 0x0C	; 12
 a96:	81 50       	subi	r24, 0x01	; 1
 a98:	90 40       	sbci	r25, 0x00	; 0
 a9a:	a0 40       	sbci	r26, 0x00	; 0
 a9c:	e1 f7       	brne	.-8      	; 0xa96 <num_attend+0x126>
 a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <num_attend+0x130>
 aa0:	00 00       	nop
			_delay_ms(500);lcd_delete();
 aa2:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
			lcd_out(0,0,find_lcd);
 aa6:	40 91 01 03 	lds	r20, 0x0301
 aaa:	50 91 02 03 	lds	r21, 0x0302
 aae:	80 e0       	ldi	r24, 0x00	; 0
 ab0:	60 e0       	ldi	r22, 0x00	; 0
 ab2:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 ab6:	8f ef       	ldi	r24, 0xFF	; 255
 ab8:	94 e3       	ldi	r25, 0x34	; 52
 aba:	ac e0       	ldi	r26, 0x0C	; 12
 abc:	81 50       	subi	r24, 0x01	; 1
 abe:	90 40       	sbci	r25, 0x00	; 0
 ac0:	a0 40       	sbci	r26, 0x00	; 0
 ac2:	e1 f7       	brne	.-8      	; 0xabc <num_attend+0x14c>
 ac4:	00 c0       	rjmp	.+0      	; 0xac6 <num_attend+0x156>
 ac6:	00 00       	nop
			_delay_ms(500);
			lcd_delete();
 ac8:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
			abss=5-find;
 acc:	20 91 07 03 	lds	r18, 0x0307
 ad0:	30 91 08 03 	lds	r19, 0x0308
 ad4:	85 e0       	ldi	r24, 0x05	; 5
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	82 1b       	sub	r24, r18
 ada:	93 0b       	sbc	r25, r19
 adc:	90 93 32 03 	sts	0x0332, r25
 ae0:	80 93 31 03 	sts	0x0331, r24
			abss_lcd=convertData(abss);
 ae4:	0e 94 a7 00 	call	0x14e	; 0x14e <convertData>
 ae8:	90 93 28 03 	sts	0x0328, r25
 aec:	80 93 27 03 	sts	0x0327, r24
			lcd_out(0,0,"absent num");
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	60 e0       	ldi	r22, 0x00	; 0
 af4:	43 e4       	ldi	r20, 0x43	; 67
 af6:	51 e0       	ldi	r21, 0x01	; 1
 af8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 afc:	8f ef       	ldi	r24, 0xFF	; 255
 afe:	94 e3       	ldi	r25, 0x34	; 52
 b00:	ac e0       	ldi	r26, 0x0C	; 12
 b02:	81 50       	subi	r24, 0x01	; 1
 b04:	90 40       	sbci	r25, 0x00	; 0
 b06:	a0 40       	sbci	r26, 0x00	; 0
 b08:	e1 f7       	brne	.-8      	; 0xb02 <num_attend+0x192>
 b0a:	00 c0       	rjmp	.+0      	; 0xb0c <num_attend+0x19c>
 b0c:	00 00       	nop
			_delay_ms(500);lcd_delete();
 b0e:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
			lcd_out(0,0,abss_lcd);
 b12:	40 91 27 03 	lds	r20, 0x0327
 b16:	50 91 28 03 	lds	r21, 0x0328
 b1a:	80 e0       	ldi	r24, 0x00	; 0
 b1c:	60 e0       	ldi	r22, 0x00	; 0
 b1e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 b22:	8f ef       	ldi	r24, 0xFF	; 255
 b24:	94 e3       	ldi	r25, 0x34	; 52
 b26:	ac e0       	ldi	r26, 0x0C	; 12
 b28:	81 50       	subi	r24, 0x01	; 1
 b2a:	90 40       	sbci	r25, 0x00	; 0
 b2c:	a0 40       	sbci	r26, 0x00	; 0
 b2e:	e1 f7       	brne	.-8      	; 0xb28 <num_attend+0x1b8>
 b30:	00 c0       	rjmp	.+0      	; 0xb32 <num_attend+0x1c2>
 b32:	00 00       	nop
			_delay_ms(500);
			lcd_delete();
 b34:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
			find=0;
 b38:	10 92 08 03 	sts	0x0308, r1
 b3c:	10 92 07 03 	sts	0x0307, r1
			abss=0;
 b40:	10 92 32 03 	sts	0x0332, r1
 b44:	10 92 31 03 	sts	0x0331, r1
			cntt++;
 b48:	80 91 79 02 	lds	r24, 0x0279
 b4c:	90 91 7a 02 	lds	r25, 0x027A
 b50:	01 96       	adiw	r24, 0x01	; 1
 b52:	90 93 7a 02 	sts	0x027A, r25
 b56:	80 93 79 02 	sts	0x0279, r24
 b5a:	08 95       	ret
		}			
	}
	else{
		lcd_delete();
 b5c:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		lcd_out(0,0,"attendance num");
 b60:	80 e0       	ldi	r24, 0x00	; 0
 b62:	60 e0       	ldi	r22, 0x00	; 0
 b64:	44 e3       	ldi	r20, 0x34	; 52
 b66:	51 e0       	ldi	r21, 0x01	; 1
 b68:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 b6c:	8f ef       	ldi	r24, 0xFF	; 255
 b6e:	94 e3       	ldi	r25, 0x34	; 52
 b70:	ac e0       	ldi	r26, 0x0C	; 12
 b72:	81 50       	subi	r24, 0x01	; 1
 b74:	90 40       	sbci	r25, 0x00	; 0
 b76:	a0 40       	sbci	r26, 0x00	; 0
 b78:	e1 f7       	brne	.-8      	; 0xb72 <num_attend+0x202>
 b7a:	00 c0       	rjmp	.+0      	; 0xb7c <num_attend+0x20c>
 b7c:	00 00       	nop
		_delay_ms(500);
		lcd_delete();
 b7e:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		lcd_out(0,0,"zero");
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	4e e4       	ldi	r20, 0x4E	; 78
 b88:	51 e0       	ldi	r21, 0x01	; 1
 b8a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 b8e:	8f ef       	ldi	r24, 0xFF	; 255
 b90:	94 e3       	ldi	r25, 0x34	; 52
 b92:	ac e0       	ldi	r26, 0x0C	; 12
 b94:	81 50       	subi	r24, 0x01	; 1
 b96:	90 40       	sbci	r25, 0x00	; 0
 b98:	a0 40       	sbci	r26, 0x00	; 0
 b9a:	e1 f7       	brne	.-8      	; 0xb94 <num_attend+0x224>
 b9c:	00 c0       	rjmp	.+0      	; 0xb9e <num_attend+0x22e>
 b9e:	00 00       	nop
		_delay_ms(500);
		lcd_delete();
 ba0:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		lcd_out(0,0,"absent num");
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	60 e0       	ldi	r22, 0x00	; 0
 ba8:	43 e4       	ldi	r20, 0x43	; 67
 baa:	51 e0       	ldi	r21, 0x01	; 1
 bac:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 bb0:	8f ef       	ldi	r24, 0xFF	; 255
 bb2:	94 e3       	ldi	r25, 0x34	; 52
 bb4:	ac e0       	ldi	r26, 0x0C	; 12
 bb6:	81 50       	subi	r24, 0x01	; 1
 bb8:	90 40       	sbci	r25, 0x00	; 0
 bba:	a0 40       	sbci	r26, 0x00	; 0
 bbc:	e1 f7       	brne	.-8      	; 0xbb6 <num_attend+0x246>
 bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <num_attend+0x250>
 bc0:	00 00       	nop
		_delay_ms(500);lcd_delete();
 bc2:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		lcd_out(0,0,"5");
 bc6:	80 e0       	ldi	r24, 0x00	; 0
 bc8:	60 e0       	ldi	r22, 0x00	; 0
 bca:	43 e5       	ldi	r20, 0x53	; 83
 bcc:	51 e0       	ldi	r21, 0x01	; 1
 bce:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 bd2:	8f ef       	ldi	r24, 0xFF	; 255
 bd4:	94 e3       	ldi	r25, 0x34	; 52
 bd6:	ac e0       	ldi	r26, 0x0C	; 12
 bd8:	81 50       	subi	r24, 0x01	; 1
 bda:	90 40       	sbci	r25, 0x00	; 0
 bdc:	a0 40       	sbci	r26, 0x00	; 0
 bde:	e1 f7       	brne	.-8      	; 0xbd8 <num_attend+0x268>
 be0:	00 c0       	rjmp	.+0      	; 0xbe2 <num_attend+0x272>
 be2:	00 00       	nop
		_delay_ms(500);
		lcd_delete();
 be4:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 be8:	08 95       	ret

00000bea <__vector_3>:
void intr_init();
void display_list();
void 	num_attend();
//----------------------------------

ISR( INT2_vect){
 bea:	1f 92       	push	r1
 bec:	0f 92       	push	r0
 bee:	0f b6       	in	r0, 0x3f	; 63
 bf0:	0f 92       	push	r0
 bf2:	11 24       	eor	r1, r1
 bf4:	2f 93       	push	r18
 bf6:	3f 93       	push	r19
 bf8:	4f 93       	push	r20
 bfa:	5f 93       	push	r21
 bfc:	6f 93       	push	r22
 bfe:	7f 93       	push	r23
 c00:	8f 93       	push	r24
 c02:	9f 93       	push	r25
 c04:	af 93       	push	r26
 c06:	bf 93       	push	r27
 c08:	ef 93       	push	r30
 c0a:	ff 93       	push	r31

	num_attend();
 c0c:	0e 94 b8 04 	call	0x970	; 0x970 <num_attend>

}
 c10:	ff 91       	pop	r31
 c12:	ef 91       	pop	r30
 c14:	bf 91       	pop	r27
 c16:	af 91       	pop	r26
 c18:	9f 91       	pop	r25
 c1a:	8f 91       	pop	r24
 c1c:	7f 91       	pop	r23
 c1e:	6f 91       	pop	r22
 c20:	5f 91       	pop	r21
 c22:	4f 91       	pop	r20
 c24:	3f 91       	pop	r19
 c26:	2f 91       	pop	r18
 c28:	0f 90       	pop	r0
 c2a:	0f be       	out	0x3f, r0	; 63
 c2c:	0f 90       	pop	r0
 c2e:	1f 90       	pop	r1
 c30:	18 95       	reti

00000c32 <UART_INIT>:
#include "AVR_UART.h"
#include "macros.h"

void UART_INIT()
{
UBRRL = (uint8_t)(MYUBRR) ;    //send the low  8 bits of the UBRR
 c32:	83 e3       	ldi	r24, 0x33	; 51
 c34:	89 b9       	out	0x09, r24	; 9
UBRRH = (uint8_t)(MYUBRR>>8);//send the high 4 bits of the UBRR
 c36:	10 bc       	out	0x20, r1	; 32
UCSRB |=((1<<4)|(1<<3));     //Enable transmit and enable RXENn TXENn
 c38:	8a b1       	in	r24, 0x0a	; 10
 c3a:	88 61       	ori	r24, 0x18	; 24
 c3c:	8a b9       	out	0x0a, r24	; 10
UCSRC |=((1<<2)|(1<<1));     //Frame with 8 bit data , 1 stop bit, no parity UCSZn1 UCSZn0 , Asynchornous mode
 c3e:	80 b5       	in	r24, 0x20	; 32
 c40:	86 60       	ori	r24, 0x06	; 6
 c42:	80 bd       	out	0x20, r24	; 32
}
 c44:	08 95       	ret

00000c46 <UART_Transmit>:


void UART_Transmit(uint8_t data)
{  while( !(UCSRA & (1<<5)) ) ;// wait until the buffer is empty UDREn
 c46:	5d 9b       	sbis	0x0b, 5	; 11
 c48:	fe cf       	rjmp	.-4      	; 0xc46 <UART_Transmit>
	UDR=data;
 c4a:	8c b9       	out	0x0c, r24	; 12
}
 c4c:	08 95       	ret

00000c4e <UART_Read>:

uint8_t UART_Read()
{ while( !(UCSRA & (1<<7)) )
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <UART_Read+0x6>
	{if (GET_BIT(PIND,7)==0)
 c50:	87 9b       	sbis	0x10, 7	; 16
 c52:	02 c0       	rjmp	.+4      	; 0xc58 <UART_Read+0xa>
{  while( !(UCSRA & (1<<5)) ) ;// wait until the buffer is empty UDREn
	UDR=data;
}

uint8_t UART_Read()
{ while( !(UCSRA & (1<<7)) )
 c54:	5f 9b       	sbis	0x0b, 7	; 11
 c56:	fc cf       	rjmp	.-8      	; 0xc50 <UART_Read+0x2>
	{
		break;
	}
	}	
	 //wait until the receiving complete RXCn
	return UDR;
 c58:	8c b1       	in	r24, 0x0c	; 12
}
 c5a:	08 95       	ret

00000c5c <UART_Transmit_string>:

void UART_Transmit_string (char * str)
{
 c5c:	0f 93       	push	r16
 c5e:	1f 93       	push	r17
 c60:	cf 93       	push	r28
 c62:	8c 01       	movw	r16, r24
	unsigned char i =0 ;
	 while(str[i]!=0)
 c64:	fc 01       	movw	r30, r24
 c66:	80 81       	ld	r24, Z
 c68:	88 23       	and	r24, r24
 c6a:	51 f0       	breq	.+20     	; 0xc80 <UART_Transmit_string+0x24>
	return UDR;
}

void UART_Transmit_string (char * str)
{
	unsigned char i =0 ;
 c6c:	c0 e0       	ldi	r28, 0x00	; 0
	 while(str[i]!=0)
	    {UART_Transmit(str[i]) ; i++;}
 c6e:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_Transmit>
 c72:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_Transmit_string (char * str)
{
	unsigned char i =0 ;
	 while(str[i]!=0)
 c74:	f8 01       	movw	r30, r16
 c76:	ec 0f       	add	r30, r28
 c78:	f1 1d       	adc	r31, r1
 c7a:	80 81       	ld	r24, Z
 c7c:	88 23       	and	r24, r24
 c7e:	b9 f7       	brne	.-18     	; 0xc6e <UART_Transmit_string+0x12>
	    {UART_Transmit(str[i]) ; i++;}
}
 c80:	cf 91       	pop	r28
 c82:	1f 91       	pop	r17
 c84:	0f 91       	pop	r16
 c86:	08 95       	ret

00000c88 <USART_Init>:

#include "USART_RS232_H_file.h"						/* Include USART header file */
#include "macros.h"
#include "lcd.h"
void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{ 
 c88:	0f 93       	push	r16
 c8a:	1f 93       	push	r17
 c8c:	dc 01       	movw	r26, r24
 c8e:	cb 01       	movw	r24, r22
	UCSRB |= (1 << RXEN) | (1 << TXEN);				/* Enable USART transmitter and receiver */
 c90:	2a b1       	in	r18, 0x0a	; 10
 c92:	28 61       	ori	r18, 0x18	; 24
 c94:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */ 
 c96:	20 b5       	in	r18, 0x20	; 32
 c98:	26 68       	ori	r18, 0x86	; 134
 c9a:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
 c9c:	88 0f       	add	r24, r24
 c9e:	99 1f       	adc	r25, r25
 ca0:	aa 1f       	adc	r26, r26
 ca2:	bb 1f       	adc	r27, r27
 ca4:	88 0f       	add	r24, r24
 ca6:	99 1f       	adc	r25, r25
 ca8:	aa 1f       	adc	r26, r26
 caa:	bb 1f       	adc	r27, r27
 cac:	9c 01       	movw	r18, r24
 cae:	ad 01       	movw	r20, r26
 cb0:	22 0f       	add	r18, r18
 cb2:	33 1f       	adc	r19, r19
 cb4:	44 1f       	adc	r20, r20
 cb6:	55 1f       	adc	r21, r21
 cb8:	22 0f       	add	r18, r18
 cba:	33 1f       	adc	r19, r19
 cbc:	44 1f       	adc	r20, r20
 cbe:	55 1f       	adc	r21, r21
 cc0:	60 e0       	ldi	r22, 0x00	; 0
 cc2:	72 e1       	ldi	r23, 0x12	; 18
 cc4:	8a e7       	ldi	r24, 0x7A	; 122
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__udivmodsi4>
 ccc:	89 01       	movw	r16, r18
 cce:	9a 01       	movw	r18, r20
 cd0:	80 2f       	mov	r24, r16
 cd2:	81 50       	subi	r24, 0x01	; 1
 cd4:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
 cd6:	01 50       	subi	r16, 0x01	; 1
 cd8:	10 40       	sbci	r17, 0x00	; 0
 cda:	20 40       	sbci	r18, 0x00	; 0
 cdc:	30 40       	sbci	r19, 0x00	; 0
 cde:	01 2f       	mov	r16, r17
 ce0:	12 2f       	mov	r17, r18
 ce2:	23 2f       	mov	r18, r19
 ce4:	33 27       	eor	r19, r19
 ce6:	00 bd       	out	0x20, r16	; 32
}
 ce8:	1f 91       	pop	r17
 cea:	0f 91       	pop	r16
 cec:	08 95       	ret

00000cee <USART_RxChar>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC))){
 cee:	02 c0       	rjmp	.+4      	; 0xcf4 <USART_RxChar+0x6>
		if (GET_BIT(PINA,7)==0)
 cf0:	cf 9b       	sbis	0x19, 7	; 25
 cf2:	04 c0       	rjmp	.+8      	; 0xcfc <USART_RxChar+0xe>
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
}

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC))){
 cf4:	5f 9b       	sbis	0x0b, 7	; 11
 cf6:	fc cf       	rjmp	.-8      	; 0xcf0 <USART_RxChar+0x2>
			
		//break;
		return(0);
		}
		}					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */ 
 cf8:	8c b1       	in	r24, 0x0c	; 12
 cfa:	08 95       	ret
	while (!(UCSRA & (1 << RXC))){
		if (GET_BIT(PINA,7)==0)
		{
			
		//break;
		return(0);
 cfc:	80 e0       	ldi	r24, 0x00	; 0
		}
		}					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */ 
}
 cfe:	08 95       	ret

00000d00 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
 d00:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
 d02:	5d 9b       	sbis	0x0b, 5	; 11
 d04:	fe cf       	rjmp	.-4      	; 0xd02 <USART_TxChar+0x2>
}
 d06:	08 95       	ret

00000d08 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
 d08:	cf 93       	push	r28
 d0a:	df 93       	push	r29
 d0c:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
 d0e:	88 81       	ld	r24, Y
 d10:	88 23       	and	r24, r24
 d12:	31 f0       	breq	.+12     	; 0xd20 <USART_SendString+0x18>
{
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
 d14:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;																	
	while (str[i]!=0)
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
 d16:	0e 94 80 06 	call	0xd00	; 0xd00 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
 d1a:	89 91       	ld	r24, Y+
 d1c:	88 23       	and	r24, r24
 d1e:	d9 f7       	brne	.-10     	; 0xd16 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
 d20:	df 91       	pop	r29
 d22:	cf 91       	pop	r28
 d24:	08 95       	ret

00000d26 <__udivmodhi4>:
 d26:	aa 1b       	sub	r26, r26
 d28:	bb 1b       	sub	r27, r27
 d2a:	51 e1       	ldi	r21, 0x11	; 17
 d2c:	07 c0       	rjmp	.+14     	; 0xd3c <__udivmodhi4_ep>

00000d2e <__udivmodhi4_loop>:
 d2e:	aa 1f       	adc	r26, r26
 d30:	bb 1f       	adc	r27, r27
 d32:	a6 17       	cp	r26, r22
 d34:	b7 07       	cpc	r27, r23
 d36:	10 f0       	brcs	.+4      	; 0xd3c <__udivmodhi4_ep>
 d38:	a6 1b       	sub	r26, r22
 d3a:	b7 0b       	sbc	r27, r23

00000d3c <__udivmodhi4_ep>:
 d3c:	88 1f       	adc	r24, r24
 d3e:	99 1f       	adc	r25, r25
 d40:	5a 95       	dec	r21
 d42:	a9 f7       	brne	.-22     	; 0xd2e <__udivmodhi4_loop>
 d44:	80 95       	com	r24
 d46:	90 95       	com	r25
 d48:	bc 01       	movw	r22, r24
 d4a:	cd 01       	movw	r24, r26
 d4c:	08 95       	ret

00000d4e <__udivmodsi4>:
 d4e:	a1 e2       	ldi	r26, 0x21	; 33
 d50:	1a 2e       	mov	r1, r26
 d52:	aa 1b       	sub	r26, r26
 d54:	bb 1b       	sub	r27, r27
 d56:	fd 01       	movw	r30, r26
 d58:	0d c0       	rjmp	.+26     	; 0xd74 <__udivmodsi4_ep>

00000d5a <__udivmodsi4_loop>:
 d5a:	aa 1f       	adc	r26, r26
 d5c:	bb 1f       	adc	r27, r27
 d5e:	ee 1f       	adc	r30, r30
 d60:	ff 1f       	adc	r31, r31
 d62:	a2 17       	cp	r26, r18
 d64:	b3 07       	cpc	r27, r19
 d66:	e4 07       	cpc	r30, r20
 d68:	f5 07       	cpc	r31, r21
 d6a:	20 f0       	brcs	.+8      	; 0xd74 <__udivmodsi4_ep>
 d6c:	a2 1b       	sub	r26, r18
 d6e:	b3 0b       	sbc	r27, r19
 d70:	e4 0b       	sbc	r30, r20
 d72:	f5 0b       	sbc	r31, r21

00000d74 <__udivmodsi4_ep>:
 d74:	66 1f       	adc	r22, r22
 d76:	77 1f       	adc	r23, r23
 d78:	88 1f       	adc	r24, r24
 d7a:	99 1f       	adc	r25, r25
 d7c:	1a 94       	dec	r1
 d7e:	69 f7       	brne	.-38     	; 0xd5a <__udivmodsi4_loop>
 d80:	60 95       	com	r22
 d82:	70 95       	com	r23
 d84:	80 95       	com	r24
 d86:	90 95       	com	r25
 d88:	9b 01       	movw	r18, r22
 d8a:	ac 01       	movw	r20, r24
 d8c:	bd 01       	movw	r22, r26
 d8e:	cf 01       	movw	r24, r30
 d90:	08 95       	ret

00000d92 <_exit>:
 d92:	f8 94       	cli

00000d94 <__stop_program>:
 d94:	ff cf       	rjmp	.-2      	; 0xd94 <__stop_program>
