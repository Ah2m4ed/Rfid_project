
RFID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000856  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00800060  00000856  000008ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000063  00800164  00800164  000009ee  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000009f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00001148  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fdc  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004dc  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d5  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028e  00000000  00000000  00003144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000073c  00000000  00000000  000033d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3c       	cpi	r26, 0xC7	; 199
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <main>
  8a:	0c 94 29 04 	jmp	0x852	; 0x852 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_send_command>:
#include "macros.h"
#include <avr/delay.h>
#include <util/delay.h>
	
void lcd_send_command(uint8_t cmd ){
	PORT_data =cmd;
  92:	85 bb       	out	0x15, r24	; 21
	
	// disabled RW
	CLR_BIT(PORT_CONT,RW);
  94:	91 98       	cbi	0x12, 1	; 18
	// enabel rs
	CLR_BIT(PORT_CONT,RS);
  96:	94 98       	cbi	0x12, 4	; 18
	
	//adjust enable 
	CLR_BIT(PORT_CONT,en);
  98:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_send_command+0xa>
  a0:	00 00       	nop
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
  a2:	93 9a       	sbi	0x12, 3	; 18
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	9a 95       	dec	r25
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_send_command+0x14>
  aa:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	87 ea       	ldi	r24, 0xA7	; 167
  ae:	91 e6       	ldi	r25, 0x61	; 97
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_send_command+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_send_command+0x24>
  b6:	00 00       	nop
	_delay_us(1);
	
	//let lcd execute command
	_delay_ms(10);
	
}
  b8:	08 95       	ret

000000ba <lcd_init>:
void lcd_init(){
	// data on portb are output
	DDRC=0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
  be:	15 ba       	out	0x15, r1	; 21
	//control pins are output 
	SET_BIT(DDRD,en);
  c0:	8b 9a       	sbi	0x11, 3	; 17
	SET_BIT(DDRD,RW);
  c2:	89 9a       	sbi	0x11, 1	; 17
	SET_BIT(DDRD,RS);
  c4:	8c 9a       	sbi	0x11, 4	; 17
	// active enable 
	SET_BIT(PORT_CONT,en);
  c6:	93 9a       	sbi	0x12, 3	; 18
	
	//lcd_init 8bit mode
	lcd_send_command(0x38);
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
	//lcd on cursor off
	lcd_send_command(0x0c);
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
}
  d4:	08 95       	ret

000000d6 <LCD_SendData>:

void LCD_SendData(unsigned char data)
{
	// Put Data on Port
	PORTC = data;
  d6:	85 bb       	out	0x15, r24	; 21
	// Set R/W to W
	CLR_BIT(PORT_CONT,RW);
  d8:	91 98       	cbi	0x12, 1	; 18
	// Set RS to Data
	SET_BIT(PORT_CONT,RS);
  da:	94 9a       	sbi	0x12, 4	; 18

//adjust enable
	CLR_BIT(PORT_CONT,en);
  dc:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_SendData+0xa>
  e4:	00 00       	nop
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
  e6:	93 9a       	sbi	0x12, 3	; 18
  e8:	93 e0       	ldi	r25, 0x03	; 3
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_SendData+0x14>
  ee:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	87 ea       	ldi	r24, 0xA7	; 167
  f2:	91 e6       	ldi	r25, 0x61	; 97
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_SendData+0x1e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_SendData+0x24>
  fa:	00 00       	nop
	_delay_us(1);
	
	// Delay to let LCD Display Data
	_delay_ms(10);
}
  fc:	08 95       	ret

000000fe <LCD_SET_CURSOR>:

void LCD_SET_CURSOR (unsigned char x, unsigned char y)
{
	if(y == 0)
  fe:	66 23       	and	r22, r22
 100:	21 f4       	brne	.+8      	; 0x10a <LCD_SET_CURSOR+0xc>
	{
		lcd_send_command(0x80 + x);
 102:	80 58       	subi	r24, 0x80	; 128
 104:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 108:	08 95       	ret
	}
	else
	{
		lcd_send_command(0xC0+ x);
 10a:	80 54       	subi	r24, 0x40	; 64
 10c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 110:	08 95       	ret

00000112 <LCD_SendString>:
	}
}

void LCD_SendString(char *str)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	while(*str != '\0')
 118:	88 81       	ld	r24, Y
 11a:	88 23       	and	r24, r24
 11c:	31 f0       	breq	.+12     	; 0x12a <LCD_SendString+0x18>
	{
		lcd_send_command(0xC0+ x);
	}
}

void LCD_SendString(char *str)
 11e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		LCD_SendData(*str);
 120:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_SendData>
	}
}

void LCD_SendString(char *str)
{
	while(*str != '\0')
 124:	89 91       	ld	r24, Y+
 126:	88 23       	and	r24, r24
 128:	d9 f7       	brne	.-10     	; 0x120 <LCD_SendString+0xe>
	{
		LCD_SendData(*str);
		str++;
	}
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <LCD_Clear>:
void LCD_Clear(void)
{
	// Send Clr command to LCD
lcd_send_command(0x01);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
}
 136:	08 95       	ret

00000138 <lcd_out>:

void lcd_out( unsigned char x, unsigned char y,char *str)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ea 01       	movw	r28, r20
	LCD_SET_CURSOR(x, y);
 13e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_SET_CURSOR>
	LCD_SendString(str);
 142:	ce 01       	movw	r24, r28
 144:	0e 94 89 00 	call	0x112	; 0x112 <LCD_SendString>
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <convertData>:
char* convertData(unsigned int var)
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
 14e:	10 92 74 01 	sts	0x0174, r1
if(var==0) return "zero";
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	71 f0       	breq	.+28     	; 0x172 <convertData+0x24>
 156:	e4 e7       	ldi	r30, 0x74	; 116
 158:	f1 e0       	ldi	r31, 0x01	; 1
else 

	while(var != 0)
	{
		arr--;
		*arr = (var%10) + '0';
 15a:	2a e0       	ldi	r18, 0x0A	; 10
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	0e 94 15 04 	call	0x82a	; 0x82a <__udivmodhi4>
 164:	80 5d       	subi	r24, 0xD0	; 208
 166:	82 93       	st	-Z, r24
		var = var / 10;
 168:	86 2f       	mov	r24, r22
 16a:	97 2f       	mov	r25, r23

	*arr = '\0';
if(var==0) return "zero";
else 

	while(var != 0)
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	b9 f7       	brne	.-18     	; 0x15e <convertData+0x10>
 170:	02 c0       	rjmp	.+4      	; 0x176 <convertData+0x28>
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
if(var==0) return "zero";
 172:	e0 e6       	ldi	r30, 0x60	; 96
 174:	f0 e0       	ldi	r31, 0x00	; 0
		arr--;
		*arr = (var%10) + '0';
		var = var / 10;
	}
	return arr;
}
 176:	8e 2f       	mov	r24, r30
 178:	9f 2f       	mov	r25, r31
 17a:	08 95       	ret

0000017c <lcd_delete>:

void lcd_delete(){
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
	lcd_out(0,0,"                  ");
 180:	c5 e6       	ldi	r28, 0x65	; 101
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	ae 01       	movw	r20, r28
 18a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	lcd_out(0,1,"                  ");
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	ae 01       	movw	r20, r28
 194:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	
	
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <Read>:
		display_attendance(attendance);
		
		
    }
}
char* Read(){
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
	
		for (i=0;i<5;i++)
 1a6:	10 92 b4 01 	sts	0x01B4, r1
 1aa:	10 92 b3 01 	sts	0x01B3, r1
	{ _delay_ms(1);
		code_recv[i]=UART_Read();
 1ae:	07 eb       	ldi	r16, 0xB7	; 183
 1b0:	11 e0       	ldi	r17, 0x01	; 1
 1b2:	8f ec       	ldi	r24, 0xCF	; 207
 1b4:	97 e0       	ldi	r25, 0x07	; 7
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <Read+0x18>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Read+0x1e>
 1bc:	00 00       	nop
 1be:	c0 91 b3 01 	lds	r28, 0x01B3
 1c2:	d0 91 b4 01 	lds	r29, 0x01B4
 1c6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <UART_Read>
 1ca:	c0 0f       	add	r28, r16
 1cc:	d1 1f       	adc	r29, r17
 1ce:	88 83       	st	Y, r24
		
    }
}
char* Read(){
	
		for (i=0;i<5;i++)
 1d0:	80 91 b3 01 	lds	r24, 0x01B3
 1d4:	90 91 b4 01 	lds	r25, 0x01B4
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 b4 01 	sts	0x01B4, r25
 1de:	80 93 b3 01 	sts	0x01B3, r24
 1e2:	85 30       	cpi	r24, 0x05	; 5
 1e4:	91 05       	cpc	r25, r1
 1e6:	2c f3       	brlt	.-54     	; 0x1b2 <Read+0x14>
	}
	return code_recv;
	
	

}
 1e8:	87 eb       	ldi	r24, 0xB7	; 183
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	08 95       	ret

000001f6 <compare>:

int compare(char*read_val){
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	bc 01       	movw	r22, r24
	flag=0;
 1fc:	10 92 b0 01 	sts	0x01B0, r1
 200:	10 92 af 01 	sts	0x01AF, r1
	for(j=0;j<5;j++)
 204:	10 92 78 01 	sts	0x0178, r1
 208:	10 92 77 01 	sts	0x0177, r1
	{
		 for(i=0;i<5;i++)
	          {
				  if(read_val[i]==id_code[j][i] )
 20c:	c9 e1       	ldi	r28, 0x19	; 25
 20e:	d1 e0       	ldi	r29, 0x01	; 1

int compare(char*read_val){
	flag=0;
	for(j=0;j<5;j++)
	{
		 for(i=0;i<5;i++)
 210:	10 92 b4 01 	sts	0x01B4, r1
 214:	10 92 b3 01 	sts	0x01B3, r1
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	50 e0       	ldi	r21, 0x00	; 0
	          {
				  if(read_val[i]==id_code[j][i] )
 21c:	fb 01       	movw	r30, r22
 21e:	e4 0f       	add	r30, r20
 220:	f5 1f       	adc	r31, r21
 222:	80 91 77 01 	lds	r24, 0x0177
 226:	90 91 78 01 	lds	r25, 0x0178
 22a:	9c 01       	movw	r18, r24
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	82 0f       	add	r24, r18
 236:	93 1f       	adc	r25, r19
 238:	84 0f       	add	r24, r20
 23a:	95 1f       	adc	r25, r21
 23c:	de 01       	movw	r26, r28
 23e:	a8 0f       	add	r26, r24
 240:	b9 1f       	adc	r27, r25
 242:	90 81       	ld	r25, Z
 244:	8c 91       	ld	r24, X
 246:	98 17       	cp	r25, r24
 248:	79 f4       	brne	.+30     	; 0x268 <compare+0x72>
 24a:	8f ec       	ldi	r24, 0xCF	; 207
 24c:	97 e0       	ldi	r25, 0x07	; 7
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <compare+0x58>
 252:	00 c0       	rjmp	.+0      	; 0x254 <compare+0x5e>
 254:	00 00       	nop
	                {_delay_ms(1);
		              flag++;
 256:	80 91 af 01 	lds	r24, 0x01AF
 25a:	90 91 b0 01 	lds	r25, 0x01B0
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	90 93 b0 01 	sts	0x01B0, r25
 264:	80 93 af 01 	sts	0x01AF, r24

int compare(char*read_val){
	flag=0;
	for(j=0;j<5;j++)
	{
		 for(i=0;i<5;i++)
 268:	40 91 b3 01 	lds	r20, 0x01B3
 26c:	50 91 b4 01 	lds	r21, 0x01B4
 270:	4f 5f       	subi	r20, 0xFF	; 255
 272:	5f 4f       	sbci	r21, 0xFF	; 255
 274:	50 93 b4 01 	sts	0x01B4, r21
 278:	40 93 b3 01 	sts	0x01B3, r20
 27c:	45 30       	cpi	r20, 0x05	; 5
 27e:	51 05       	cpc	r21, r1
 280:	6c f2       	brlt	.-102    	; 0x21c <compare+0x26>
		              flag++;
	                }  
			   	
			   }
	
	if(flag==4) return j ;
 282:	80 91 af 01 	lds	r24, 0x01AF
 286:	90 91 b0 01 	lds	r25, 0x01B0
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	91 05       	cpc	r25, r1
 28e:	29 f4       	brne	.+10     	; 0x29a <compare+0xa4>
 290:	80 91 77 01 	lds	r24, 0x0177
 294:	90 91 78 01 	lds	r25, 0x0178
 298:	11 c0       	rjmp	.+34     	; 0x2bc <compare+0xc6>
	 flag=0;
 29a:	10 92 b0 01 	sts	0x01B0, r1
 29e:	10 92 af 01 	sts	0x01AF, r1

}

int compare(char*read_val){
	flag=0;
	for(j=0;j<5;j++)
 2a2:	80 91 77 01 	lds	r24, 0x0177
 2a6:	90 91 78 01 	lds	r25, 0x0178
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	90 93 78 01 	sts	0x0178, r25
 2b0:	80 93 77 01 	sts	0x0177, r24
 2b4:	85 30       	cpi	r24, 0x05	; 5
 2b6:	91 05       	cpc	r25, r1
 2b8:	0c f4       	brge	.+2      	; 0x2bc <compare+0xc6>
 2ba:	aa cf       	rjmp	.-172    	; 0x210 <compare+0x1a>
	if(flag==4) return j ;
	 flag=0;
		
	}
	
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <display_list>:
void display_list(){
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
	lcd_delete();
 2c6:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
	lcd_out(0,0,"first one");
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	48 e7       	ldi	r20, 0x78	; 120
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	lcd_out(1,1,list[0]);
 2d6:	c9 e7       	ldi	r28, 0x79	; 121
 2d8:	d1 e0       	ldi	r29, 0x01	; 1
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	ae 01       	movw	r20, r28
 2e0:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	99 e6       	ldi	r25, 0x69	; 105
 2e8:	a8 e1       	ldi	r26, 0x18	; 24
 2ea:	81 50       	subi	r24, 0x01	; 1
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	a0 40       	sbci	r26, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <display_list+0x28>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <display_list+0x32>
 2f4:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
 2f6:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Clear>
	lcd_out(0,0,"second one");
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	42 e8       	ldi	r20, 0x82	; 130
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	lcd_out(1,1,list[1]);
 306:	ae 01       	movw	r20, r28
 308:	46 5f       	subi	r20, 0xF6	; 246
 30a:	5f 4f       	sbci	r21, 0xFF	; 255
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	99 e6       	ldi	r25, 0x69	; 105
 318:	a8 e1       	ldi	r26, 0x18	; 24
 31a:	81 50       	subi	r24, 0x01	; 1
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	a0 40       	sbci	r26, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <display_list+0x58>
 322:	00 c0       	rjmp	.+0      	; 0x324 <display_list+0x62>
 324:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
 326:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Clear>
	lcd_out(0,0,"third one");
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	4d e8       	ldi	r20, 0x8D	; 141
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	lcd_out(1,1,list[2]);
 336:	ae 01       	movw	r20, r28
 338:	4c 5e       	subi	r20, 0xEC	; 236
 33a:	5f 4f       	sbci	r21, 0xFF	; 255
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	99 e6       	ldi	r25, 0x69	; 105
 348:	a8 e1       	ldi	r26, 0x18	; 24
 34a:	81 50       	subi	r24, 0x01	; 1
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	a0 40       	sbci	r26, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <display_list+0x88>
 352:	00 c0       	rjmp	.+0      	; 0x354 <display_list+0x92>
 354:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
 356:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Clear>
	lcd_out(0,0,"fourth one");
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	47 e9       	ldi	r20, 0x97	; 151
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	lcd_out(1,1,list[3]);
 366:	ae 01       	movw	r20, r28
 368:	42 5e       	subi	r20, 0xE2	; 226
 36a:	5f 4f       	sbci	r21, 0xFF	; 255
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	90 e7       	ldi	r25, 0x70	; 112
 378:	a2 e0       	ldi	r26, 0x02	; 2
 37a:	81 50       	subi	r24, 0x01	; 1
 37c:	90 40       	sbci	r25, 0x00	; 0
 37e:	a0 40       	sbci	r26, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <display_list+0xb8>
 382:	00 c0       	rjmp	.+0      	; 0x384 <display_list+0xc2>
 384:	00 00       	nop
	_delay_ms(100);
	
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <__vector_1>:
	
	num_attend();
	
}

ISR( ISR_INT0_PD2 ){
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
	
	display_list();
 3ae:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display_list>
	
}
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <display_attendance>:
	_delay_ms(100);
	
}
void display_attendance(int var){
	
	switch (var)
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	91 05       	cpc	r25, r1
 3d8:	09 f4       	brne	.+2      	; 0x3dc <display_attendance+0x8>
 3da:	47 c0       	rjmp	.+142    	; 0x46a <display_attendance+0x96>
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	91 05       	cpc	r25, r1
 3e0:	1c f4       	brge	.+6      	; 0x3e8 <display_attendance+0x14>
 3e2:	00 97       	sbiw	r24, 0x00	; 0
 3e4:	51 f0       	breq	.+20     	; 0x3fa <display_attendance+0x26>
 3e6:	e8 c0       	rjmp	.+464    	; 0x5b8 <display_attendance+0x1e4>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	91 05       	cpc	r25, r1
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <display_attendance+0x1c>
 3ee:	75 c0       	rjmp	.+234    	; 0x4da <display_attendance+0x106>
 3f0:	83 30       	cpi	r24, 0x03	; 3
 3f2:	91 05       	cpc	r25, r1
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <display_attendance+0x24>
 3f6:	e0 c0       	rjmp	.+448    	; 0x5b8 <display_attendance+0x1e4>
 3f8:	a8 c0       	rjmp	.+336    	; 0x54a <display_attendance+0x176>
	{
		case 0: lcd_delete(); lcd_out(0,0,"first student");lcd_out(1,1,clinet_code[0]);_delay_ms(500);lcd_delete();
 3fa:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	42 ea       	ldi	r20, 0xA2	; 162
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	42 e3       	ldi	r20, 0x32	; 50
 410:	51 e0       	ldi	r21, 0x01	; 1
 412:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	94 e3       	ldi	r25, 0x34	; 52
 41a:	ac e0       	ldi	r26, 0x0C	; 12
 41c:	81 50       	subi	r24, 0x01	; 1
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	a0 40       	sbci	r26, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <display_attendance+0x48>
 424:	00 c0       	rjmp	.+0      	; 0x426 <display_attendance+0x52>
 426:	00 00       	nop
 428:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
		cnt++; if(cnt==1){
 42c:	80 91 ad 01 	lds	r24, 0x01AD
 430:	90 91 ae 01 	lds	r25, 0x01AE
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	90 93 ae 01 	sts	0x01AE, r25
 43a:	80 93 ad 01 	sts	0x01AD, r24
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	91 05       	cpc	r25, r1
 442:	09 f0       	breq	.+2      	; 0x446 <display_attendance+0x72>
 444:	ca c0       	rjmp	.+404    	; 0x5da <display_attendance+0x206>
 446:	e2 e3       	ldi	r30, 0x32	; 50
 448:	f1 e0       	ldi	r31, 0x01	; 1
 44a:	a9 e7       	ldi	r26, 0x79	; 121
 44c:	b1 e0       	ldi	r27, 0x01	; 1
	lcd_out(0,0,"fourth one");
	lcd_out(1,1,list[3]);
	_delay_ms(100);
	
}
void display_attendance(int var){
 44e:	cf 01       	movw	r24, r30
 450:	0a 96       	adiw	r24, 0x0a	; 10
	switch (var)
	{
		case 0: lcd_delete(); lcd_out(0,0,"first student");lcd_out(1,1,clinet_code[0]);_delay_ms(500);lcd_delete();
		cnt++; if(cnt==1){
			for (i=0;i<sizeof(clinet_code[0]);i++){
                            list[0][i]=clinet_code[0][i];}}break;
 452:	21 91       	ld	r18, Z+
 454:	2d 93       	st	X+, r18
	
	switch (var)
	{
		case 0: lcd_delete(); lcd_out(0,0,"first student");lcd_out(1,1,clinet_code[0]);_delay_ms(500);lcd_delete();
		cnt++; if(cnt==1){
			for (i=0;i<sizeof(clinet_code[0]);i++){
 456:	e8 17       	cp	r30, r24
 458:	f9 07       	cpc	r31, r25
 45a:	d9 f7       	brne	.-10     	; 0x452 <display_attendance+0x7e>
 45c:	8a e0       	ldi	r24, 0x0A	; 10
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	90 93 b4 01 	sts	0x01B4, r25
 464:	80 93 b3 01 	sts	0x01B3, r24
 468:	08 95       	ret
                            list[0][i]=clinet_code[0][i];}}break;
							
		case 1: lcd_delete(); lcd_out(0,0,"second student");lcd_out(1,1,clinet_code[1]);_delay_ms(500);lcd_delete();++cnt2; if(cnt2==1){	
 46a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	40 eb       	ldi	r20, 0xB0	; 176
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	4c e3       	ldi	r20, 0x3C	; 60
 480:	51 e0       	ldi	r21, 0x01	; 1
 482:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	94 e3       	ldi	r25, 0x34	; 52
 48a:	ac e0       	ldi	r26, 0x0C	; 12
 48c:	81 50       	subi	r24, 0x01	; 1
 48e:	90 40       	sbci	r25, 0x00	; 0
 490:	a0 40       	sbci	r26, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <display_attendance+0xb8>
 494:	00 c0       	rjmp	.+0      	; 0x496 <display_attendance+0xc2>
 496:	00 00       	nop
 498:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 49c:	80 91 ab 01 	lds	r24, 0x01AB
 4a0:	90 91 ac 01 	lds	r25, 0x01AC
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	90 93 ac 01 	sts	0x01AC, r25
 4aa:	80 93 ab 01 	sts	0x01AB, r24
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	91 05       	cpc	r25, r1
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <display_attendance+0xe2>
 4b4:	92 c0       	rjmp	.+292    	; 0x5da <display_attendance+0x206>
 4b6:	ec e3       	ldi	r30, 0x3C	; 60
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	a3 e8       	ldi	r26, 0x83	; 131
 4bc:	b1 e0       	ldi	r27, 0x01	; 1
	lcd_out(0,0,"fourth one");
	lcd_out(1,1,list[3]);
	_delay_ms(100);
	
}
void display_attendance(int var){
 4be:	cf 01       	movw	r24, r30
 4c0:	0a 96       	adiw	r24, 0x0a	; 10
			for (i=0;i<sizeof(clinet_code[0]);i++){
                            list[0][i]=clinet_code[0][i];}}break;
							
		case 1: lcd_delete(); lcd_out(0,0,"second student");lcd_out(1,1,clinet_code[1]);_delay_ms(500);lcd_delete();++cnt2; if(cnt2==1){	
			for (i=0;i<sizeof(clinet_code[1]);i++){
		list[1][i]=clinet_code[1][i];}}
 4c2:	21 91       	ld	r18, Z+
 4c4:	2d 93       	st	X+, r18
		cnt++; if(cnt==1){
			for (i=0;i<sizeof(clinet_code[0]);i++){
                            list[0][i]=clinet_code[0][i];}}break;
							
		case 1: lcd_delete(); lcd_out(0,0,"second student");lcd_out(1,1,clinet_code[1]);_delay_ms(500);lcd_delete();++cnt2; if(cnt2==1){	
			for (i=0;i<sizeof(clinet_code[1]);i++){
 4c6:	e8 17       	cp	r30, r24
 4c8:	f9 07       	cpc	r31, r25
 4ca:	d9 f7       	brne	.-10     	; 0x4c2 <display_attendance+0xee>
 4cc:	8a e0       	ldi	r24, 0x0A	; 10
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	90 93 b4 01 	sts	0x01B4, r25
 4d4:	80 93 b3 01 	sts	0x01B3, r24
 4d8:	08 95       	ret
		list[1][i]=clinet_code[1][i];}}
		break;
		
		case 2: lcd_delete(); lcd_out(0,0,"third student");lcd_out(1,1,clinet_code[2]);_delay_ms(500);lcd_delete();++cnt3; 
 4da:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	4f eb       	ldi	r20, 0xBF	; 191
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	46 e4       	ldi	r20, 0x46	; 70
 4f0:	51 e0       	ldi	r21, 0x01	; 1
 4f2:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	94 e3       	ldi	r25, 0x34	; 52
 4fa:	ac e0       	ldi	r26, 0x0C	; 12
 4fc:	81 50       	subi	r24, 0x01	; 1
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	a0 40       	sbci	r26, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <display_attendance+0x128>
 504:	00 c0       	rjmp	.+0      	; 0x506 <display_attendance+0x132>
 506:	00 00       	nop
 508:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 50c:	80 91 bf 01 	lds	r24, 0x01BF
 510:	90 91 c0 01 	lds	r25, 0x01C0
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	90 93 c0 01 	sts	0x01C0, r25
 51a:	80 93 bf 01 	sts	0x01BF, r24
		if(cnt3==1){	for (i=0;i<sizeof(clinet_code[2]);i++){
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	91 05       	cpc	r25, r1
 522:	09 f0       	breq	.+2      	; 0x526 <display_attendance+0x152>
 524:	5a c0       	rjmp	.+180    	; 0x5da <display_attendance+0x206>
 526:	e6 e4       	ldi	r30, 0x46	; 70
 528:	f1 e0       	ldi	r31, 0x01	; 1
 52a:	ad e8       	ldi	r26, 0x8D	; 141
 52c:	b1 e0       	ldi	r27, 0x01	; 1
	lcd_out(0,0,"fourth one");
	lcd_out(1,1,list[3]);
	_delay_ms(100);
	
}
void display_attendance(int var){
 52e:	cf 01       	movw	r24, r30
 530:	0a 96       	adiw	r24, 0x0a	; 10
		list[1][i]=clinet_code[1][i];}}
		break;
		
		case 2: lcd_delete(); lcd_out(0,0,"third student");lcd_out(1,1,clinet_code[2]);_delay_ms(500);lcd_delete();++cnt3; 
		if(cnt3==1){	for (i=0;i<sizeof(clinet_code[2]);i++){
		list[2][i]=clinet_code[2][i];}}
 532:	21 91       	ld	r18, Z+
 534:	2d 93       	st	X+, r18
			for (i=0;i<sizeof(clinet_code[1]);i++){
		list[1][i]=clinet_code[1][i];}}
		break;
		
		case 2: lcd_delete(); lcd_out(0,0,"third student");lcd_out(1,1,clinet_code[2]);_delay_ms(500);lcd_delete();++cnt3; 
		if(cnt3==1){	for (i=0;i<sizeof(clinet_code[2]);i++){
 536:	e8 17       	cp	r30, r24
 538:	f9 07       	cpc	r31, r25
 53a:	d9 f7       	brne	.-10     	; 0x532 <display_attendance+0x15e>
 53c:	8a e0       	ldi	r24, 0x0A	; 10
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	90 93 b4 01 	sts	0x01B4, r25
 544:	80 93 b3 01 	sts	0x01B3, r24
 548:	08 95       	ret
		list[2][i]=clinet_code[2][i];}}
		break;
		
		case 3: lcd_delete(); lcd_out(0,0,"fourth student");lcd_out(1,1,clinet_code[3]);_delay_ms(500);lcd_delete();cnt4++; 
 54a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	4d ec       	ldi	r20, 0xCD	; 205
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	40 e5       	ldi	r20, 0x50	; 80
 560:	51 e0       	ldi	r21, 0x01	; 1
 562:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	94 e3       	ldi	r25, 0x34	; 52
 56a:	ac e0       	ldi	r26, 0x0C	; 12
 56c:	81 50       	subi	r24, 0x01	; 1
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	a0 40       	sbci	r26, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <display_attendance+0x198>
 574:	00 c0       	rjmp	.+0      	; 0x576 <display_attendance+0x1a2>
 576:	00 00       	nop
 578:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 57c:	80 91 c3 01 	lds	r24, 0x01C3
 580:	90 91 c4 01 	lds	r25, 0x01C4
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	90 93 c4 01 	sts	0x01C4, r25
 58a:	80 93 c3 01 	sts	0x01C3, r24
		if(cnt4==1){	for (i=0;i<sizeof(clinet_code[3]);i++){
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	91 05       	cpc	r25, r1
 592:	19 f5       	brne	.+70     	; 0x5da <display_attendance+0x206>
 594:	e0 e5       	ldi	r30, 0x50	; 80
 596:	f1 e0       	ldi	r31, 0x01	; 1
 598:	a7 e9       	ldi	r26, 0x97	; 151
 59a:	b1 e0       	ldi	r27, 0x01	; 1
	lcd_out(0,0,"fourth one");
	lcd_out(1,1,list[3]);
	_delay_ms(100);
	
}
void display_attendance(int var){
 59c:	cf 01       	movw	r24, r30
 59e:	0a 96       	adiw	r24, 0x0a	; 10
		list[2][i]=clinet_code[2][i];}}
		break;
		
		case 3: lcd_delete(); lcd_out(0,0,"fourth student");lcd_out(1,1,clinet_code[3]);_delay_ms(500);lcd_delete();cnt4++; 
		if(cnt4==1){	for (i=0;i<sizeof(clinet_code[3]);i++){
		list[3][i]=clinet_code[3][i];}}break;
 5a0:	21 91       	ld	r18, Z+
 5a2:	2d 93       	st	X+, r18
		if(cnt3==1){	for (i=0;i<sizeof(clinet_code[2]);i++){
		list[2][i]=clinet_code[2][i];}}
		break;
		
		case 3: lcd_delete(); lcd_out(0,0,"fourth student");lcd_out(1,1,clinet_code[3]);_delay_ms(500);lcd_delete();cnt4++; 
		if(cnt4==1){	for (i=0;i<sizeof(clinet_code[3]);i++){
 5a4:	e8 17       	cp	r30, r24
 5a6:	f9 07       	cpc	r31, r25
 5a8:	d9 f7       	brne	.-10     	; 0x5a0 <display_attendance+0x1cc>
 5aa:	8a e0       	ldi	r24, 0x0A	; 10
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	90 93 b4 01 	sts	0x01B4, r25
 5b2:	80 93 b3 01 	sts	0x01B3, r24
 5b6:	08 95       	ret
		list[3][i]=clinet_code[3][i];}}break;
		
		default:lcd_out(0,0,"welcome enter id");_delay_ms(100);lcd_delete();break;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	4c ed       	ldi	r20, 0xDC	; 220
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	90 e7       	ldi	r25, 0x70	; 112
 5c8:	a2 e0       	ldi	r26, 0x02	; 2
 5ca:	81 50       	subi	r24, 0x01	; 1
 5cc:	90 40       	sbci	r25, 0x00	; 0
 5ce:	a0 40       	sbci	r26, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <display_attendance+0x1f6>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <display_attendance+0x200>
 5d4:	00 00       	nop
 5d6:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
 5da:	08 95       	ret

000005dc <intr_init>:
	}
}
	void intr_init(){
			CLR_BIT(DDRD,7);
 5dc:	8f 98       	cbi	0x11, 7	; 17
			CLR_BIT(DDRD,2);
 5de:	8a 98       	cbi	0x11, 2	; 17
			CLR_BIT(DDRB,2);
 5e0:	ba 98       	cbi	0x17, 2	; 23
			SET_BIT(PORTB,2);
 5e2:	c2 9a       	sbi	0x18, 2	; 24
		MCUCR |= (1<<1)|(1<<0); // falling edge
 5e4:	85 b7       	in	r24, 0x35	; 53
 5e6:	83 60       	ori	r24, 0x03	; 3
 5e8:	85 bf       	out	0x35, r24	; 53
		GICR |=(1<<6)|(1<<5); // enable INT0 set pin6
 5ea:	8b b7       	in	r24, 0x3b	; 59
 5ec:	80 66       	ori	r24, 0x60	; 96
 5ee:	8b bf       	out	0x3b, r24	; 59
		SREG |=(1<<7); // set GIE pin7
 5f0:	8f b7       	in	r24, 0x3f	; 63
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	8f bf       	out	0x3f, r24	; 63
	}
 5f6:	08 95       	ret

000005f8 <main>:
	display_list();
	
}
int main(void)
{
	lcd_init();
 5f8:	0e 94 5d 00 	call	0xba	; 0xba <lcd_init>
	UART_INIT();
 5fc:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_INIT>
	intr_init();
 600:	0e 94 ee 02 	call	0x5dc	; 0x5dc <intr_init>
    while(1)
    {
		
		lcd_out(0,0,"please enter id");
 604:	cd ee       	ldi	r28, 0xED	; 237
 606:	d0 e0       	ldi	r29, 0x00	; 0
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	ae 01       	movw	r20, r28
 60e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
      do { Read_val=Read(); 
 612:	0e 94 cf 00 	call	0x19e	; 0x19e <Read>
 616:	28 2f       	mov	r18, r24
 618:	80 93 c1 01 	sts	0x01C1, r24
 61c:	90 93 c2 01 	sts	0x01C2, r25
 620:	8f ec       	ldi	r24, 0xCF	; 207
 622:	97 e0       	ldi	r25, 0x07	; 7
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <main+0x2c>
 628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x32>
 62a:	00 00       	nop
	       _delay_ms(1);
       }while ((strlen(Read_val))!=5);
 62c:	82 2f       	mov	r24, r18
 62e:	90 91 c2 01 	lds	r25, 0x01C2
 632:	e2 2f       	mov	r30, r18
 634:	f9 2f       	mov	r31, r25
 636:	df 01       	movw	r26, r30
 638:	0d 90       	ld	r0, X+
 63a:	00 20       	and	r0, r0
 63c:	e9 f7       	brne	.-6      	; 0x638 <main+0x40>
 63e:	9d 01       	movw	r18, r26
 640:	26 50       	subi	r18, 0x06	; 6
 642:	30 40       	sbci	r19, 0x00	; 0
 644:	2e 17       	cp	r18, r30
 646:	3f 07       	cpc	r19, r31
 648:	21 f7       	brne	.-56     	; 0x612 <main+0x1a>
	   
	    attendance=compare(Read_val);
 64a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <compare>
 64e:	90 93 18 01 	sts	0x0118, r25
 652:	80 93 17 01 	sts	0x0117, r24
	
		display_attendance(attendance);
 656:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <display_attendance>
		
		
    }
 65a:	d6 cf       	rjmp	.-84     	; 0x608 <main+0x10>

0000065c <num_attend>:
		SREG |=(1<<7); // set GIE pin7
	}
	void num_attend(){
		
		static int cntt=0;
		if(cntt==0){
 65c:	80 91 75 01 	lds	r24, 0x0175
 660:	90 91 76 01 	lds	r25, 0x0176
 664:	00 97       	sbiw	r24, 0x00	; 0
 666:	09 f0       	breq	.+2      	; 0x66a <num_attend+0xe>
 668:	93 c0       	rjmp	.+294    	; 0x790 <num_attend+0x134>
			if(cnt==1){find++;}
 66a:	80 91 ad 01 	lds	r24, 0x01AD
 66e:	90 91 ae 01 	lds	r25, 0x01AE
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	91 05       	cpc	r25, r1
 676:	49 f4       	brne	.+18     	; 0x68a <num_attend+0x2e>
 678:	80 91 b5 01 	lds	r24, 0x01B5
 67c:	90 91 b6 01 	lds	r25, 0x01B6
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	90 93 b6 01 	sts	0x01B6, r25
 686:	80 93 b5 01 	sts	0x01B5, r24
				if(cnt2==1){find++;}
 68a:	80 91 ab 01 	lds	r24, 0x01AB
 68e:	90 91 ac 01 	lds	r25, 0x01AC
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	91 05       	cpc	r25, r1
 696:	49 f4       	brne	.+18     	; 0x6aa <num_attend+0x4e>
 698:	80 91 b5 01 	lds	r24, 0x01B5
 69c:	90 91 b6 01 	lds	r25, 0x01B6
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	90 93 b6 01 	sts	0x01B6, r25
 6a6:	80 93 b5 01 	sts	0x01B5, r24
					if(cnt3==1){find++;}
 6aa:	80 91 bf 01 	lds	r24, 0x01BF
 6ae:	90 91 c0 01 	lds	r25, 0x01C0
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	91 05       	cpc	r25, r1
 6b6:	49 f4       	brne	.+18     	; 0x6ca <num_attend+0x6e>
 6b8:	80 91 b5 01 	lds	r24, 0x01B5
 6bc:	90 91 b6 01 	lds	r25, 0x01B6
 6c0:	01 96       	adiw	r24, 0x01	; 1
 6c2:	90 93 b6 01 	sts	0x01B6, r25
 6c6:	80 93 b5 01 	sts	0x01B5, r24
						if(cnt4==1){find++;}
 6ca:	80 91 c3 01 	lds	r24, 0x01C3
 6ce:	90 91 c4 01 	lds	r25, 0x01C4
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	91 05       	cpc	r25, r1
 6d6:	49 f4       	brne	.+18     	; 0x6ea <num_attend+0x8e>
 6d8:	80 91 b5 01 	lds	r24, 0x01B5
 6dc:	90 91 b6 01 	lds	r25, 0x01B6
 6e0:	01 96       	adiw	r24, 0x01	; 1
 6e2:	90 93 b6 01 	sts	0x01B6, r25
 6e6:	80 93 b5 01 	sts	0x01B5, r24
				
			lcd_delete();
 6ea:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
			lcd_out(0,0,"attendance num");
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	4d ef       	ldi	r20, 0xFD	; 253
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
			
			find_lcd=convertData(find);
 6fa:	80 91 b5 01 	lds	r24, 0x01B5
 6fe:	90 91 b6 01 	lds	r25, 0x01B6
 702:	0e 94 a7 00 	call	0x14e	; 0x14e <convertData>
 706:	ac 01       	movw	r20, r24
 708:	90 93 b2 01 	sts	0x01B2, r25
 70c:	80 93 b1 01 	sts	0x01B1, r24
			lcd_out(1,1,find_lcd);
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	61 e0       	ldi	r22, 0x01	; 1
 714:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
 718:	8f ef       	ldi	r24, 0xFF	; 255
 71a:	94 e3       	ldi	r25, 0x34	; 52
 71c:	ac e0       	ldi	r26, 0x0C	; 12
 71e:	81 50       	subi	r24, 0x01	; 1
 720:	90 40       	sbci	r25, 0x00	; 0
 722:	a0 40       	sbci	r26, 0x00	; 0
 724:	e1 f7       	brne	.-8      	; 0x71e <num_attend+0xc2>
 726:	00 c0       	rjmp	.+0      	; 0x728 <num_attend+0xcc>
 728:	00 00       	nop
			_delay_ms(500);
			lcd_delete();
 72a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_delete>
			abss=4-find;
 72e:	20 91 b5 01 	lds	r18, 0x01B5
 732:	30 91 b6 01 	lds	r19, 0x01B6
 736:	84 e0       	ldi	r24, 0x04	; 4
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	82 1b       	sub	r24, r18
 73c:	93 0b       	sbc	r25, r19
 73e:	90 93 c6 01 	sts	0x01C6, r25
 742:	80 93 c5 01 	sts	0x01C5, r24
			abss_lcd=convertData(abss);
 746:	0e 94 a7 00 	call	0x14e	; 0x14e <convertData>
 74a:	90 93 be 01 	sts	0x01BE, r25
 74e:	80 93 bd 01 	sts	0x01BD, r24
			lcd_out(0,0,"absent num");
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	4c e0       	ldi	r20, 0x0C	; 12
 758:	51 e0       	ldi	r21, 0x01	; 1
 75a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
			lcd_out(1,1,abss_lcd);
 75e:	40 91 bd 01 	lds	r20, 0x01BD
 762:	50 91 be 01 	lds	r21, 0x01BE
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
			find=0;
 76e:	10 92 b6 01 	sts	0x01B6, r1
 772:	10 92 b5 01 	sts	0x01B5, r1
			abss=0;
 776:	10 92 c6 01 	sts	0x01C6, r1
 77a:	10 92 c5 01 	sts	0x01C5, r1
			cntt++;
 77e:	80 91 75 01 	lds	r24, 0x0175
 782:	90 91 76 01 	lds	r25, 0x0176
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	90 93 76 01 	sts	0x0176, r25
 78c:	80 93 75 01 	sts	0x0175, r24
 790:	08 95       	ret

00000792 <__vector_3>:
void intr_init();
void display_list();
void 	num_attend();
//----------------------------------

ISR( INT2_vect){
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	11 24       	eor	r1, r1
 79c:	2f 93       	push	r18
 79e:	3f 93       	push	r19
 7a0:	4f 93       	push	r20
 7a2:	5f 93       	push	r21
 7a4:	6f 93       	push	r22
 7a6:	7f 93       	push	r23
 7a8:	8f 93       	push	r24
 7aa:	9f 93       	push	r25
 7ac:	af 93       	push	r26
 7ae:	bf 93       	push	r27
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
	
	num_attend();
 7b4:	0e 94 2e 03 	call	0x65c	; 0x65c <num_attend>
	
}
 7b8:	ff 91       	pop	r31
 7ba:	ef 91       	pop	r30
 7bc:	bf 91       	pop	r27
 7be:	af 91       	pop	r26
 7c0:	9f 91       	pop	r25
 7c2:	8f 91       	pop	r24
 7c4:	7f 91       	pop	r23
 7c6:	6f 91       	pop	r22
 7c8:	5f 91       	pop	r21
 7ca:	4f 91       	pop	r20
 7cc:	3f 91       	pop	r19
 7ce:	2f 91       	pop	r18
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	0f 90       	pop	r0
 7d6:	1f 90       	pop	r1
 7d8:	18 95       	reti

000007da <UART_INIT>:
 */ 
#include "AVR_UART.h"

void UART_INIT()
{
UBRRL = (uint8_t)(MYUBRR) ;    //send the low  8 bits of the UBRR
 7da:	83 e3       	ldi	r24, 0x33	; 51
 7dc:	89 b9       	out	0x09, r24	; 9
UBRRH = (uint8_t)(MYUBRR>>8);//send the high 4 bits of the UBRR
 7de:	10 bc       	out	0x20, r1	; 32
UCSRB |=((1<<4)|(1<<3));     //Enable transmit and enable RXENn TXENn
 7e0:	8a b1       	in	r24, 0x0a	; 10
 7e2:	88 61       	ori	r24, 0x18	; 24
 7e4:	8a b9       	out	0x0a, r24	; 10
UCSRC |=((1<<2)|(1<<1));     //Frame with 8 bit data , 1 stop bit, no parity UCSZn1 UCSZn0 , Asynchornous mode 
 7e6:	80 b5       	in	r24, 0x20	; 32
 7e8:	86 60       	ori	r24, 0x06	; 6
 7ea:	80 bd       	out	0x20, r24	; 32
}
 7ec:	08 95       	ret

000007ee <UART_Transmit>:


void UART_Transmit(uint8_t data)
{  while( !(UCSRA & (1<<5)) ) ;// wait until the buffer is empty UDREn
 7ee:	5d 9b       	sbis	0x0b, 5	; 11
 7f0:	fe cf       	rjmp	.-4      	; 0x7ee <UART_Transmit>
	UDR=data;
 7f2:	8c b9       	out	0x0c, r24	; 12
}
 7f4:	08 95       	ret

000007f6 <UART_Read>:

uint8_t UART_Read()
{ while( !(UCSRA & (1<<7)) ) ;//wait until the receiving complete RXCn
 7f6:	5f 9b       	sbis	0x0b, 7	; 11
 7f8:	fe cf       	rjmp	.-4      	; 0x7f6 <UART_Read>
	return UDR;
 7fa:	8c b1       	in	r24, 0x0c	; 12
}
 7fc:	08 95       	ret

000007fe <UART_Transmit_string>:

void UART_Transmit_string (char * str)
{
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	8c 01       	movw	r16, r24
	unsigned char i =0 ;
	 while(str[i]!=0)
 806:	fc 01       	movw	r30, r24
 808:	80 81       	ld	r24, Z
 80a:	88 23       	and	r24, r24
 80c:	51 f0       	breq	.+20     	; 0x822 <UART_Transmit_string+0x24>
	return UDR;
}

void UART_Transmit_string (char * str)
{
	unsigned char i =0 ;
 80e:	c0 e0       	ldi	r28, 0x00	; 0
	 while(str[i]!=0)
	    {UART_Transmit(str[i]) ; i++;}
 810:	0e 94 f7 03 	call	0x7ee	; 0x7ee <UART_Transmit>
 814:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_Transmit_string (char * str)
{
	unsigned char i =0 ;
	 while(str[i]!=0)
 816:	f8 01       	movw	r30, r16
 818:	ec 0f       	add	r30, r28
 81a:	f1 1d       	adc	r31, r1
 81c:	80 81       	ld	r24, Z
 81e:	88 23       	and	r24, r24
 820:	b9 f7       	brne	.-18     	; 0x810 <UART_Transmit_string+0x12>
	    {UART_Transmit(str[i]) ; i++;}
 822:	cf 91       	pop	r28
 824:	1f 91       	pop	r17
 826:	0f 91       	pop	r16
 828:	08 95       	ret

0000082a <__udivmodhi4>:
 82a:	aa 1b       	sub	r26, r26
 82c:	bb 1b       	sub	r27, r27
 82e:	51 e1       	ldi	r21, 0x11	; 17
 830:	07 c0       	rjmp	.+14     	; 0x840 <__udivmodhi4_ep>

00000832 <__udivmodhi4_loop>:
 832:	aa 1f       	adc	r26, r26
 834:	bb 1f       	adc	r27, r27
 836:	a6 17       	cp	r26, r22
 838:	b7 07       	cpc	r27, r23
 83a:	10 f0       	brcs	.+4      	; 0x840 <__udivmodhi4_ep>
 83c:	a6 1b       	sub	r26, r22
 83e:	b7 0b       	sbc	r27, r23

00000840 <__udivmodhi4_ep>:
 840:	88 1f       	adc	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	5a 95       	dec	r21
 846:	a9 f7       	brne	.-22     	; 0x832 <__udivmodhi4_loop>
 848:	80 95       	com	r24
 84a:	90 95       	com	r25
 84c:	bc 01       	movw	r22, r24
 84e:	cd 01       	movw	r24, r26
 850:	08 95       	ret

00000852 <_exit>:
 852:	f8 94       	cli

00000854 <__stop_program>:
 854:	ff cf       	rjmp	.-2      	; 0x854 <__stop_program>
