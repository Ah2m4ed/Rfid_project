
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  00000746  000007da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000057  00800112  00800112  0000088c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e8e  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000491  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ba  00000000  00000000  000023df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00002b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000295  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000056c  00000000  00000000  000030d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 31       	cpi	r26, 0x12	; 18
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a2 e1       	ldi	r26, 0x12	; 18
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a8 02 	call	0x550	; 0x550 <main>
  8a:	0c 94 a1 03 	jmp	0x742	; 0x742 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_delete>:
			void intr_init(){
					MCUCR |= (1<<1)|(1<<0); // falling edge
					GICR |=(1<<6)|(1<<5); // enable INT0 set pin6
					SREG |=(1<<7); // set GIE pin7
			}
			void lcd_delete(){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
				lcd_out(0,0,"                    ");
  96:	c0 e6       	ldi	r28, 0x60	; 96
  98:	d0 e0       	ldi	r29, 0x00	; 0
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	ae 01       	movw	r20, r28
  a0:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
					lcd_out(0,1,"                    ");
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	ae 01       	movw	r20, r28
  aa:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
				
				
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <__vector_3>:
ISR( ISR_INT0_PD2 ){
	
  display_list();
  
}
ISR(INT2_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	static int cnt=0;
	if(cnt==0){
  da:	80 91 14 01 	lds	r24, 0x0114
  de:	90 91 15 01 	lds	r25, 0x0115
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	09 f0       	breq	.+2      	; 0xe8 <__vector_3+0x34>
  e6:	4b c0       	rjmp	.+150    	; 0x17e <__vector_3+0xca>
		lcd_delete();
  e8:	c9 e4       	ldi	r28, 0x49	; 73
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	fe 01       	movw	r30, r28
  ee:	09 95       	icall
		  lcd_out(0,0,"attendance num");
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	45 e7       	ldi	r20, 0x75	; 117
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
		  
		  find_lcd=convertData(find);
  fc:	80 91 5f 01 	lds	r24, 0x015F
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 4e 03 	call	0x69c	; 0x69c <convertData>
 106:	ac 01       	movw	r20, r24
 108:	90 93 5c 01 	sts	0x015C, r25
 10c:	80 93 5b 01 	sts	0x015B, r24
		  lcd_out(1,1,find_lcd);
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	94 e3       	ldi	r25, 0x34	; 52
 11c:	ac e0       	ldi	r26, 0x0C	; 12
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	a0 40       	sbci	r26, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <__vector_3+0x6a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <__vector_3+0x74>
 128:	00 00       	nop
		  _delay_ms(500);
			lcd_delete();
 12a:	fe 01       	movw	r30, r28
 12c:	09 95       	icall
		  abss=4-find;
 12e:	90 91 5f 01 	lds	r25, 0x015F
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	89 1b       	sub	r24, r25
 136:	80 93 68 01 	sts	0x0168, r24
		  abss_lcd=convertData(abss);
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 4e 03 	call	0x69c	; 0x69c <convertData>
 140:	90 93 67 01 	sts	0x0167, r25
 144:	80 93 66 01 	sts	0x0166, r24
		  lcd_out(0,0,"absent num");
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	44 e8       	ldi	r20, 0x84	; 132
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
		  lcd_out(1,1,abss_lcd);
 154:	40 91 66 01 	lds	r20, 0x0166
 158:	50 91 67 01 	lds	r21, 0x0167
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
		  find=0;
 164:	10 92 5f 01 	sts	0x015F, r1
		  abss=0;
 168:	10 92 68 01 	sts	0x0168, r1
		  cnt++;}
 16c:	80 91 14 01 	lds	r24, 0x0114
 170:	90 91 15 01 	lds	r25, 0x0115
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 15 01 	sts	0x0115, r25
 17a:	80 93 14 01 	sts	0x0114, r24
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <display_list>:
	
		
 
}

void display_list(){
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
		lcd_delete();
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_delete>
		  lcd_out(0,0,"first one");
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	4f e8       	ldi	r20, 0x8F	; 143
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
		  lcd_out(1,1,list[0]);
 1b8:	c9 e2       	ldi	r28, 0x29	; 41
 1ba:	d1 e0       	ldi	r29, 0x01	; 1
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	ae 01       	movw	r20, r28
 1c2:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	99 e6       	ldi	r25, 0x69	; 105
 1ca:	a8 e1       	ldi	r26, 0x18	; 24
 1cc:	81 50       	subi	r24, 0x01	; 1
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	a0 40       	sbci	r26, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <display_list+0x28>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <display_list+0x32>
 1d6:	00 00       	nop
		  _delay_ms(1000);
		  LCD_Clear();
 1d8:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_Clear>
		  lcd_out(0,0,"second one");
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	49 e9       	ldi	r20, 0x99	; 153
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
		  lcd_out(1,1,list[1]);
 1e8:	ae 01       	movw	r20, r28
 1ea:	46 5f       	subi	r20, 0xF6	; 246
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	99 e6       	ldi	r25, 0x69	; 105
 1fa:	a8 e1       	ldi	r26, 0x18	; 24
 1fc:	81 50       	subi	r24, 0x01	; 1
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	a0 40       	sbci	r26, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <display_list+0x58>
 204:	00 c0       	rjmp	.+0      	; 0x206 <display_list+0x62>
 206:	00 00       	nop
		  _delay_ms(1000);
		  LCD_Clear();
 208:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_Clear>
		  lcd_out(0,0,"third one");
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	44 ea       	ldi	r20, 0xA4	; 164
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
		  lcd_out(1,1,list[2]);
 218:	ae 01       	movw	r20, r28
 21a:	4c 5e       	subi	r20, 0xEC	; 236
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	99 e6       	ldi	r25, 0x69	; 105
 22a:	a8 e1       	ldi	r26, 0x18	; 24
 22c:	81 50       	subi	r24, 0x01	; 1
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	a0 40       	sbci	r26, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <display_list+0x88>
 234:	00 c0       	rjmp	.+0      	; 0x236 <display_list+0x92>
 236:	00 00       	nop
		  _delay_ms(1000);
		  LCD_Clear();
 238:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_Clear>
		  lcd_out(0,0,"fourth one");
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	4e ea       	ldi	r20, 0xAE	; 174
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
		  lcd_out(1,1,list[3]);
 248:	ae 01       	movw	r20, r28
 24a:	42 5e       	subi	r20, 0xE2	; 226
 24c:	5f 4f       	sbci	r21, 0xFF	; 255
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	90 e7       	ldi	r25, 0x70	; 112
 25a:	a2 e0       	ldi	r26, 0x02	; 2
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	a0 40       	sbci	r26, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <display_list+0xb8>
 264:	00 c0       	rjmp	.+0      	; 0x266 <display_list+0xc2>
 266:	00 00       	nop
		  _delay_ms(100);
	
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <__vector_1>:
void display_list();
void intr_init();
#define    ISR_INT0_PD2    INT0_vect


ISR( ISR_INT0_PD2 ){
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	
  display_list();
 290:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <display_list>
  
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <attendance_1>:
		  lcd_out(0,0,"fourth one");
		  lcd_out(1,1,list[3]);
		  _delay_ms(100);
	
}
void attendance_1(){
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	90 e7       	ldi	r25, 0x70	; 112
 2be:	a2 e0       	ldi	r26, 0x02	; 2
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	a0 40       	sbci	r26, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <attendance_1+0xa>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <attendance_1+0x14>
 2ca:	00 00       	nop
	 _delay_ms(100);
		lcd_delete();
 2cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_delete>
	flag=0;
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	e0 e6       	ldi	r30, 0x60	; 96
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	a1 ec       	ldi	r26, 0xC1	; 193
 2da:	b0 e0       	ldi	r27, 0x00	; 0
		  lcd_out(0,0,"fourth one");
		  lcd_out(1,1,list[3]);
		  _delay_ms(100);
	
}
void attendance_1(){
 2dc:	cf 01       	movw	r24, r30
 2de:	05 96       	adiw	r24, 0x05	; 5
	 _delay_ms(100);
		lcd_delete();
	flag=0;
		for (i=0;i<5;i++)
		{
			if(code_recv[i]==id_code[0][i])
 2e0:	51 91       	ld	r21, Z+
 2e2:	4d 91       	ld	r20, X+
 2e4:	54 17       	cp	r21, r20
 2e6:	11 f4       	brne	.+4      	; 0x2ec <attendance_1+0x36>
			{
				flag++;
 2e8:	2f 5f       	subi	r18, 0xFF	; 255
 2ea:	3f 4f       	sbci	r19, 0xFF	; 255
}
void attendance_1(){
	 _delay_ms(100);
		lcd_delete();
	flag=0;
		for (i=0;i<5;i++)
 2ec:	e8 17       	cp	r30, r24
 2ee:	f9 07       	cpc	r31, r25
 2f0:	b9 f7       	brne	.-18     	; 0x2e0 <attendance_1+0x2a>
 2f2:	30 93 13 01 	sts	0x0113, r19
 2f6:	20 93 12 01 	sts	0x0112, r18
 2fa:	85 e0       	ldi	r24, 0x05	; 5
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	90 93 5e 01 	sts	0x015E, r25
 302:	80 93 5d 01 	sts	0x015D, r24
		{
			if(code_recv[i]==id_code[0][i])
			{
				flag++;
			}}
			if (flag==4 &&find==0){
 306:	24 30       	cpi	r18, 0x04	; 4
 308:	31 05       	cpc	r19, r1
 30a:	f1 f4       	brne	.+60     	; 0x348 <attendance_1+0x92>
 30c:	80 91 5f 01 	lds	r24, 0x015F
 310:	88 23       	and	r24, r24
 312:	d1 f4       	brne	.+52     	; 0x348 <attendance_1+0x92>
				lcd_out(0,1,clinet_code[0]);
 314:	ca ed       	ldi	r28, 0xDA	; 218
 316:	d0 e0       	ldi	r29, 0x00	; 0
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	ae 01       	movw	r20, r28
 31c:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
 320:	fe 01       	movw	r30, r28
 322:	a9 e2       	ldi	r26, 0x29	; 41
 324:	b1 e0       	ldi	r27, 0x01	; 1
		  lcd_out(0,0,"fourth one");
		  lcd_out(1,1,list[3]);
		  _delay_ms(100);
	
}
void attendance_1(){
 326:	2a 96       	adiw	r28, 0x0a	; 10
				flag++;
			}}
			if (flag==4 &&find==0){
				lcd_out(0,1,clinet_code[0]);
				for (i=0;i<sizeof(clinet_code[0]);i++){
				list[0][i]=clinet_code[0][i];}
 328:	81 91       	ld	r24, Z+
 32a:	8d 93       	st	X+, r24
			{
				flag++;
			}}
			if (flag==4 &&find==0){
				lcd_out(0,1,clinet_code[0]);
				for (i=0;i<sizeof(clinet_code[0]);i++){
 32c:	ec 17       	cp	r30, r28
 32e:	fd 07       	cpc	r31, r29
 330:	d9 f7       	brne	.-10     	; 0x328 <attendance_1+0x72>
 332:	8a e0       	ldi	r24, 0x0A	; 10
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	90 93 5e 01 	sts	0x015E, r25
 33a:	80 93 5d 01 	sts	0x015D, r24
				list[0][i]=clinet_code[0][i];}
			find++;
 33e:	80 91 5f 01 	lds	r24, 0x015F
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 5f 01 	sts	0x015F, r24
			}
			flag=0;
 348:	10 92 13 01 	sts	0x0113, r1
 34c:	10 92 12 01 	sts	0x0112, r1
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <attendance_2>:
void attendance_2(){
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	90 e7       	ldi	r25, 0x70	; 112
 35e:	a2 e0       	ldi	r26, 0x02	; 2
 360:	81 50       	subi	r24, 0x01	; 1
 362:	90 40       	sbci	r25, 0x00	; 0
 364:	a0 40       	sbci	r26, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <attendance_2+0xa>
 368:	00 c0       	rjmp	.+0      	; 0x36a <attendance_2+0x14>
 36a:	00 00       	nop
	_delay_ms(100);
		lcd_delete();
 36c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_delete>
	flag=0;
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	e0 e6       	ldi	r30, 0x60	; 96
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	a6 ec       	ldi	r26, 0xC6	; 198
 37a:	b0 e0       	ldi	r27, 0x00	; 0
				list[0][i]=clinet_code[0][i];}
			find++;
			}
			flag=0;
}
void attendance_2(){
 37c:	cf 01       	movw	r24, r30
 37e:	05 96       	adiw	r24, 0x05	; 5
	_delay_ms(100);
		lcd_delete();
	flag=0;
	for (i=0;i<5;i++)
	{
		if(code_recv[i]==id_code[1][i])
 380:	51 91       	ld	r21, Z+
 382:	4d 91       	ld	r20, X+
 384:	54 17       	cp	r21, r20
 386:	11 f4       	brne	.+4      	; 0x38c <attendance_2+0x36>
		{
			flag++;
 388:	2f 5f       	subi	r18, 0xFF	; 255
 38a:	3f 4f       	sbci	r19, 0xFF	; 255
}
void attendance_2(){
	_delay_ms(100);
		lcd_delete();
	flag=0;
	for (i=0;i<5;i++)
 38c:	e8 17       	cp	r30, r24
 38e:	f9 07       	cpc	r31, r25
 390:	b9 f7       	brne	.-18     	; 0x380 <attendance_2+0x2a>
 392:	30 93 13 01 	sts	0x0113, r19
 396:	20 93 12 01 	sts	0x0112, r18
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	90 93 5e 01 	sts	0x015E, r25
 3a2:	80 93 5d 01 	sts	0x015D, r24
	{
		if(code_recv[i]==id_code[1][i])
		{
			flag++;
		}}
		if (flag==4&&find==1){
 3a6:	24 30       	cpi	r18, 0x04	; 4
 3a8:	31 05       	cpc	r19, r1
 3aa:	f9 f4       	brne	.+62     	; 0x3ea <attendance_2+0x94>
 3ac:	80 91 5f 01 	lds	r24, 0x015F
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	d9 f4       	brne	.+54     	; 0x3ea <attendance_2+0x94>
			lcd_out(0,1,clinet_code[1]);
 3b4:	c4 ee       	ldi	r28, 0xE4	; 228
 3b6:	d0 e0       	ldi	r29, 0x00	; 0
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	ae 01       	movw	r20, r28
 3be:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
 3c2:	fe 01       	movw	r30, r28
 3c4:	a3 e3       	ldi	r26, 0x33	; 51
 3c6:	b1 e0       	ldi	r27, 0x01	; 1
				list[0][i]=clinet_code[0][i];}
			find++;
			}
			flag=0;
}
void attendance_2(){
 3c8:	2a 96       	adiw	r28, 0x0a	; 10
			flag++;
		}}
		if (flag==4&&find==1){
			lcd_out(0,1,clinet_code[1]);
			for (i=0;i<sizeof(clinet_code[1]);i++){
			list[1][i]=clinet_code[1][i];}
 3ca:	81 91       	ld	r24, Z+
 3cc:	8d 93       	st	X+, r24
		{
			flag++;
		}}
		if (flag==4&&find==1){
			lcd_out(0,1,clinet_code[1]);
			for (i=0;i<sizeof(clinet_code[1]);i++){
 3ce:	ec 17       	cp	r30, r28
 3d0:	fd 07       	cpc	r31, r29
 3d2:	d9 f7       	brne	.-10     	; 0x3ca <attendance_2+0x74>
 3d4:	8a e0       	ldi	r24, 0x0A	; 10
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	90 93 5e 01 	sts	0x015E, r25
 3dc:	80 93 5d 01 	sts	0x015D, r24
			list[1][i]=clinet_code[1][i];}
		find++;
 3e0:	80 91 5f 01 	lds	r24, 0x015F
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	80 93 5f 01 	sts	0x015F, r24
		}flag=0;
 3ea:	10 92 13 01 	sts	0x0113, r1
 3ee:	10 92 12 01 	sts	0x0112, r1
	}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <attendance_3>:
	void attendance_3(){
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	90 e7       	ldi	r25, 0x70	; 112
 400:	a2 e0       	ldi	r26, 0x02	; 2
 402:	81 50       	subi	r24, 0x01	; 1
 404:	90 40       	sbci	r25, 0x00	; 0
 406:	a0 40       	sbci	r26, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <attendance_3+0xa>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <attendance_3+0x14>
 40c:	00 00       	nop
		_delay_ms(100);
			lcd_delete();
 40e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_delete>
		flag=0;
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	e0 e6       	ldi	r30, 0x60	; 96
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	ab ec       	ldi	r26, 0xCB	; 203
 41c:	b0 e0       	ldi	r27, 0x00	; 0
			for (i=0;i<sizeof(clinet_code[1]);i++){
			list[1][i]=clinet_code[1][i];}
		find++;
		}flag=0;
	}
	void attendance_3(){
 41e:	cf 01       	movw	r24, r30
 420:	05 96       	adiw	r24, 0x05	; 5
		_delay_ms(100);
			lcd_delete();
		flag=0;
		for (i=0;i<5;i++)
		{
			if(code_recv[i]==id_code[2][i])
 422:	51 91       	ld	r21, Z+
 424:	4d 91       	ld	r20, X+
 426:	54 17       	cp	r21, r20
 428:	11 f4       	brne	.+4      	; 0x42e <attendance_3+0x36>
			{
				flag++;
 42a:	2f 5f       	subi	r18, 0xFF	; 255
 42c:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	void attendance_3(){
		_delay_ms(100);
			lcd_delete();
		flag=0;
		for (i=0;i<5;i++)
 42e:	e8 17       	cp	r30, r24
 430:	f9 07       	cpc	r31, r25
 432:	b9 f7       	brne	.-18     	; 0x422 <attendance_3+0x2a>
 434:	30 93 13 01 	sts	0x0113, r19
 438:	20 93 12 01 	sts	0x0112, r18
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	90 93 5e 01 	sts	0x015E, r25
 444:	80 93 5d 01 	sts	0x015D, r24
		{
			if(code_recv[i]==id_code[2][i])
			{
				flag++;
			}}
			if (flag==4&&find==2){
 448:	24 30       	cpi	r18, 0x04	; 4
 44a:	31 05       	cpc	r19, r1
 44c:	f9 f4       	brne	.+62     	; 0x48c <attendance_3+0x94>
 44e:	80 91 5f 01 	lds	r24, 0x015F
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	d9 f4       	brne	.+54     	; 0x48c <attendance_3+0x94>
				lcd_out(0,1,clinet_code[2]);
 456:	ce ee       	ldi	r28, 0xEE	; 238
 458:	d0 e0       	ldi	r29, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	ae 01       	movw	r20, r28
 460:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
 464:	fe 01       	movw	r30, r28
 466:	ad e3       	ldi	r26, 0x3D	; 61
 468:	b1 e0       	ldi	r27, 0x01	; 1
			for (i=0;i<sizeof(clinet_code[1]);i++){
			list[1][i]=clinet_code[1][i];}
		find++;
		}flag=0;
	}
	void attendance_3(){
 46a:	2a 96       	adiw	r28, 0x0a	; 10
				flag++;
			}}
			if (flag==4&&find==2){
				lcd_out(0,1,clinet_code[2]);
				for (i=0;i<sizeof(clinet_code[2]);i++){
				list[2][i]=clinet_code[2][i];}
 46c:	81 91       	ld	r24, Z+
 46e:	8d 93       	st	X+, r24
			{
				flag++;
			}}
			if (flag==4&&find==2){
				lcd_out(0,1,clinet_code[2]);
				for (i=0;i<sizeof(clinet_code[2]);i++){
 470:	ec 17       	cp	r30, r28
 472:	fd 07       	cpc	r31, r29
 474:	d9 f7       	brne	.-10     	; 0x46c <attendance_3+0x74>
 476:	8a e0       	ldi	r24, 0x0A	; 10
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	90 93 5e 01 	sts	0x015E, r25
 47e:	80 93 5d 01 	sts	0x015D, r24
				list[2][i]=clinet_code[2][i];}
			find++;
 482:	80 91 5f 01 	lds	r24, 0x015F
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	80 93 5f 01 	sts	0x015F, r24
			}flag=0;
 48c:	10 92 13 01 	sts	0x0113, r1
 490:	10 92 12 01 	sts	0x0112, r1
		}
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <attendance_4>:
		void attendance_4(){
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	90 e7       	ldi	r25, 0x70	; 112
 4a2:	a2 e0       	ldi	r26, 0x02	; 2
 4a4:	81 50       	subi	r24, 0x01	; 1
 4a6:	90 40       	sbci	r25, 0x00	; 0
 4a8:	a0 40       	sbci	r26, 0x00	; 0
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <attendance_4+0xa>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <attendance_4+0x14>
 4ae:	00 00       	nop
			_delay_ms(100);
			lcd_delete();
 4b0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_delete>
			flag=0;
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	e0 e6       	ldi	r30, 0x60	; 96
 4ba:	f1 e0       	ldi	r31, 0x01	; 1
 4bc:	a0 ed       	ldi	r26, 0xD0	; 208
 4be:	b0 e0       	ldi	r27, 0x00	; 0
				for (i=0;i<sizeof(clinet_code[2]);i++){
				list[2][i]=clinet_code[2][i];}
			find++;
			}flag=0;
		}
		void attendance_4(){
 4c0:	cf 01       	movw	r24, r30
 4c2:	05 96       	adiw	r24, 0x05	; 5
			_delay_ms(100);
			lcd_delete();
			flag=0;
			for (i=0;i<5;i++)
			{
				if(code_recv[i]==id_code[3][i])
 4c4:	51 91       	ld	r21, Z+
 4c6:	4d 91       	ld	r20, X+
 4c8:	54 17       	cp	r21, r20
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <attendance_4+0x36>
				{
					flag++;
 4cc:	2f 5f       	subi	r18, 0xFF	; 255
 4ce:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		void attendance_4(){
			_delay_ms(100);
			lcd_delete();
			flag=0;
			for (i=0;i<5;i++)
 4d0:	e8 17       	cp	r30, r24
 4d2:	f9 07       	cpc	r31, r25
 4d4:	b9 f7       	brne	.-18     	; 0x4c4 <attendance_4+0x2a>
 4d6:	30 93 13 01 	sts	0x0113, r19
 4da:	20 93 12 01 	sts	0x0112, r18
 4de:	85 e0       	ldi	r24, 0x05	; 5
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	90 93 5e 01 	sts	0x015E, r25
 4e6:	80 93 5d 01 	sts	0x015D, r24
			{
				if(code_recv[i]==id_code[3][i])
				{
					flag++;
				}}
				if (flag==4&&find==3){
 4ea:	24 30       	cpi	r18, 0x04	; 4
 4ec:	31 05       	cpc	r19, r1
 4ee:	f9 f4       	brne	.+62     	; 0x52e <attendance_4+0x94>
 4f0:	80 91 5f 01 	lds	r24, 0x015F
 4f4:	83 30       	cpi	r24, 0x03	; 3
 4f6:	d9 f4       	brne	.+54     	; 0x52e <attendance_4+0x94>
					lcd_out(0,1,clinet_code[3]);
 4f8:	c8 ef       	ldi	r28, 0xF8	; 248
 4fa:	d0 e0       	ldi	r29, 0x00	; 0
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	ae 01       	movw	r20, r28
 502:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>
 506:	fe 01       	movw	r30, r28
 508:	a7 e4       	ldi	r26, 0x47	; 71
 50a:	b1 e0       	ldi	r27, 0x01	; 1
				for (i=0;i<sizeof(clinet_code[2]);i++){
				list[2][i]=clinet_code[2][i];}
			find++;
			}flag=0;
		}
		void attendance_4(){
 50c:	2a 96       	adiw	r28, 0x0a	; 10
					flag++;
				}}
				if (flag==4&&find==3){
					lcd_out(0,1,clinet_code[3]);
				for (i=0;i<sizeof(clinet_code[3]);i++){
				list[3][i]=clinet_code[3][i];}
 50e:	81 91       	ld	r24, Z+
 510:	8d 93       	st	X+, r24
				{
					flag++;
				}}
				if (flag==4&&find==3){
					lcd_out(0,1,clinet_code[3]);
				for (i=0;i<sizeof(clinet_code[3]);i++){
 512:	ec 17       	cp	r30, r28
 514:	fd 07       	cpc	r31, r29
 516:	d9 f7       	brne	.-10     	; 0x50e <attendance_4+0x74>
 518:	8a e0       	ldi	r24, 0x0A	; 10
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	90 93 5e 01 	sts	0x015E, r25
 520:	80 93 5d 01 	sts	0x015D, r24
				list[3][i]=clinet_code[3][i];}
				find++;
 524:	80 91 5f 01 	lds	r24, 0x015F
 528:	8f 5f       	subi	r24, 0xFF	; 255
 52a:	80 93 5f 01 	sts	0x015F, r24
				}flag=0;
 52e:	10 92 13 01 	sts	0x0113, r1
 532:	10 92 12 01 	sts	0x0112, r1
				  
			}
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <intr_init>:
			void intr_init(){
					MCUCR |= (1<<1)|(1<<0); // falling edge
 53c:	85 b7       	in	r24, 0x35	; 53
 53e:	83 60       	ori	r24, 0x03	; 3
 540:	85 bf       	out	0x35, r24	; 53
					GICR |=(1<<6)|(1<<5); // enable INT0 set pin6
 542:	8b b7       	in	r24, 0x3b	; 59
 544:	80 66       	ori	r24, 0x60	; 96
 546:	8b bf       	out	0x3b, r24	; 59
					SREG |=(1<<7); // set GIE pin7
 548:	8f b7       	in	r24, 0x3f	; 63
 54a:	80 68       	ori	r24, 0x80	; 128
 54c:	8f bf       	out	0x3f, r24	; 63
			}
 54e:	08 95       	ret

00000550 <main>:
		  abss=0;
		  cnt++;}
}
int main(void)
{
	lcd_init();
 550:	0e 94 04 03 	call	0x608	; 0x608 <lcd_init>
	UART_INIT();
 554:	0e 94 65 03 	call	0x6ca	; 0x6ca <UART_INIT>
	
	CLR_BIT(DDRD,7);
 558:	8f 98       	cbi	0x11, 7	; 17
	CLR_BIT(DDRD,2);
 55a:	8a 98       	cbi	0x11, 2	; 17
		CLR_BIT(DDRB,2);
 55c:	ba 98       	cbi	0x17, 2	; 23
	SET_BIT(PORTB,2);
 55e:	c2 9a       	sbi	0x18, 2	; 24
 intr_init();
 560:	0e 94 9e 02 	call	0x53c	; 0x53c <intr_init>
    while(1)
    {
	start :
		j=0;flag =0;

lcd_out(1,1,"ener ID");
 564:	0f 2e       	mov	r0, r31
 566:	f9 eb       	ldi	r31, 0xB9	; 185
 568:	ef 2e       	mov	r14, r31
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	ff 2e       	mov	r15, r31
 56e:	f0 2d       	mov	r31, r0

		for (i=0;i<5;i++)
		{ code_recv[i]=UART_Read();}
 570:	00 e6       	ldi	r16, 0x60	; 96
 572:	11 e0       	ldi	r17, 0x01	; 1
	SET_BIT(PORTB,2);
 intr_init();
    while(1)
    {
	start :
		j=0;flag =0;
 574:	10 92 28 01 	sts	0x0128, r1
 578:	10 92 27 01 	sts	0x0127, r1
 57c:	10 92 13 01 	sts	0x0113, r1
 580:	10 92 12 01 	sts	0x0112, r1

lcd_out(1,1,"ener ID");
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	a7 01       	movw	r20, r14
 58a:	0e 94 43 03 	call	0x686	; 0x686 <lcd_out>

		for (i=0;i<5;i++)
 58e:	10 92 5e 01 	sts	0x015E, r1
 592:	10 92 5d 01 	sts	0x015D, r1
 596:	c0 e0       	ldi	r28, 0x00	; 0
 598:	d0 e0       	ldi	r29, 0x00	; 0
		{ code_recv[i]=UART_Read();}
 59a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <UART_Read>
 59e:	c0 0f       	add	r28, r16
 5a0:	d1 1f       	adc	r29, r17
 5a2:	88 83       	st	Y, r24
	start :
		j=0;flag =0;

lcd_out(1,1,"ener ID");

		for (i=0;i<5;i++)
 5a4:	c0 91 5d 01 	lds	r28, 0x015D
 5a8:	d0 91 5e 01 	lds	r29, 0x015E
 5ac:	21 96       	adiw	r28, 0x01	; 1
 5ae:	d0 93 5e 01 	sts	0x015E, r29
 5b2:	c0 93 5d 01 	sts	0x015D, r28
 5b6:	c5 30       	cpi	r28, 0x05	; 5
 5b8:	d1 05       	cpc	r29, r1
 5ba:	7c f3       	brlt	.-34     	; 0x59a <main+0x4a>
		{ code_recv[i]=UART_Read();}
			if((strlen(code_recv)!=5)){goto start;} 
 5bc:	f8 01       	movw	r30, r16
 5be:	01 90       	ld	r0, Z+
 5c0:	00 20       	and	r0, r0
 5c2:	e9 f7       	brne	.-6      	; 0x5be <main+0x6e>
 5c4:	cf 01       	movw	r24, r30
 5c6:	06 97       	sbiw	r24, 0x06	; 6
 5c8:	80 17       	cp	r24, r16
 5ca:	91 07       	cpc	r25, r17
 5cc:	99 f6       	brne	.-90     	; 0x574 <main+0x24>

			 	attendance_1();	
 5ce:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <attendance_1>
				 attendance_2();
 5d2:	0e 94 ab 01 	call	0x356	; 0x356 <attendance_2>
				  attendance_3();
 5d6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <attendance_3>
				   attendance_4();	
 5da:	0e 94 4d 02 	call	0x49a	; 0x49a <attendance_4>
				 /*if(flag!=4)
				 {LCD_Clear();lcd_out(1,1,"tryagin");}*/
				   
				 
				   }				
 5de:	ca cf       	rjmp	.-108    	; 0x574 <main+0x24>

000005e0 <lcd_send_command>:
#include <avr/io.h>
#include "macros.h"
#include <avr/delay.h>
#include <util/delay.h>
void lcd_send_command(uint8_t cmd ){
	PORT_data =cmd;
 5e0:	85 bb       	out	0x15, r24	; 21
	
	// disabled RW
	CLR_BIT(PORT_CONT,RW);
 5e2:	91 98       	cbi	0x12, 1	; 18
	// enabel rs
	CLR_BIT(PORT_CONT,RS);
 5e4:	94 98       	cbi	0x12, 4	; 18
	
	//adjust enable 
	CLR_BIT(PORT_CONT,en);
 5e6:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	8a 95       	dec	r24
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <lcd_send_command+0xa>
 5ee:	00 00       	nop
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
 5f0:	93 9a       	sbi	0x12, 3	; 18
 5f2:	93 e0       	ldi	r25, 0x03	; 3
 5f4:	9a 95       	dec	r25
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <lcd_send_command+0x14>
 5f8:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fa:	87 ea       	ldi	r24, 0xA7	; 167
 5fc:	91 e6       	ldi	r25, 0x61	; 97
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <lcd_send_command+0x1e>
 602:	00 c0       	rjmp	.+0      	; 0x604 <lcd_send_command+0x24>
 604:	00 00       	nop
	_delay_us(1);
	
	//let lcd execute command
	_delay_ms(10);
	
}
 606:	08 95       	ret

00000608 <lcd_init>:
void lcd_init(){
	// data on portb are output
	DDRC=0xff;
 608:	8f ef       	ldi	r24, 0xFF	; 255
 60a:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
 60c:	15 ba       	out	0x15, r1	; 21
	//control pins are output 
	SET_BIT(DDRD,en);
 60e:	8b 9a       	sbi	0x11, 3	; 17
	SET_BIT(DDRD,RW);
 610:	89 9a       	sbi	0x11, 1	; 17
	SET_BIT(DDRD,RS);
 612:	8c 9a       	sbi	0x11, 4	; 17
	// active enable 
	SET_BIT(PORT_CONT,en);
 614:	93 9a       	sbi	0x12, 3	; 18
	
	//lcd_init 8bit mode
	lcd_send_command(0x38);
 616:	88 e3       	ldi	r24, 0x38	; 56
 618:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <lcd_send_command>
	//lcd on cursor off
	lcd_send_command(0x0c);
 61c:	8c e0       	ldi	r24, 0x0C	; 12
 61e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <lcd_send_command>
}
 622:	08 95       	ret

00000624 <LCD_SendData>:

void LCD_SendData(unsigned char data)
{
	// Put Data on Port
	PORTC = data;
 624:	85 bb       	out	0x15, r24	; 21
	// Set R/W to W
	CLR_BIT(PORT_CONT,RW);
 626:	91 98       	cbi	0x12, 1	; 18
	// Set RS to Data
	SET_BIT(PORT_CONT,RS);
 628:	94 9a       	sbi	0x12, 4	; 18

//adjust enable
	CLR_BIT(PORT_CONT,en);
 62a:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62c:	83 e0       	ldi	r24, 0x03	; 3
 62e:	8a 95       	dec	r24
 630:	f1 f7       	brne	.-4      	; 0x62e <LCD_SendData+0xa>
 632:	00 00       	nop
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
 634:	93 9a       	sbi	0x12, 3	; 18
 636:	93 e0       	ldi	r25, 0x03	; 3
 638:	9a 95       	dec	r25
 63a:	f1 f7       	brne	.-4      	; 0x638 <LCD_SendData+0x14>
 63c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 63e:	87 ea       	ldi	r24, 0xA7	; 167
 640:	91 e6       	ldi	r25, 0x61	; 97
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	f1 f7       	brne	.-4      	; 0x642 <LCD_SendData+0x1e>
 646:	00 c0       	rjmp	.+0      	; 0x648 <LCD_SendData+0x24>
 648:	00 00       	nop
	_delay_us(1);
	
	// Delay to let LCD Display Data
	_delay_ms(10);
}
 64a:	08 95       	ret

0000064c <LCD_SET_CURSOR>:

void LCD_SET_CURSOR (unsigned char x, unsigned char y)
{
	if(y == 0)
 64c:	66 23       	and	r22, r22
 64e:	21 f4       	brne	.+8      	; 0x658 <LCD_SET_CURSOR+0xc>
	{
		lcd_send_command(0x80 + x);
 650:	80 58       	subi	r24, 0x80	; 128
 652:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <lcd_send_command>
 656:	08 95       	ret
	}
	else
	{
		lcd_send_command(0xC0+ x);
 658:	80 54       	subi	r24, 0x40	; 64
 65a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <lcd_send_command>
 65e:	08 95       	ret

00000660 <LCD_SendString>:
	}
}

void LCD_SendString(char *str)
{
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	ec 01       	movw	r28, r24
	while(*str != '\0')
 666:	88 81       	ld	r24, Y
 668:	88 23       	and	r24, r24
 66a:	31 f0       	breq	.+12     	; 0x678 <LCD_SendString+0x18>
	{
		lcd_send_command(0xC0+ x);
	}
}

void LCD_SendString(char *str)
 66c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		LCD_SendData(*str);
 66e:	0e 94 12 03 	call	0x624	; 0x624 <LCD_SendData>
	}
}

void LCD_SendString(char *str)
{
	while(*str != '\0')
 672:	89 91       	ld	r24, Y+
 674:	88 23       	and	r24, r24
 676:	d9 f7       	brne	.-10     	; 0x66e <LCD_SendString+0xe>
	{
		LCD_SendData(*str);
		str++;
	}
}
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <LCD_Clear>:
void LCD_Clear(void)
{
	// Send Clr command to LCD
lcd_send_command(0x01);
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <lcd_send_command>
}
 684:	08 95       	ret

00000686 <lcd_out>:

void lcd_out( unsigned char x, unsigned char y,char *str)
{
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	ea 01       	movw	r28, r20
	LCD_SET_CURSOR(x, y);
 68c:	0e 94 26 03 	call	0x64c	; 0x64c <LCD_SET_CURSOR>
	LCD_SendString(str);
 690:	ce 01       	movw	r24, r28
 692:	0e 94 30 03 	call	0x660	; 0x660 <LCD_SendString>
}
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	08 95       	ret

0000069c <convertData>:
char* convertData(unsigned int var)
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
 69c:	10 92 26 01 	sts	0x0126, r1
if(var==0) return "zero";
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	71 f0       	breq	.+28     	; 0x6c0 <convertData+0x24>
 6a4:	e6 e2       	ldi	r30, 0x26	; 38
 6a6:	f1 e0       	ldi	r31, 0x01	; 1
else 

	while(var != 0)
	{
		arr--;
		*arr = (var%10) + '0';
 6a8:	2a e0       	ldi	r18, 0x0A	; 10
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	b9 01       	movw	r22, r18
 6ae:	0e 94 8d 03 	call	0x71a	; 0x71a <__udivmodhi4>
 6b2:	80 5d       	subi	r24, 0xD0	; 208
 6b4:	82 93       	st	-Z, r24
		var = var / 10;
 6b6:	86 2f       	mov	r24, r22
 6b8:	97 2f       	mov	r25, r23

	*arr = '\0';
if(var==0) return "zero";
else 

	while(var != 0)
 6ba:	00 97       	sbiw	r24, 0x00	; 0
 6bc:	b9 f7       	brne	.-18     	; 0x6ac <convertData+0x10>
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <convertData+0x28>
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
if(var==0) return "zero";
 6c0:	ec e0       	ldi	r30, 0x0C	; 12
 6c2:	f1 e0       	ldi	r31, 0x01	; 1
		arr--;
		*arr = (var%10) + '0';
		var = var / 10;
	}
	return arr;
}
 6c4:	8e 2f       	mov	r24, r30
 6c6:	9f 2f       	mov	r25, r31
 6c8:	08 95       	ret

000006ca <UART_INIT>:
 */ 
#include "AVR_UART.h"

void UART_INIT()
{
UBRRL = (uint8_t)(MYUBRR) ;    //send the low  8 bits of the UBRR
 6ca:	83 e3       	ldi	r24, 0x33	; 51
 6cc:	89 b9       	out	0x09, r24	; 9
UBRRH = (uint8_t)(MYUBRR>>8);//send the high 4 bits of the UBRR
 6ce:	10 bc       	out	0x20, r1	; 32
UCSRB |=((1<<4)|(1<<3));     //Enable transmit and enable RXENn TXENn
 6d0:	8a b1       	in	r24, 0x0a	; 10
 6d2:	88 61       	ori	r24, 0x18	; 24
 6d4:	8a b9       	out	0x0a, r24	; 10
UCSRC |=((1<<2)|(1<<1));     //Frame with 8 bit data , 1 stop bit, no parity UCSZn1 UCSZn0 , Asynchornous mode 
 6d6:	80 b5       	in	r24, 0x20	; 32
 6d8:	86 60       	ori	r24, 0x06	; 6
 6da:	80 bd       	out	0x20, r24	; 32
}
 6dc:	08 95       	ret

000006de <UART_Transmit>:


void UART_Transmit(uint8_t data)
{  while( !(UCSRA & (1<<5)) ) ;// wait until the buffer is empty UDREn
 6de:	5d 9b       	sbis	0x0b, 5	; 11
 6e0:	fe cf       	rjmp	.-4      	; 0x6de <UART_Transmit>
	UDR=data;
 6e2:	8c b9       	out	0x0c, r24	; 12
}
 6e4:	08 95       	ret

000006e6 <UART_Read>:

uint8_t UART_Read()
{ while( !(UCSRA & (1<<7)) ) ;//wait until the receiving complete RXCn
 6e6:	5f 9b       	sbis	0x0b, 7	; 11
 6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <UART_Read>
	return UDR;
 6ea:	8c b1       	in	r24, 0x0c	; 12
}
 6ec:	08 95       	ret

000006ee <UART_Transmit_string>:

void UART_Transmit_string (char * str)
{
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	8c 01       	movw	r16, r24
	unsigned char i =0 ;
	 while(str[i]!=0)
 6f6:	fc 01       	movw	r30, r24
 6f8:	80 81       	ld	r24, Z
 6fa:	88 23       	and	r24, r24
 6fc:	51 f0       	breq	.+20     	; 0x712 <UART_Transmit_string+0x24>
	return UDR;
}

void UART_Transmit_string (char * str)
{
	unsigned char i =0 ;
 6fe:	c0 e0       	ldi	r28, 0x00	; 0
	 while(str[i]!=0)
	    {UART_Transmit(str[i]) ; i++;}
 700:	0e 94 6f 03 	call	0x6de	; 0x6de <UART_Transmit>
 704:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_Transmit_string (char * str)
{
	unsigned char i =0 ;
	 while(str[i]!=0)
 706:	f8 01       	movw	r30, r16
 708:	ec 0f       	add	r30, r28
 70a:	f1 1d       	adc	r31, r1
 70c:	80 81       	ld	r24, Z
 70e:	88 23       	and	r24, r24
 710:	b9 f7       	brne	.-18     	; 0x700 <UART_Transmit_string+0x12>
	    {UART_Transmit(str[i]) ; i++;}
 712:	cf 91       	pop	r28
 714:	1f 91       	pop	r17
 716:	0f 91       	pop	r16
 718:	08 95       	ret

0000071a <__udivmodhi4>:
 71a:	aa 1b       	sub	r26, r26
 71c:	bb 1b       	sub	r27, r27
 71e:	51 e1       	ldi	r21, 0x11	; 17
 720:	07 c0       	rjmp	.+14     	; 0x730 <__udivmodhi4_ep>

00000722 <__udivmodhi4_loop>:
 722:	aa 1f       	adc	r26, r26
 724:	bb 1f       	adc	r27, r27
 726:	a6 17       	cp	r26, r22
 728:	b7 07       	cpc	r27, r23
 72a:	10 f0       	brcs	.+4      	; 0x730 <__udivmodhi4_ep>
 72c:	a6 1b       	sub	r26, r22
 72e:	b7 0b       	sbc	r27, r23

00000730 <__udivmodhi4_ep>:
 730:	88 1f       	adc	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	5a 95       	dec	r21
 736:	a9 f7       	brne	.-22     	; 0x722 <__udivmodhi4_loop>
 738:	80 95       	com	r24
 73a:	90 95       	com	r25
 73c:	bc 01       	movw	r22, r24
 73e:	cd 01       	movw	r24, r26
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
