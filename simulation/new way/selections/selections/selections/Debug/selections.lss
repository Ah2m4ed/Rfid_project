
selections.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800078  00800078  0000031a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000a70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000960  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000330  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000615  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000021c  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000289  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  8a:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_send_command>:
#include "macros.h"
#include <avr/delay.h>
#include <util/delay.h>
	
void lcd_send_command(uint8_t cmd ){
	PORT_data =cmd;
  92:	85 bb       	out	0x15, r24	; 21
	
	// disabled RW
	CLR_BIT(PORT_CONT,RW);
  94:	91 98       	cbi	0x12, 1	; 18
	// enabel rs
	CLR_BIT(PORT_CONT,RS);
  96:	94 98       	cbi	0x12, 4	; 18
	
	//adjust enable 
	CLR_BIT(PORT_CONT,en);
  98:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_send_command+0xa>
  a0:	00 00       	nop
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
  a2:	93 9a       	sbi	0x12, 3	; 18
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	9a 95       	dec	r25
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_send_command+0x14>
  aa:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	87 ea       	ldi	r24, 0xA7	; 167
  ae:	91 e6       	ldi	r25, 0x61	; 97
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_send_command+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_send_command+0x24>
  b6:	00 00       	nop
	_delay_us(1);
	
	//let lcd execute command
	_delay_ms(10);
	
}
  b8:	08 95       	ret

000000ba <lcd_init>:
void lcd_init(){
	// data on portb are output
	DDRC=0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
  be:	15 ba       	out	0x15, r1	; 21
	//control pins are output 
	SET_BIT(DDRD,en);
  c0:	8b 9a       	sbi	0x11, 3	; 17
	SET_BIT(DDRD,RW);
  c2:	89 9a       	sbi	0x11, 1	; 17
	SET_BIT(DDRD,RS);
  c4:	8c 9a       	sbi	0x11, 4	; 17
	// active enable 
	SET_BIT(PORT_CONT,en);
  c6:	93 9a       	sbi	0x12, 3	; 18
	
	//lcd_init 8bit mode
	lcd_send_command(0x38);
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
	//lcd on cursor off
	lcd_send_command(0x0c);
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
}
  d4:	08 95       	ret

000000d6 <LCD_SendData>:

void LCD_SendData(unsigned char data)
{
	// Put Data on Port
	PORTC = data;
  d6:	85 bb       	out	0x15, r24	; 21
	// Set R/W to W
	CLR_BIT(PORT_CONT,RW);
  d8:	91 98       	cbi	0x12, 1	; 18
	// Set RS to Data
	SET_BIT(PORT_CONT,RS);
  da:	94 9a       	sbi	0x12, 4	; 18

//adjust enable
	CLR_BIT(PORT_CONT,en);
  dc:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_SendData+0xa>
  e4:	00 00       	nop
	_delay_us(1);
	SET_BIT(PORT_CONT,en);
  e6:	93 9a       	sbi	0x12, 3	; 18
  e8:	93 e0       	ldi	r25, 0x03	; 3
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_SendData+0x14>
  ee:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	87 ea       	ldi	r24, 0xA7	; 167
  f2:	91 e6       	ldi	r25, 0x61	; 97
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_SendData+0x1e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_SendData+0x24>
  fa:	00 00       	nop
	_delay_us(1);
	
	// Delay to let LCD Display Data
	_delay_ms(10);
}
  fc:	08 95       	ret

000000fe <LCD_SET_CURSOR>:

void LCD_SET_CURSOR (unsigned char x, unsigned char y)
{
	if(y == 0)
  fe:	66 23       	and	r22, r22
 100:	21 f4       	brne	.+8      	; 0x10a <LCD_SET_CURSOR+0xc>
	{
		lcd_send_command(0x80 + x);
 102:	80 58       	subi	r24, 0x80	; 128
 104:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 108:	08 95       	ret
	}
	else
	{
		lcd_send_command(0xC0+ x);
 10a:	80 54       	subi	r24, 0x40	; 64
 10c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 110:	08 95       	ret

00000112 <LCD_SendString>:
	}
}

void LCD_SendString(char *str)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	while(*str != '\0')
 118:	88 81       	ld	r24, Y
 11a:	88 23       	and	r24, r24
 11c:	31 f0       	breq	.+12     	; 0x12a <LCD_SendString+0x18>
	{
		lcd_send_command(0xC0+ x);
	}
}

void LCD_SendString(char *str)
 11e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		LCD_SendData(*str);
 120:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_SendData>
	}
}

void LCD_SendString(char *str)
{
	while(*str != '\0')
 124:	89 91       	ld	r24, Y+
 126:	88 23       	and	r24, r24
 128:	d9 f7       	brne	.-10     	; 0x120 <LCD_SendString+0xe>
	{
		LCD_SendData(*str);
		str++;
	}
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <LCD_Clear>:
void LCD_Clear(void)
{
	// Send Clr command to LCD
lcd_send_command(0x01);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
}
 136:	08 95       	ret

00000138 <lcd_out>:

void lcd_out( unsigned char x, unsigned char y,char *str)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ea 01       	movw	r28, r20
	LCD_SET_CURSOR(x, y);
 13e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_SET_CURSOR>
	LCD_SendString(str);
 142:	ce 01       	movw	r24, r28
 144:	0e 94 89 00 	call	0x112	; 0x112 <LCD_SendString>
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <convertData>:
char* convertData(unsigned int var)
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
 14e:	10 92 88 00 	sts	0x0088, r1
if(var==0) return "zero";
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	71 f0       	breq	.+28     	; 0x172 <convertData+0x24>
 156:	e8 e8       	ldi	r30, 0x88	; 136
 158:	f0 e0       	ldi	r31, 0x00	; 0
else 

	while(var != 0)
	{
		arr--;
		*arr = (var%10) + '0';
 15a:	2a e0       	ldi	r18, 0x0A	; 10
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	0e 94 21 01 	call	0x242	; 0x242 <__udivmodhi4>
 164:	80 5d       	subi	r24, 0xD0	; 208
 166:	82 93       	st	-Z, r24
		var = var / 10;
 168:	86 2f       	mov	r24, r22
 16a:	97 2f       	mov	r25, r23

	*arr = '\0';
if(var==0) return "zero";
else 

	while(var != 0)
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	b9 f7       	brne	.-18     	; 0x15e <convertData+0x10>
 170:	02 c0       	rjmp	.+4      	; 0x176 <convertData+0x28>
{
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
if(var==0) return "zero";
 172:	e0 e6       	ldi	r30, 0x60	; 96
 174:	f0 e0       	ldi	r31, 0x00	; 0
		arr--;
		*arr = (var%10) + '0';
		var = var / 10;
	}
	return arr;
}
 176:	8e 2f       	mov	r24, r30
 178:	9f 2f       	mov	r25, r31
 17a:	08 95       	ret

0000017c <lcd_delete>:

void lcd_delete(){
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
	lcd_out(0,0,"                  ");
 180:	c5 e6       	ldi	r28, 0x65	; 101
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	ae 01       	movw	r20, r28
 18a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	lcd_out(0,1,"                  ");
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	ae 01       	movw	r20, r28
 194:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_out>
	
	
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <select_output>:
		
        //TODO:: Please write your application code 
    }
}
void select_output(){
DDRC=0x00;
 19e:	14 ba       	out	0x14, r1	; 20
}
 1a0:	08 95       	ret

000001a2 <main>:
void decider();
void select_output();
int main(void)
{
	
	UART_INIT();
 1a2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <UART_INIT>
	select_output();
 1a6:	0e 94 cf 00 	call	0x19e	; 0x19e <select_output>
	
    while(1)
    {
		if(GET_BIT(PINC,0)==1){UART_Transmit('a');}
 1aa:	98 9b       	sbis	0x13, 0	; 19
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <main+0x12>
 1ae:	81 e6       	ldi	r24, 0x61	; 97
 1b0:	0e 94 03 01 	call	0x206	; 0x206 <UART_Transmit>
				if(GET_BIT(PINC,1)==1){UART_Transmit('b');}
 1b4:	83 b3       	in	r24, 0x13	; 19
 1b6:	81 ff       	sbrs	r24, 1
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <main+0x1e>
 1ba:	82 e6       	ldi	r24, 0x62	; 98
 1bc:	0e 94 03 01 	call	0x206	; 0x206 <UART_Transmit>
						if(GET_BIT(PINC,2)==1){UART_Transmit('c');}
 1c0:	83 b3       	in	r24, 0x13	; 19
 1c2:	82 ff       	sbrs	r24, 2
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <main+0x2a>
 1c6:	83 e6       	ldi	r24, 0x63	; 99
 1c8:	0e 94 03 01 	call	0x206	; 0x206 <UART_Transmit>
								if(GET_BIT(PINC,3)==1){UART_Transmit('d');}
 1cc:	83 b3       	in	r24, 0x13	; 19
 1ce:	83 ff       	sbrs	r24, 3
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <main+0x36>
 1d2:	84 e6       	ldi	r24, 0x64	; 100
 1d4:	0e 94 03 01 	call	0x206	; 0x206 <UART_Transmit>
										if(GET_BIT(PINC,4)==1){UART_Transmit('e');}
 1d8:	83 b3       	in	r24, 0x13	; 19
 1da:	84 ff       	sbrs	r24, 4
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <main+0x42>
 1de:	85 e6       	ldi	r24, 0x65	; 101
 1e0:	0e 94 03 01 	call	0x206	; 0x206 <UART_Transmit>
												if(GET_BIT(PINC,5)==1){UART_Transmit('f');}
 1e4:	83 b3       	in	r24, 0x13	; 19
 1e6:	85 ff       	sbrs	r24, 5
 1e8:	e0 cf       	rjmp	.-64     	; 0x1aa <main+0x8>
 1ea:	86 e6       	ldi	r24, 0x66	; 102
 1ec:	0e 94 03 01 	call	0x206	; 0x206 <UART_Transmit>
 1f0:	dc cf       	rjmp	.-72     	; 0x1aa <main+0x8>

000001f2 <UART_INIT>:
 */ 
#include "AVR_UART.h"

void UART_INIT()
{
UBRRL = (uint8_t)(MYUBRR) ;    //send the low  8 bits of the UBRR
 1f2:	83 e3       	ldi	r24, 0x33	; 51
 1f4:	89 b9       	out	0x09, r24	; 9
UBRRH = (uint8_t)(MYUBRR>>8);//send the high 4 bits of the UBRR
 1f6:	10 bc       	out	0x20, r1	; 32
UCSRB |=((1<<4)|(1<<3));     //Enable transmit and enable RXENn TXENn
 1f8:	8a b1       	in	r24, 0x0a	; 10
 1fa:	88 61       	ori	r24, 0x18	; 24
 1fc:	8a b9       	out	0x0a, r24	; 10
UCSRC |=((1<<2)|(1<<1));     //Frame with 8 bit data , 1 stop bit, no parity UCSZn1 UCSZn0 , Asynchornous mode 
 1fe:	80 b5       	in	r24, 0x20	; 32
 200:	86 60       	ori	r24, 0x06	; 6
 202:	80 bd       	out	0x20, r24	; 32
}
 204:	08 95       	ret

00000206 <UART_Transmit>:


void UART_Transmit(uint8_t data)
{  while( !(UCSRA & (1<<5)) ) ;// wait until the buffer is empty UDREn
 206:	5d 9b       	sbis	0x0b, 5	; 11
 208:	fe cf       	rjmp	.-4      	; 0x206 <UART_Transmit>
	UDR=data;
 20a:	8c b9       	out	0x0c, r24	; 12
}
 20c:	08 95       	ret

0000020e <UART_Read>:

uint8_t UART_Read()
{ while( !(UCSRA & (1<<7)) ) ;//wait until the receiving complete RXCn
 20e:	5f 9b       	sbis	0x0b, 7	; 11
 210:	fe cf       	rjmp	.-4      	; 0x20e <UART_Read>
	return UDR;
 212:	8c b1       	in	r24, 0x0c	; 12
}
 214:	08 95       	ret

00000216 <UART_Transmit_string>:

void UART_Transmit_string (char * str)
{
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	8c 01       	movw	r16, r24
	unsigned char i =0 ;
	 while(str[i]!=0)
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	88 23       	and	r24, r24
 224:	51 f0       	breq	.+20     	; 0x23a <UART_Transmit_string+0x24>
	return UDR;
}

void UART_Transmit_string (char * str)
{
	unsigned char i =0 ;
 226:	c0 e0       	ldi	r28, 0x00	; 0
	 while(str[i]!=0)
	    {UART_Transmit(str[i]) ; i++;}
 228:	0e 94 03 01 	call	0x206	; 0x206 <UART_Transmit>
 22c:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_Transmit_string (char * str)
{
	unsigned char i =0 ;
	 while(str[i]!=0)
 22e:	f8 01       	movw	r30, r16
 230:	ec 0f       	add	r30, r28
 232:	f1 1d       	adc	r31, r1
 234:	80 81       	ld	r24, Z
 236:	88 23       	and	r24, r24
 238:	b9 f7       	brne	.-18     	; 0x228 <UART_Transmit_string+0x12>
	    {UART_Transmit(str[i]) ; i++;}
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <__udivmodhi4>:
 242:	aa 1b       	sub	r26, r26
 244:	bb 1b       	sub	r27, r27
 246:	51 e1       	ldi	r21, 0x11	; 17
 248:	07 c0       	rjmp	.+14     	; 0x258 <__udivmodhi4_ep>

0000024a <__udivmodhi4_loop>:
 24a:	aa 1f       	adc	r26, r26
 24c:	bb 1f       	adc	r27, r27
 24e:	a6 17       	cp	r26, r22
 250:	b7 07       	cpc	r27, r23
 252:	10 f0       	brcs	.+4      	; 0x258 <__udivmodhi4_ep>
 254:	a6 1b       	sub	r26, r22
 256:	b7 0b       	sbc	r27, r23

00000258 <__udivmodhi4_ep>:
 258:	88 1f       	adc	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	5a 95       	dec	r21
 25e:	a9 f7       	brne	.-22     	; 0x24a <__udivmodhi4_loop>
 260:	80 95       	com	r24
 262:	90 95       	com	r25
 264:	bc 01       	movw	r22, r24
 266:	cd 01       	movw	r24, r26
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
